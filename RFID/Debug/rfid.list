
rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006330  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006960  08006960  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006960  08006960  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006960  08006960  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000020  08006984  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08006984  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f562  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002824  00000000  00000000  0002f5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d97  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c64  00000000  00000000  00033d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f3c  00000000  00000000  0004c96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d8e1  00000000  00000000  000608a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004918  00000000  00000000  000ee188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f2aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08006424 	.word	0x08006424

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08006424 	.word	0x08006424

0800014c <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000154:	f003 fec8 	bl	8003ee8 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000158:	2301      	movs	r3, #1
 800015a:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 800015c:	2301      	movs	r3, #1
 800015e:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000164:	2300      	movs	r3, #0
 8000166:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000168:	f107 020c 	add.w	r2, r7, #12
 800016c:	f107 0310 	add.w	r3, r7, #16
 8000170:	4611      	mov	r1, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f003 ffa0 	bl	80040b8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000178:	f003 fedc 	bl	8003f34 <HAL_FLASH_Lock>
}
 800017c:	bf00      	nop
 800017e:	3720      	adds	r7, #32
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000184:	b5b0      	push	{r4, r5, r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000190:	f003 feaa 	bl	8003ee8 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000194:	887b      	ldrh	r3, [r7, #2]
 8000196:	2200      	movs	r2, #0
 8000198:	461c      	mov	r4, r3
 800019a:	4615      	mov	r5, r2
 800019c:	4622      	mov	r2, r4
 800019e:	462b      	mov	r3, r5
 80001a0:	6879      	ldr	r1, [r7, #4]
 80001a2:	2001      	movs	r0, #1
 80001a4:	f003 fe30 	bl	8003e08 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80001a8:	f003 fec4 	bl	8003f34 <HAL_FLASH_Lock>
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bdb0      	pop	{r4, r5, r7, pc}

080001b4 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4613      	mov	r3, r2
 80001c0:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80001c2:	f003 fe91 	bl	8003ee8 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001c6:	2300      	movs	r3, #0
 80001c8:	82fb      	strh	r3, [r7, #22]
 80001ca:	e00c      	b.n	80001e6 <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 80001cc:	8afa      	ldrh	r2, [r7, #22]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	18d0      	adds	r0, r2, r3
 80001d2:	8afb      	ldrh	r3, [r7, #22]
 80001d4:	68ba      	ldr	r2, [r7, #8]
 80001d6:	4413      	add	r3, r2
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	f7ff ffd2 	bl	8000184 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001e0:	8afb      	ldrh	r3, [r7, #22]
 80001e2:	3302      	adds	r3, #2
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	8afa      	ldrh	r2, [r7, #22]
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d3ee      	bcc.n	80001cc <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 80001ee:	f003 fea1 	bl	8003f34 <HAL_FLASH_Lock>
}
 80001f2:	bf00      	nop
 80001f4:	3718      	adds	r7, #24
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
}
 8000220:	4618      	mov	r0, r3
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000238:	4610      	mov	r0, r2
 800023a:	4619      	mov	r1, r3
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000244:	b480      	push	{r7}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	4613      	mov	r3, r2
 8000250:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000252:	2300      	movs	r3, #0
 8000254:	82fb      	strh	r3, [r7, #22]
 8000256:	e00c      	b.n	8000272 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000258:	8afa      	ldrh	r2, [r7, #22]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	4413      	add	r3, r2
 800025e:	4619      	mov	r1, r3
 8000260:	8afb      	ldrh	r3, [r7, #22]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	4413      	add	r3, r2
 8000266:	780a      	ldrb	r2, [r1, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	3301      	adds	r3, #1
 8000270:	82fb      	strh	r3, [r7, #22]
 8000272:	8afa      	ldrh	r2, [r7, #22]
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3ee      	bcc.n	8000258 <Flash_Read_Array+0x14>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	371c      	adds	r7, #28
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
	...

08000288 <Check_Keypad_Column>:
											  {'*', '0', '#', 'D'},
                                         };


/*For specific row value sent , check all the cloumns*/
static char Check_Keypad_Column(uint8_t Row){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
	if(!READ_COLUMN_1)                           //If COLUMN_1 is LOW
 8000292:	2120      	movs	r1, #32
 8000294:	481d      	ldr	r0, [pc, #116]	; (800030c <Check_Keypad_Column+0x84>)
 8000296:	f004 f93b 	bl	8004510 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d105      	bne.n	80002ac <Check_Keypad_Column+0x24>
	{
		return Keypad_Button_Values[Row-1][0];
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	4a1a      	ldr	r2, [pc, #104]	; (8000310 <Check_Keypad_Column+0x88>)
 80002a6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80002aa:	e02b      	b.n	8000304 <Check_Keypad_Column+0x7c>
	}

	if(!READ_COLUMN_2)                           //If COLUMN_2 is LOW
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	4817      	ldr	r0, [pc, #92]	; (800030c <Check_Keypad_Column+0x84>)
 80002b0:	f004 f92e 	bl	8004510 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d106      	bne.n	80002c8 <Check_Keypad_Column+0x40>
	{
		return Keypad_Button_Values[Row-1][1];
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	3b01      	subs	r3, #1
 80002be:	4a14      	ldr	r2, [pc, #80]	; (8000310 <Check_Keypad_Column+0x88>)
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	4413      	add	r3, r2
 80002c4:	785b      	ldrb	r3, [r3, #1]
 80002c6:	e01d      	b.n	8000304 <Check_Keypad_Column+0x7c>
	}

    if(!READ_COLUMN_3)                           //If COLUMN_3 is LOW
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	4810      	ldr	r0, [pc, #64]	; (800030c <Check_Keypad_Column+0x84>)
 80002cc:	f004 f920 	bl	8004510 <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d106      	bne.n	80002e4 <Check_Keypad_Column+0x5c>
	{
		return Keypad_Button_Values[Row-1][2];
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <Check_Keypad_Column+0x88>)
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	4413      	add	r3, r2
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	e00f      	b.n	8000304 <Check_Keypad_Column+0x7c>
	}

	if(!READ_COLUMN_4)                           //If COLUMN_3 is LOW
 80002e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e8:	4808      	ldr	r0, [pc, #32]	; (800030c <Check_Keypad_Column+0x84>)
 80002ea:	f004 f911 	bl	8004510 <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d106      	bne.n	8000302 <Check_Keypad_Column+0x7a>
	{
		return Keypad_Button_Values[Row-1][3];
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	3b01      	subs	r3, #1
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <Check_Keypad_Column+0x88>)
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	4413      	add	r3, r2
 80002fe:	78db      	ldrb	r3, [r3, #3]
 8000300:	e000      	b.n	8000304 <Check_Keypad_Column+0x7c>
	}

	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 8000302:	2300      	movs	r3, #0
}
 8000304:	4618      	mov	r0, r3
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40010c00 	.word	0x40010c00
 8000310:	08006938 	.word	0x08006938

08000314 <KEYPAD_Read>:


/* Read the keypad */
char KEYPAD_Read(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
    char check;
    /*Set ROW_1 LOW and scan all the columns*/
	SET_ROW_2_HIGH;
 800031a:	2201      	movs	r2, #1
 800031c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000320:	4840      	ldr	r0, [pc, #256]	; (8000424 <KEYPAD_Read+0x110>)
 8000322:	f004 f90c 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_3_HIGH;
 8000326:	2201      	movs	r2, #1
 8000328:	2108      	movs	r1, #8
 800032a:	483f      	ldr	r0, [pc, #252]	; (8000428 <KEYPAD_Read+0x114>)
 800032c:	f004 f907 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_4_HIGH;
 8000330:	2201      	movs	r2, #1
 8000332:	2110      	movs	r1, #16
 8000334:	483c      	ldr	r0, [pc, #240]	; (8000428 <KEYPAD_Read+0x114>)
 8000336:	f004 f902 	bl	800453e <HAL_GPIO_WritePin>
    SET_ROW_1_LOW;
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000340:	4838      	ldr	r0, [pc, #224]	; (8000424 <KEYPAD_Read+0x110>)
 8000342:	f004 f8fc 	bl	800453e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(1);
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff9e 	bl	8000288 <Check_Keypad_Column>
 800034c:	4603      	mov	r3, r0
 800034e:	71fb      	strb	r3, [r7, #7]
    if(check)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <KEYPAD_Read+0x46>
    	return check;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	e060      	b.n	800041c <KEYPAD_Read+0x108>

    /*Set ROW_2 LOW and scan all the columns*/
    SET_ROW_1_HIGH;
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000360:	4830      	ldr	r0, [pc, #192]	; (8000424 <KEYPAD_Read+0x110>)
 8000362:	f004 f8ec 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_3_HIGH;
 8000366:	2201      	movs	r2, #1
 8000368:	2108      	movs	r1, #8
 800036a:	482f      	ldr	r0, [pc, #188]	; (8000428 <KEYPAD_Read+0x114>)
 800036c:	f004 f8e7 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_4_HIGH;
 8000370:	2201      	movs	r2, #1
 8000372:	2110      	movs	r1, #16
 8000374:	482c      	ldr	r0, [pc, #176]	; (8000428 <KEYPAD_Read+0x114>)
 8000376:	f004 f8e2 	bl	800453e <HAL_GPIO_WritePin>
    SET_ROW_2_LOW;
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000380:	4828      	ldr	r0, [pc, #160]	; (8000424 <KEYPAD_Read+0x110>)
 8000382:	f004 f8dc 	bl	800453e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(2);
 8000386:	2002      	movs	r0, #2
 8000388:	f7ff ff7e 	bl	8000288 <Check_Keypad_Column>
 800038c:	4603      	mov	r3, r0
 800038e:	71fb      	strb	r3, [r7, #7]
    if(check)
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <KEYPAD_Read+0x86>
    	return check;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	e040      	b.n	800041c <KEYPAD_Read+0x108>
    /*Set ROW_3 LOW and scan all the columns*/
    SET_ROW_1_HIGH;
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a0:	4820      	ldr	r0, [pc, #128]	; (8000424 <KEYPAD_Read+0x110>)
 80003a2:	f004 f8cc 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_2_HIGH;
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ac:	481d      	ldr	r0, [pc, #116]	; (8000424 <KEYPAD_Read+0x110>)
 80003ae:	f004 f8c6 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_4_HIGH;
 80003b2:	2201      	movs	r2, #1
 80003b4:	2110      	movs	r1, #16
 80003b6:	481c      	ldr	r0, [pc, #112]	; (8000428 <KEYPAD_Read+0x114>)
 80003b8:	f004 f8c1 	bl	800453e <HAL_GPIO_WritePin>
    SET_ROW_3_LOW;
 80003bc:	2200      	movs	r2, #0
 80003be:	2108      	movs	r1, #8
 80003c0:	4819      	ldr	r0, [pc, #100]	; (8000428 <KEYPAD_Read+0x114>)
 80003c2:	f004 f8bc 	bl	800453e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(3);
 80003c6:	2003      	movs	r0, #3
 80003c8:	f7ff ff5e 	bl	8000288 <Check_Keypad_Column>
 80003cc:	4603      	mov	r3, r0
 80003ce:	71fb      	strb	r3, [r7, #7]
    if(check)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <KEYPAD_Read+0xc6>
    	return check;
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	e020      	b.n	800041c <KEYPAD_Read+0x108>
    /*Set ROW_4 LOW and scan all the columns*/
    SET_ROW_1_HIGH;
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e0:	4810      	ldr	r0, [pc, #64]	; (8000424 <KEYPAD_Read+0x110>)
 80003e2:	f004 f8ac 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_2_HIGH;
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ec:	480d      	ldr	r0, [pc, #52]	; (8000424 <KEYPAD_Read+0x110>)
 80003ee:	f004 f8a6 	bl	800453e <HAL_GPIO_WritePin>
	SET_ROW_3_HIGH;
 80003f2:	2201      	movs	r2, #1
 80003f4:	2108      	movs	r1, #8
 80003f6:	480c      	ldr	r0, [pc, #48]	; (8000428 <KEYPAD_Read+0x114>)
 80003f8:	f004 f8a1 	bl	800453e <HAL_GPIO_WritePin>
    SET_ROW_4_LOW;
 80003fc:	2200      	movs	r2, #0
 80003fe:	2110      	movs	r1, #16
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <KEYPAD_Read+0x114>)
 8000402:	f004 f89c 	bl	800453e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(4);
 8000406:	2004      	movs	r0, #4
 8000408:	f7ff ff3e 	bl	8000288 <Check_Keypad_Column>
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
    if(check)
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <KEYPAD_Read+0x106>
    	return check;
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	e000      	b.n	800041c <KEYPAD_Read+0x108>
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <CLCD_I2C_Init>:
{
	HAL_Delay(Time);

}
void CLCD_I2C_Init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	4611      	mov	r1, r2
 8000438:	461a      	mov	r2, r3
 800043a:	460b      	mov	r3, r1
 800043c:	71fb      	strb	r3, [r7, #7]
 800043e:	4613      	mov	r3, r2
 8000440:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	7e3a      	ldrb	r2, [r7, #24]
 8000446:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	2208      	movs	r2, #8
 800044c:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	79fa      	ldrb	r2, [r7, #7]
 8000452:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	79ba      	ldrb	r2, [r7, #6]
 8000458:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	68ba      	ldr	r2, [r7, #8]
 800045e:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	2204      	movs	r2, #4
 8000464:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	HAL_Delay(40); 	//waiting for > 40ms
 8000466:	2028      	movs	r0, #40	; 0x28
 8000468:	f003 fb9c 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 800046c:	2130      	movs	r1, #48	; 0x30
 800046e:	68f8      	ldr	r0, [r7, #12]
 8000470:	f000 f847 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(5);  // waiting for >4.1ms
 8000474:	2005      	movs	r0, #5
 8000476:	f003 fb95 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 800047a:	2130      	movs	r1, #48	; 0x30
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f000 f840 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(1);  // waiting for >100us
 8000482:	2001      	movs	r0, #1
 8000484:	f003 fb8e 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 8000488:	2130      	movs	r1, #48	; 0x30
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f000 f839 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(10);
 8000490:	200a      	movs	r0, #10
 8000492:	f003 fb87 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 8000496:	2120      	movs	r1, #32
 8000498:	68f8      	ldr	r0, [r7, #12]
 800049a:	f000 f832 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(10);
 800049e:	200a      	movs	r0, #10
 80004a0:	f003 fb80 	bl	8003ba4 <HAL_Delay>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80004a4:	2128      	movs	r1, #40	; 0x28
 80004a6:	68f8      	ldr	r0, [r7, #12]
 80004a8:	f000 f82b 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f003 fb79 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 80004b2:	2108      	movs	r1, #8
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f000 f824 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(1);
 80004ba:	2001      	movs	r0, #1
 80004bc:	f003 fb72 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 80004c0:	2101      	movs	r1, #1
 80004c2:	68f8      	ldr	r0, [r7, #12]
 80004c4:	f000 f81d 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f003 fb6b 	bl	8003ba4 <HAL_Delay>
	HAL_Delay(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f003 fb68 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80004d4:	2106      	movs	r1, #6
 80004d6:	68f8      	ldr	r0, [r7, #12]
 80004d8:	f000 f813 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f003 fb61 	bl	8003ba4 <HAL_Delay>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	68f8      	ldr	r0, [r7, #12]
 80004f0:	f000 f807 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f003 fb55 	bl	8003ba4 <HAL_Delay>
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af02      	add	r7, sp, #8
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	460b      	mov	r3, r1
 800050c:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 800050e:	78fb      	ldrb	r3, [r7, #3]
 8000510:	f023 030f 	bic.w	r3, r3, #15
 8000514:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f043 030c 	orr.w	r3, r3, #12
 8000522:	b2db      	uxtb	r3, r3
 8000524:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	b2db      	uxtb	r3, r3
 800052e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	f043 030c 	orr.w	r3, r3, #12
 8000536:	b2db      	uxtb	r3, r3
 8000538:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	b2db      	uxtb	r3, r3
 8000542:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6898      	ldr	r0, [r3, #8]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	b299      	uxth	r1, r3
 800054e:	f107 0208 	add.w	r2, r7, #8
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2304      	movs	r3, #4
 8000558:	f004 f966 	bl	8004828 <HAL_I2C_Master_Transmit>
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	f023 030f 	bic.w	r3, r3, #15
 8000576:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	f043 030d 	orr.w	r3, r3, #13
 8000584:	b2db      	uxtb	r3, r3
 8000586:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 0309 	orr.w	r3, r3, #9
 800058e:	b2db      	uxtb	r3, r3
 8000590:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	f043 030d 	orr.w	r3, r3, #13
 8000598:	b2db      	uxtb	r3, r3
 800059a:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 0309 	orr.w	r3, r3, #9
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6898      	ldr	r0, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	789b      	ldrb	r3, [r3, #2]
 80005ae:	b299      	uxth	r1, r3
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2304      	movs	r3, #4
 80005ba:	f004 f935 	bl	8004828 <HAL_I2C_Master_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <lcd_set_cursor+0x50>)
 80005da:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	78ba      	ldrb	r2, [r7, #2]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d903      	bls.n	80005ee <lcd_set_cursor+0x26>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 80005ee:	78bb      	ldrb	r3, [r7, #2]
 80005f0:	3310      	adds	r3, #16
 80005f2:	443b      	add	r3, r7
 80005f4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	4413      	add	r3, r2
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000604:	b25b      	sxtb	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff79 	bl	8000502 <lcd_send_cmd>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	54144000 	.word	0x54144000

0800061c <CLCD_SetCursor>:

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
}
void CLCD_SetCursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
 8000628:	4613      	mov	r3, r2
 800062a:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <CLCD_SetCursor+0x50>)
 800062e:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	78ba      	ldrb	r2, [r7, #2]
 8000636:	429a      	cmp	r2, r3
 8000638:	d903      	bls.n	8000642 <CLCD_SetCursor+0x26>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	3b01      	subs	r3, #1
 8000640:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 8000642:	78bb      	ldrb	r3, [r7, #2]
 8000644:	3310      	adds	r3, #16
 8000646:	443b      	add	r3, r7
 8000648:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	4413      	add	r3, r2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	b25b      	sxtb	r3, r3
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b25b      	sxtb	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff4f 	bl	8000502 <lcd_send_cmd>
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	54144000 	.word	0x54144000

08000670 <CLCD_WriteChar>:
void CLCD_WriteChar(LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	f043 030d 	orr.w	r3, r3, #13
 8000690:	b2db      	uxtb	r3, r3
 8000692:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	f043 0309 	orr.w	r3, r3, #9
 800069a:	b2db      	uxtb	r3, r3
 800069c:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	f043 030d 	orr.w	r3, r3, #13
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	f043 0309 	orr.w	r3, r3, #9
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6898      	ldr	r0, [r3, #8]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	b299      	uxth	r1, r3
 80006bc:	f107 0208 	add.w	r2, r7, #8
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2304      	movs	r3, #4
 80006c6:	f004 f8af 	bl	8004828 <HAL_I2C_Master_Transmit>
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <CLCD_WriteString>:
void CLCD_WriteString(LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 80006dc:	e007      	b.n	80006ee <CLCD_WriteString+0x1c>
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	603a      	str	r2, [r7, #0]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff3b 	bl	8000564 <lcd_send_data>
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f3      	bne.n	80006de <CLCD_WriteString+0xc>
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <CLCD_Clear>:
void CLCD_Clear(LCD_I2C_HandleTypeDef *p_LCD)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 8000708:	2101      	movs	r1, #1
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff fef9 	bl	8000502 <lcd_send_cmd>
	HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f003 fa47 	bl	8003ba4 <HAL_Delay>
	lcd_set_cursor(p_LCD, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff54 	bl	80005c8 <lcd_set_cursor>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_TIM_PeriodElapsedCallback>:
uint8_t CheckUID(uint8_t *data, uint32_t address);
uint8_t CheckListUID(uint8_t *data);
uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000736:	f003 ff1a 	bl	800456e <HAL_GPIO_TogglePin>
	if(exitmenu > 0)
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <HAL_TIM_PeriodElapsedCallback+0x28>
		exitmenu --;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	3b01      	subs	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800074c:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 800074e:	e002      	b.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x2e>
	else exitmenu = 0;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40011000 	.word	0x40011000
 8000764:	20000000 	.word	0x20000000

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f003 f9b7 	bl	8003ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f8db 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 f9d1 	bl	8000b1c <MX_GPIO_Init>
  MX_SPI1_Init();
 800077a:	f000 f94b 	bl	8000a14 <MX_SPI1_Init>
  MX_TIM2_Init();
 800077e:	f000 f97f 	bl	8000a80 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000782:	f000 f919 	bl	80009b8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  TM_MFRC522_Init();
 8000786:	f002 fdf7 	bl	8003378 <TM_MFRC522_Init>

  CLCD_I2C_Init(&LCD1, &hi2c2, 16, 2, 0x27<<1);
 800078a:	234e      	movs	r3, #78	; 0x4e
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2302      	movs	r3, #2
 8000790:	2210      	movs	r2, #16
 8000792:	495b      	ldr	r1, [pc, #364]	; (8000900 <main+0x198>)
 8000794:	485b      	ldr	r0, [pc, #364]	; (8000904 <main+0x19c>)
 8000796:	f7ff fe49 	bl	800042c <CLCD_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 800079a:	485b      	ldr	r0, [pc, #364]	; (8000908 <main+0x1a0>)
 800079c:	f005 fa6c 	bl	8005c78 <HAL_TIM_Base_Start_IT>

	if (checkcountUID() == 0)
 80007a0:	f002 fa7e 	bl	8002ca0 <checkcountUID>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d101      	bne.n	80007ae <main+0x46>
	{
		startadd();
 80007aa:	f002 fc5f 	bl	800306c <startadd>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		CLCD_SetCursor(&LCD1, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	4854      	ldr	r0, [pc, #336]	; (8000904 <main+0x19c>)
 80007b4:	f7ff ff32 	bl	800061c <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, " SCAN YOUR CARD");
 80007b8:	4954      	ldr	r1, [pc, #336]	; (800090c <main+0x1a4>)
 80007ba:	4852      	ldr	r0, [pc, #328]	; (8000904 <main+0x19c>)
 80007bc:	f7ff ff89 	bl	80006d2 <CLCD_WriteString>
		if (checkMENU() != 0)
 80007c0:	f000 fa4a 	bl	8000c58 <checkMENU>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d05a      	beq.n	8000880 <main+0x118>
		{
			exitmenu = 15;
 80007ca:	4b51      	ldr	r3, [pc, #324]	; (8000910 <main+0x1a8>)
 80007cc:	220f      	movs	r2, #15
 80007ce:	701a      	strb	r2, [r3, #0]
			CLCD_SetCursor(&LCD1, 0, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2100      	movs	r1, #0
 80007d4:	484b      	ldr	r0, [pc, #300]	; (8000904 <main+0x19c>)
 80007d6:	f7ff ff21 	bl	800061c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, "   ADMIN CARD");
 80007da:	494e      	ldr	r1, [pc, #312]	; (8000914 <main+0x1ac>)
 80007dc:	4849      	ldr	r0, [pc, #292]	; (8000904 <main+0x19c>)
 80007de:	f7ff ff78 	bl	80006d2 <CLCD_WriteString>
			uint8_t key = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	71fb      	strb	r3, [r7, #7]
			uint8_t stat ;
			while (exitmenu )
 80007e6:	e026      	b.n	8000836 <main+0xce>
			{
				if (TM_MFRC522_Check(CardID) == MI_OK)
 80007e8:	484b      	ldr	r0, [pc, #300]	; (8000918 <main+0x1b0>)
 80007ea:	f002 fde9 	bl	80033c0 <TM_MFRC522_Check>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d108      	bne.n	8000806 <main+0x9e>
				{
					key = CheckListUID(CardID);
 80007f4:	4848      	ldr	r0, [pc, #288]	; (8000918 <main+0x1b0>)
 80007f6:	f002 fa23 	bl	8002c40 <CheckListUID>
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
					key = key >> 4;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	71fb      	strb	r3, [r7, #7]
					break;
 8000804:	e01b      	b.n	800083e <main+0xd6>
				}
				stat = checkMENU();
 8000806:	f000 fa27 	bl	8000c58 <checkMENU>
 800080a:	4603      	mov	r3, r0
 800080c:	71bb      	strb	r3, [r7, #6]
				switch(stat)
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d010      	beq.n	8000836 <main+0xce>
 8000814:	2b03      	cmp	r3, #3
 8000816:	d000      	beq.n	800081a <main+0xb2>
 8000818:	e007      	b.n	800082a <main+0xc2>
				{
				case 0:
					break;
				case 3:
					password_keypad();
 800081a:	f002 fccb 	bl	80031b4 <password_keypad>
					key = 99;
 800081e:	2363      	movs	r3, #99	; 0x63
 8000820:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <main+0x1a8>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
					break;
 8000828:	e005      	b.n	8000836 <main+0xce>
				default :
					key = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <main+0x1a8>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
					break;
 8000834:	bf00      	nop
			while (exitmenu )
 8000836:	4b36      	ldr	r3, [pc, #216]	; (8000910 <main+0x1a8>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1d4      	bne.n	80007e8 <main+0x80>
				}
			}
			switch (key){
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d002      	beq.n	800084a <main+0xe2>
 8000844:	2b63      	cmp	r3, #99	; 0x63
 8000846:	d003      	beq.n	8000850 <main+0xe8>
 8000848:	e006      	b.n	8000858 <main+0xf0>
			case 1:
				seclectmenu();
 800084a:	f000 fa83 	bl	8000d54 <seclectmenu>
				break;
 800084e:	e017      	b.n	8000880 <main+0x118>
			case 99:
				CLCD_Clear(&LCD1);
 8000850:	482c      	ldr	r0, [pc, #176]	; (8000904 <main+0x19c>)
 8000852:	f7ff ff55 	bl	8000700 <CLCD_Clear>
				break;
 8000856:	e013      	b.n	8000880 <main+0x118>
			default:
				CLCD_Clear(&LCD1);
 8000858:	482a      	ldr	r0, [pc, #168]	; (8000904 <main+0x19c>)
 800085a:	f7ff ff51 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	4828      	ldr	r0, [pc, #160]	; (8000904 <main+0x19c>)
 8000864:	f7ff feda 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "NOT ACCCESSIBLE");
 8000868:	492c      	ldr	r1, [pc, #176]	; (800091c <main+0x1b4>)
 800086a:	4826      	ldr	r0, [pc, #152]	; (8000904 <main+0x19c>)
 800086c:	f7ff ff31 	bl	80006d2 <CLCD_WriteString>
				HAL_Delay(2000);
 8000870:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000874:	f003 f996 	bl	8003ba4 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <main+0x19c>)
 800087a:	f7ff ff41 	bl	8000700 <CLCD_Clear>
				break;
 800087e:	bf00      	nop
			}
		}
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8000880:	4825      	ldr	r0, [pc, #148]	; (8000918 <main+0x1b0>)
 8000882:	f002 fd9d 	bl	80033c0 <TM_MFRC522_Check>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d190      	bne.n	80007ae <main+0x46>
		{
//			sprintf(str, "ID: 0x%02X%02X%02X%02X%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);

			if (CheckListUID(CardID) != 0)
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <main+0x1b0>)
 800088e:	f002 f9d7 	bl	8002c40 <CheckListUID>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d019      	beq.n	80008cc <main+0x164>
			{

				CLCD_Clear(&LCD1);
 8000898:	481a      	ldr	r0, [pc, #104]	; (8000904 <main+0x19c>)
 800089a:	f7ff ff31 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	4818      	ldr	r0, [pc, #96]	; (8000904 <main+0x19c>)
 80008a4:	f7ff feba 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    WELCOME");
 80008a8:	491d      	ldr	r1, [pc, #116]	; (8000920 <main+0x1b8>)
 80008aa:	4816      	ldr	r0, [pc, #88]	; (8000904 <main+0x19c>)
 80008ac:	f7ff ff11 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2100      	movs	r1, #0
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <main+0x19c>)
 80008b6:	f7ff feb1 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1,str);
 80008ba:	491a      	ldr	r1, [pc, #104]	; (8000924 <main+0x1bc>)
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <main+0x19c>)
 80008be:	f7ff ff08 	bl	80006d2 <CLCD_WriteString>
				HAL_Delay(3000);
 80008c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008c6:	f003 f96d 	bl	8003ba4 <HAL_Delay>
 80008ca:	e770      	b.n	80007ae <main+0x46>
			}
			else
			{
				CLCD_Clear(&LCD1);
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <main+0x19c>)
 80008ce:	f7ff ff17 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <main+0x19c>)
 80008d8:	f7ff fea0 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   WRONG CARD");
 80008dc:	4912      	ldr	r1, [pc, #72]	; (8000928 <main+0x1c0>)
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <main+0x19c>)
 80008e0:	f7ff fef7 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2100      	movs	r1, #0
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <main+0x19c>)
 80008ea:	f7ff fe97 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, str);
 80008ee:	490d      	ldr	r1, [pc, #52]	; (8000924 <main+0x1bc>)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <main+0x19c>)
 80008f2:	f7ff feee 	bl	80006d2 <CLCD_WriteString>
				HAL_Delay(3000);
 80008f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008fa:	f003 f953 	bl	8003ba4 <HAL_Delay>
		CLCD_SetCursor(&LCD1, 0, 0);
 80008fe:	e756      	b.n	80007ae <main+0x46>
 8000900:	2000003c 	.word	0x2000003c
 8000904:	20000140 	.word	0x20000140
 8000908:	200000e8 	.word	0x200000e8
 800090c:	0800643c 	.word	0x0800643c
 8000910:	20000000 	.word	0x20000000
 8000914:	0800644c 	.word	0x0800644c
 8000918:	20000130 	.word	0x20000130
 800091c:	0800645c 	.word	0x0800645c
 8000920:	0800646c 	.word	0x0800646c
 8000924:	2000014c 	.word	0x2000014c
 8000928:	08006478 	.word	0x08006478

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b090      	sub	sp, #64	; 0x40
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	2228      	movs	r2, #40	; 0x28
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f005 fd46 	bl	80063cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000960:	2302      	movs	r3, #2
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800096a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f004 fa5d 	bl	8004e34 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000980:	f002 fccc 	bl	800331c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 fcca 	bl	8005338 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009aa:	f002 fcb7 	bl	800331c <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3740      	adds	r7, #64	; 0x40
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009be:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <MX_I2C2_Init+0x54>)
 80009c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009c4:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <MX_I2C2_Init+0x58>)
 80009c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009f6:	f003 fdd3 	bl	80045a0 <HAL_I2C_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a00:	f002 fc8c 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000003c 	.word	0x2000003c
 8000a0c:	40005800 	.word	0x40005800
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <MX_SPI1_Init+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a48:	2230      	movs	r2, #48	; 0x30
 8000a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a66:	f004 fdeb 	bl	8005640 <HAL_SPI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a70:	f002 fc54 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000090 	.word	0x20000090
 8000a7c:	40013000 	.word	0x40013000

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aa6:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ab4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac6:	4814      	ldr	r0, [pc, #80]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ac8:	f005 f886 	bl	8005bd8 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f002 fc23 	bl	800331c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ae4:	f005 fa22 	bl	8005f2c <HAL_TIM_ConfigClockSource>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aee:	f002 fc15 	bl	800331c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000b00:	f005 fbf4 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b0a:	f002 fc07 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000e8 	.word	0x200000e8

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_GPIO_Init+0x12c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	482d      	ldr	r0, [pc, #180]	; (8000c4c <MX_GPIO_Init+0x130>)
 8000b98:	f003 fcd1 	bl	800453e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|QR_Pin|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f249 4110 	movw	r1, #37904	; 0x9410
 8000ba2:	482b      	ldr	r0, [pc, #172]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000ba4:	f003 fccb 	bl	800453e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2118      	movs	r1, #24
 8000bac:	4829      	ldr	r0, [pc, #164]	; (8000c54 <MX_GPIO_Init+0x138>)
 8000bae:	f003 fcc6 	bl	800453e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4820      	ldr	r0, [pc, #128]	; (8000c4c <MX_GPIO_Init+0x130>)
 8000bcc:	f003 fb1c 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin QR_Pin PA12 PA15 */
  GPIO_InitStruct.Pin = CS_Pin|QR_Pin|GPIO_PIN_12|GPIO_PIN_15;
 8000bd0:	f249 4310 	movw	r3, #37904	; 0x9410
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	4819      	ldr	r0, [pc, #100]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000bea:	f003 fb0d 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECCT_Pin PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = SELECCT_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000bee:	f248 13e0 	movw	r3, #33248	; 0x81e0
 8000bf2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <MX_GPIO_Init+0x138>)
 8000c04:	f003 fb00 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_Pin */
  GPIO_InitStruct.Pin = MENU_Pin;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000c1e:	f003 faf3 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c22:	2318      	movs	r3, #24
 8000c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4619      	mov	r1, r3
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_GPIO_Init+0x138>)
 8000c3a:	f003 fae5 	bl	8004208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40010800 	.word	0x40010800
 8000c54:	40010c00 	.word	0x40010c00

08000c58 <checkMENU>:

/* USER CODE BEGIN 4 */

uint8_t checkMENU(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0


	if (KEYPAD_Read() != '*')
 8000c5e:	f7ff fb59 	bl	8000314 <KEYPAD_Read>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b2a      	cmp	r3, #42	; 0x2a
 8000c66:	d001      	beq.n	8000c6c <checkMENU+0x14>
		return 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e030      	b.n	8000cce <checkMENU+0x76>
	else
	{
		HAL_Delay(50);
 8000c6c:	2032      	movs	r0, #50	; 0x32
 8000c6e:	f002 ff99 	bl	8003ba4 <HAL_Delay>
		if(KEYPAD_Read() != '*')	return 0;
 8000c72:	f7ff fb4f 	bl	8000314 <KEYPAD_Read>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b2a      	cmp	r3, #42	; 0x2a
 8000c7a:	d001      	beq.n	8000c80 <checkMENU+0x28>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e026      	b.n	8000cce <checkMENU+0x76>
		uint8_t i = 50;
 8000c80:	2332      	movs	r3, #50	; 0x32
 8000c82:	71fb      	strb	r3, [r7, #7]
		while (KEYPAD_Read() == '*')
 8000c84:	e01d      	b.n	8000cc2 <checkMENU+0x6a>
		{
			HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f002 ff8c 	bl	8003ba4 <HAL_Delay>
			i--;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
			if (i == 0)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d114      	bne.n	8000cc2 <checkMENU+0x6a>
			{
				i = 250;
 8000c98:	23fa      	movs	r3, #250	; 0xfa
 8000c9a:	71fb      	strb	r3, [r7, #7]
				while (KEYPAD_Read() == '*')
 8000c9c:	e00a      	b.n	8000cb4 <checkMENU+0x5c>
				{
					HAL_Delay(10);
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f002 ff80 	bl	8003ba4 <HAL_Delay>
					i--;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	71fb      	strb	r3, [r7, #7]
					if(i == 0)	return 3;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <checkMENU+0x5c>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e00c      	b.n	8000cce <checkMENU+0x76>
				while (KEYPAD_Read() == '*')
 8000cb4:	f7ff fb2e 	bl	8000314 <KEYPAD_Read>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b2a      	cmp	r3, #42	; 0x2a
 8000cbc:	d0ef      	beq.n	8000c9e <checkMENU+0x46>
				}
				return 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e005      	b.n	8000cce <checkMENU+0x76>
		while (KEYPAD_Read() == '*')
 8000cc2:	f7ff fb27 	bl	8000314 <KEYPAD_Read>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000cca:	d0dc      	beq.n	8000c86 <checkMENU+0x2e>
			}
		}
		return 1;
 8000ccc:	2301      	movs	r3, #1
//    currentTime = HAL_GetTick();
//    if (starButtonPressStartTime != 0 && (currentTime - starButtonPressStartTime) >= 500)
//        return 3;
//    else
//    	return 1;
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <checkSELECT>:
uint8_t checkSELECT(void) {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
	if (KEYPAD_Read() != '#')
 8000cdc:	f7ff fb1a 	bl	8000314 <KEYPAD_Read>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b23      	cmp	r3, #35	; 0x23
 8000ce4:	d001      	beq.n	8000cea <checkSELECT+0x14>
		return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e030      	b.n	8000d4c <checkSELECT+0x76>
	else
	{
		HAL_Delay(50);
 8000cea:	2032      	movs	r0, #50	; 0x32
 8000cec:	f002 ff5a 	bl	8003ba4 <HAL_Delay>
		if(KEYPAD_Read() != '#')	return 0;
 8000cf0:	f7ff fb10 	bl	8000314 <KEYPAD_Read>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b23      	cmp	r3, #35	; 0x23
 8000cf8:	d001      	beq.n	8000cfe <checkSELECT+0x28>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e026      	b.n	8000d4c <checkSELECT+0x76>
		uint8_t i = 50;
 8000cfe:	2332      	movs	r3, #50	; 0x32
 8000d00:	71fb      	strb	r3, [r7, #7]
		while (KEYPAD_Read() == '#')
 8000d02:	e01d      	b.n	8000d40 <checkSELECT+0x6a>
		{
			HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f002 ff4d 	bl	8003ba4 <HAL_Delay>
			i--;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	71fb      	strb	r3, [r7, #7]
			if (i == 0)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d114      	bne.n	8000d40 <checkSELECT+0x6a>
			{
				i = 250;
 8000d16:	23fa      	movs	r3, #250	; 0xfa
 8000d18:	71fb      	strb	r3, [r7, #7]
				while (KEYPAD_Read() == '#')
 8000d1a:	e00a      	b.n	8000d32 <checkSELECT+0x5c>
				{
					HAL_Delay(10);
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f002 ff41 	bl	8003ba4 <HAL_Delay>
					i--;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
					if(i == 0)	return 3;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <checkSELECT+0x5c>
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e00c      	b.n	8000d4c <checkSELECT+0x76>
				while (KEYPAD_Read() == '#')
 8000d32:	f7ff faef 	bl	8000314 <KEYPAD_Read>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b23      	cmp	r3, #35	; 0x23
 8000d3a:	d0ef      	beq.n	8000d1c <checkSELECT+0x46>
				}
				return 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e005      	b.n	8000d4c <checkSELECT+0x76>
		while (KEYPAD_Read() == '#')
 8000d40:	f7ff fae8 	bl	8000314 <KEYPAD_Read>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b23      	cmp	r3, #35	; 0x23
 8000d48:	d0dc      	beq.n	8000d04 <checkSELECT+0x2e>
			}
		}
		return 1;
 8000d4a:	2301      	movs	r3, #1
	}
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <seclectmenu>:
		return 1;
	}
}

void seclectmenu(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
	exitmenu = 15;
 8000d5a:	4bb0      	ldr	r3, [pc, #704]	; (800101c <seclectmenu+0x2c8>)
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8000d60:	23ff      	movs	r3, #255	; 0xff
 8000d62:	75fb      	strb	r3, [r7, #23]
	CLCD_Clear(&LCD1);
 8000d64:	48ae      	ldr	r0, [pc, #696]	; (8001020 <seclectmenu+0x2cc>)
 8000d66:	f7ff fccb 	bl	8000700 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	48ac      	ldr	r0, [pc, #688]	; (8001020 <seclectmenu+0x2cc>)
 8000d70:	f7ff fc54 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "  SELECT MENU");
 8000d74:	49ab      	ldr	r1, [pc, #684]	; (8001024 <seclectmenu+0x2d0>)
 8000d76:	48aa      	ldr	r0, [pc, #680]	; (8001020 <seclectmenu+0x2cc>)
 8000d78:	f7ff fcab 	bl	80006d2 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2100      	movs	r1, #0
 8000d80:	48a7      	ldr	r0, [pc, #668]	; (8001020 <seclectmenu+0x2cc>)
 8000d82:	f7ff fc4b 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "PLEASE PRESS #");
 8000d86:	49a8      	ldr	r1, [pc, #672]	; (8001028 <seclectmenu+0x2d4>)
 8000d88:	48a5      	ldr	r0, [pc, #660]	; (8001020 <seclectmenu+0x2cc>)
 8000d8a:	f7ff fca2 	bl	80006d2 <CLCD_WriteString>
	while (exitmenu )
 8000d8e:	f001 bef7 	b.w	8002b80 <seclectmenu+0x1e2c>
	{
		if (checkSELECT() != 0)
 8000d92:	f7ff ffa0 	bl	8000cd6 <checkSELECT>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d06e      	beq.n	8000e7a <seclectmenu+0x126>
		{
			exitmenu = 15;
 8000d9c:	4b9f      	ldr	r3, [pc, #636]	; (800101c <seclectmenu+0x2c8>)
 8000d9e:	220f      	movs	r2, #15
 8000da0:	701a      	strb	r2, [r3, #0]
			status++;
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	3301      	adds	r3, #1
 8000da6:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d801      	bhi.n	8000db2 <seclectmenu+0x5e>
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	e000      	b.n	8000db4 <seclectmenu+0x60>
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d032      	beq.n	8000e22 <seclectmenu+0xce>
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	dc46      	bgt.n	8000e4e <seclectmenu+0xfa>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <seclectmenu+0x76>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d016      	beq.n	8000df6 <seclectmenu+0xa2>
 8000dc8:	e041      	b.n	8000e4e <seclectmenu+0xfa>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000dca:	4895      	ldr	r0, [pc, #596]	; (8001020 <seclectmenu+0x2cc>)
 8000dcc:	f7ff fc98 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4892      	ldr	r0, [pc, #584]	; (8001020 <seclectmenu+0x2cc>)
 8000dd6:	f7ff fc21 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  ADD CARD");
 8000dda:	4994      	ldr	r1, [pc, #592]	; (800102c <seclectmenu+0x2d8>)
 8000ddc:	4890      	ldr	r0, [pc, #576]	; (8001020 <seclectmenu+0x2cc>)
 8000dde:	f7ff fc78 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2100      	movs	r1, #0
 8000de6:	488e      	ldr	r0, [pc, #568]	; (8001020 <seclectmenu+0x2cc>)
 8000de8:	f7ff fc18 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 8000dec:	4990      	ldr	r1, [pc, #576]	; (8001030 <seclectmenu+0x2dc>)
 8000dee:	488c      	ldr	r0, [pc, #560]	; (8001020 <seclectmenu+0x2cc>)
 8000df0:	f7ff fc6f 	bl	80006d2 <CLCD_WriteString>
				break;
 8000df4:	e041      	b.n	8000e7a <seclectmenu+0x126>
			case 1:
				CLCD_Clear(&LCD1);
 8000df6:	488a      	ldr	r0, [pc, #552]	; (8001020 <seclectmenu+0x2cc>)
 8000df8:	f7ff fc82 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4887      	ldr	r0, [pc, #540]	; (8001020 <seclectmenu+0x2cc>)
 8000e02:	f7ff fc0b 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    ADD CARD");
 8000e06:	498b      	ldr	r1, [pc, #556]	; (8001034 <seclectmenu+0x2e0>)
 8000e08:	4885      	ldr	r0, [pc, #532]	; (8001020 <seclectmenu+0x2cc>)
 8000e0a:	f7ff fc62 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2100      	movs	r1, #0
 8000e12:	4883      	ldr	r0, [pc, #524]	; (8001020 <seclectmenu+0x2cc>)
 8000e14:	f7ff fc02 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  REMOVE CARD");
 8000e18:	4987      	ldr	r1, [pc, #540]	; (8001038 <seclectmenu+0x2e4>)
 8000e1a:	4881      	ldr	r0, [pc, #516]	; (8001020 <seclectmenu+0x2cc>)
 8000e1c:	f7ff fc59 	bl	80006d2 <CLCD_WriteString>
				break;
 8000e20:	e02b      	b.n	8000e7a <seclectmenu+0x126>
			case 2:
				CLCD_Clear(&LCD1);
 8000e22:	487f      	ldr	r0, [pc, #508]	; (8001020 <seclectmenu+0x2cc>)
 8000e24:	f7ff fc6c 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	487c      	ldr	r0, [pc, #496]	; (8001020 <seclectmenu+0x2cc>)
 8000e2e:	f7ff fbf5 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 8000e32:	497f      	ldr	r1, [pc, #508]	; (8001030 <seclectmenu+0x2dc>)
 8000e34:	487a      	ldr	r0, [pc, #488]	; (8001020 <seclectmenu+0x2cc>)
 8000e36:	f7ff fc4c 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4878      	ldr	r0, [pc, #480]	; (8001020 <seclectmenu+0x2cc>)
 8000e40:	f7ff fbec 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  CHECK CARD");
 8000e44:	497d      	ldr	r1, [pc, #500]	; (800103c <seclectmenu+0x2e8>)
 8000e46:	4876      	ldr	r0, [pc, #472]	; (8001020 <seclectmenu+0x2cc>)
 8000e48:	f7ff fc43 	bl	80006d2 <CLCD_WriteString>
				break;
 8000e4c:	e015      	b.n	8000e7a <seclectmenu+0x126>
			default:
				CLCD_Clear(&LCD1);
 8000e4e:	4874      	ldr	r0, [pc, #464]	; (8001020 <seclectmenu+0x2cc>)
 8000e50:	f7ff fc56 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4871      	ldr	r0, [pc, #452]	; (8001020 <seclectmenu+0x2cc>)
 8000e5a:	f7ff fbdf 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    CHECK CARD");
 8000e5e:	4978      	ldr	r1, [pc, #480]	; (8001040 <seclectmenu+0x2ec>)
 8000e60:	486f      	ldr	r0, [pc, #444]	; (8001020 <seclectmenu+0x2cc>)
 8000e62:	f7ff fc36 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2100      	movs	r1, #0
 8000e6a:	486d      	ldr	r0, [pc, #436]	; (8001020 <seclectmenu+0x2cc>)
 8000e6c:	f7ff fbd6 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8000e70:	4974      	ldr	r1, [pc, #464]	; (8001044 <seclectmenu+0x2f0>)
 8000e72:	486b      	ldr	r0, [pc, #428]	; (8001020 <seclectmenu+0x2cc>)
 8000e74:	f7ff fc2d 	bl	80006d2 <CLCD_WriteString>
				break;
 8000e78:	bf00      	nop
			}
		}
		if (checkMENU() != 0)
 8000e7a:	f7ff feed 	bl	8000c58 <checkMENU>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f001 867d 	beq.w	8002b80 <seclectmenu+0x1e2c>
		{
			exitmenu = 15;
 8000e86:	4b65      	ldr	r3, [pc, #404]	; (800101c <seclectmenu+0x2c8>)
 8000e88:	220f      	movs	r2, #15
 8000e8a:	701a      	strb	r2, [r3, #0]
			switch (status)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	f001 865a 	beq.w	8002b48 <seclectmenu+0x1df4>
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	f301 866f 	bgt.w	8002b78 <seclectmenu+0x1e24>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <seclectmenu+0x154>
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	f000 85a5 	beq.w	80019ee <seclectmenu+0xc9a>
 8000ea4:	f001 be68 	b.w	8002b78 <seclectmenu+0x1e24>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000ea8:	485d      	ldr	r0, [pc, #372]	; (8001020 <seclectmenu+0x2cc>)
 8000eaa:	f7ff fc29 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	485b      	ldr	r0, [pc, #364]	; (8001020 <seclectmenu+0x2cc>)
 8000eb4:	f7ff fbb2 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    SELECT ");
 8000eb8:	4963      	ldr	r1, [pc, #396]	; (8001048 <seclectmenu+0x2f4>)
 8000eba:	4859      	ldr	r0, [pc, #356]	; (8001020 <seclectmenu+0x2cc>)
 8000ebc:	f7ff fc09 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4856      	ldr	r0, [pc, #344]	; (8001020 <seclectmenu+0x2cc>)
 8000ec6:	f7ff fba9 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "PLEASE PRESS #");
 8000eca:	4957      	ldr	r1, [pc, #348]	; (8001028 <seclectmenu+0x2d4>)
 8000ecc:	4854      	ldr	r0, [pc, #336]	; (8001020 <seclectmenu+0x2cc>)
 8000ece:	f7ff fc00 	bl	80006d2 <CLCD_WriteString>
				uint8_t statusadd = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8000eda:	f000 bd6d 	b.w	80019b8 <seclectmenu+0xc64>
				{
					if (exitmenu == 0)
 8000ede:	4b4f      	ldr	r3, [pc, #316]	; (800101c <seclectmenu+0x2c8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d108      	bne.n	8000ef8 <seclectmenu+0x1a4>
					{
						CLCD_Clear(&LCD1);
 8000ee6:	484e      	ldr	r0, [pc, #312]	; (8001020 <seclectmenu+0x2cc>)
 8000ee8:	f7ff fc0a 	bl	8000700 <CLCD_Clear>
						HAL_Delay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f002 fe58 	bl	8003ba4 <HAL_Delay>
						return;
 8000ef4:	f001 be50 	b.w	8002b98 <seclectmenu+0x1e44>
					}
					if (checkSELECT() != 0)
 8000ef8:	f7ff feed 	bl	8000cd6 <checkSELECT>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d054      	beq.n	8000fac <seclectmenu+0x258>
					{
						exitmenu = 15;
 8000f02:	4b46      	ldr	r3, [pc, #280]	; (800101c <seclectmenu+0x2c8>)
 8000f04:	220f      	movs	r2, #15
 8000f06:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8000f08:	7dbb      	ldrb	r3, [r7, #22]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8000f0e:	7dbb      	ldrb	r3, [r7, #22]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d801      	bhi.n	8000f18 <seclectmenu+0x1c4>
 8000f14:	7dbb      	ldrb	r3, [r7, #22]
 8000f16:	e000      	b.n	8000f1a <seclectmenu+0x1c6>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8000f1c:	7dbb      	ldrb	r3, [r7, #22]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d002      	beq.n	8000f28 <seclectmenu+0x1d4>
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d016      	beq.n	8000f54 <seclectmenu+0x200>
 8000f26:	e02b      	b.n	8000f80 <seclectmenu+0x22c>
						{
						case 1:
							CLCD_Clear(&LCD1);
 8000f28:	483d      	ldr	r0, [pc, #244]	; (8001020 <seclectmenu+0x2cc>)
 8000f2a:	f7ff fbe9 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	483b      	ldr	r0, [pc, #236]	; (8001020 <seclectmenu+0x2cc>)
 8000f34:	f7ff fb72 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8000f38:	4944      	ldr	r1, [pc, #272]	; (800104c <seclectmenu+0x2f8>)
 8000f3a:	4839      	ldr	r0, [pc, #228]	; (8001020 <seclectmenu+0x2cc>)
 8000f3c:	f7ff fbc9 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2100      	movs	r1, #0
 8000f44:	4836      	ldr	r0, [pc, #216]	; (8001020 <seclectmenu+0x2cc>)
 8000f46:	f7ff fb69 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   GUEST CARD");
 8000f4a:	4941      	ldr	r1, [pc, #260]	; (8001050 <seclectmenu+0x2fc>)
 8000f4c:	4834      	ldr	r0, [pc, #208]	; (8001020 <seclectmenu+0x2cc>)
 8000f4e:	f7ff fbc0 	bl	80006d2 <CLCD_WriteString>
							break;
 8000f52:	e02b      	b.n	8000fac <seclectmenu+0x258>
						case 2:
							CLCD_Clear(&LCD1);
 8000f54:	4832      	ldr	r0, [pc, #200]	; (8001020 <seclectmenu+0x2cc>)
 8000f56:	f7ff fbd3 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4830      	ldr	r0, [pc, #192]	; (8001020 <seclectmenu+0x2cc>)
 8000f60:	f7ff fb5c 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8000f64:	493b      	ldr	r1, [pc, #236]	; (8001054 <seclectmenu+0x300>)
 8000f66:	482e      	ldr	r0, [pc, #184]	; (8001020 <seclectmenu+0x2cc>)
 8000f68:	f7ff fbb3 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2100      	movs	r1, #0
 8000f70:	482b      	ldr	r0, [pc, #172]	; (8001020 <seclectmenu+0x2cc>)
 8000f72:	f7ff fb53 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> GUEST CARD");
 8000f76:	4938      	ldr	r1, [pc, #224]	; (8001058 <seclectmenu+0x304>)
 8000f78:	4829      	ldr	r0, [pc, #164]	; (8001020 <seclectmenu+0x2cc>)
 8000f7a:	f7ff fbaa 	bl	80006d2 <CLCD_WriteString>
							break;
 8000f7e:	e015      	b.n	8000fac <seclectmenu+0x258>
						default:
							CLCD_Clear(&LCD1);
 8000f80:	4827      	ldr	r0, [pc, #156]	; (8001020 <seclectmenu+0x2cc>)
 8000f82:	f7ff fbbd 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4825      	ldr	r0, [pc, #148]	; (8001020 <seclectmenu+0x2cc>)
 8000f8c:	f7ff fb46 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   GUEST CARD");
 8000f90:	492f      	ldr	r1, [pc, #188]	; (8001050 <seclectmenu+0x2fc>)
 8000f92:	4823      	ldr	r0, [pc, #140]	; (8001020 <seclectmenu+0x2cc>)
 8000f94:	f7ff fb9d 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4820      	ldr	r0, [pc, #128]	; (8001020 <seclectmenu+0x2cc>)
 8000f9e:	f7ff fb3d 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 8000fa2:	492e      	ldr	r1, [pc, #184]	; (800105c <seclectmenu+0x308>)
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <seclectmenu+0x2cc>)
 8000fa6:	f7ff fb94 	bl	80006d2 <CLCD_WriteString>
							break;
 8000faa:	bf00      	nop
						}
					}
					if (checkMENU() != 0)
 8000fac:	f7ff fe54 	bl	8000c58 <checkMENU>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8500 	beq.w	80019b8 <seclectmenu+0xc64>
					{
						exitmenu = 15;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <seclectmenu+0x2c8>)
 8000fba:	220f      	movs	r2, #15
 8000fbc:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8000fbe:	7dbb      	ldrb	r3, [r7, #22]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d004      	beq.n	8000fce <seclectmenu+0x27a>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	f000 8278 	beq.w	80014ba <seclectmenu+0x766>
 8000fca:	f000 bcf2 	b.w	80019b2 <seclectmenu+0xc5e>
						{
						case 1:
							CLCD_Clear(&LCD1);
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <seclectmenu+0x2cc>)
 8000fd0:	f7ff fb96 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4811      	ldr	r0, [pc, #68]	; (8001020 <seclectmenu+0x2cc>)
 8000fda:	f7ff fb1f 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8000fde:	4920      	ldr	r1, [pc, #128]	; (8001060 <seclectmenu+0x30c>)
 8000fe0:	480f      	ldr	r0, [pc, #60]	; (8001020 <seclectmenu+0x2cc>)
 8000fe2:	f7ff fb76 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2100      	movs	r1, #0
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <seclectmenu+0x2cc>)
 8000fec:	f7ff fb16 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8000ff0:	491c      	ldr	r1, [pc, #112]	; (8001064 <seclectmenu+0x310>)
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <seclectmenu+0x2cc>)
 8000ff4:	f7ff fb6d 	bl	80006d2 <CLCD_WriteString>
							uint8_t statusadd1 = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8001000:	e241      	b.n	8001486 <seclectmenu+0x732>
							{
								if (exitmenu == 0)
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <seclectmenu+0x2c8>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d12e      	bne.n	8001068 <seclectmenu+0x314>
								{
									CLCD_Clear(&LCD1);
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <seclectmenu+0x2cc>)
 800100c:	f7ff fb78 	bl	8000700 <CLCD_Clear>
									HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f002 fdc6 	bl	8003ba4 <HAL_Delay>
									return;
 8001018:	f001 bdbe 	b.w	8002b98 <seclectmenu+0x1e44>
 800101c:	20000000 	.word	0x20000000
 8001020:	20000140 	.word	0x20000140
 8001024:	08006488 	.word	0x08006488
 8001028:	08006498 	.word	0x08006498
 800102c:	080064a8 	.word	0x080064a8
 8001030:	080064b8 	.word	0x080064b8
 8001034:	080064c8 	.word	0x080064c8
 8001038:	080064d8 	.word	0x080064d8
 800103c:	080064e8 	.word	0x080064e8
 8001040:	080064f8 	.word	0x080064f8
 8001044:	08006508 	.word	0x08006508
 8001048:	08006514 	.word	0x08006514
 800104c:	08006520 	.word	0x08006520
 8001050:	08006530 	.word	0x08006530
 8001054:	0800644c 	.word	0x0800644c
 8001058:	08006540 	.word	0x08006540
 800105c:	08006550 	.word	0x08006550
 8001060:	08006558 	.word	0x08006558
 8001064:	0800656c 	.word	0x0800656c
								}
								if (checkSELECT() != 0)
 8001068:	f7ff fe35 	bl	8000cd6 <checkSELECT>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 808a 	beq.w	8001188 <seclectmenu+0x434>
								{
									exitmenu = 15;
 8001074:	4ba4      	ldr	r3, [pc, #656]	; (8001308 <seclectmenu+0x5b4>)
 8001076:	220f      	movs	r2, #15
 8001078:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 800107a:	7d3b      	ldrb	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d801      	bhi.n	800108a <seclectmenu+0x336>
 8001086:	7d3b      	ldrb	r3, [r7, #20]
 8001088:	e000      	b.n	800108c <seclectmenu+0x338>
 800108a:	2300      	movs	r3, #0
 800108c:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 800108e:	7d3b      	ldrb	r3, [r7, #20]
 8001090:	3b01      	subs	r3, #1
 8001092:	2b03      	cmp	r3, #3
 8001094:	d862      	bhi.n	800115c <seclectmenu+0x408>
 8001096:	a201      	add	r2, pc, #4	; (adr r2, 800109c <seclectmenu+0x348>)
 8001098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109c:	080010ad 	.word	0x080010ad
 80010a0:	080010d9 	.word	0x080010d9
 80010a4:	08001105 	.word	0x08001105
 80010a8:	08001131 	.word	0x08001131
									{
									case 1:
										CLCD_Clear(&LCD1);
 80010ac:	4897      	ldr	r0, [pc, #604]	; (800130c <seclectmenu+0x5b8>)
 80010ae:	f7ff fb27 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	4895      	ldr	r0, [pc, #596]	; (800130c <seclectmenu+0x5b8>)
 80010b8:	f7ff fab0 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 80010bc:	4994      	ldr	r1, [pc, #592]	; (8001310 <seclectmenu+0x5bc>)
 80010be:	4893      	ldr	r0, [pc, #588]	; (800130c <seclectmenu+0x5b8>)
 80010c0:	f7ff fb07 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2100      	movs	r1, #0
 80010c8:	4890      	ldr	r0, [pc, #576]	; (800130c <seclectmenu+0x5b8>)
 80010ca:	f7ff faa7 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 80010ce:	4991      	ldr	r1, [pc, #580]	; (8001314 <seclectmenu+0x5c0>)
 80010d0:	488e      	ldr	r0, [pc, #568]	; (800130c <seclectmenu+0x5b8>)
 80010d2:	f7ff fafe 	bl	80006d2 <CLCD_WriteString>
										break;
 80010d6:	e057      	b.n	8001188 <seclectmenu+0x434>
									case 2:
										CLCD_Clear(&LCD1);
 80010d8:	488c      	ldr	r0, [pc, #560]	; (800130c <seclectmenu+0x5b8>)
 80010da:	f7ff fb11 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	488a      	ldr	r0, [pc, #552]	; (800130c <seclectmenu+0x5b8>)
 80010e4:	f7ff fa9a 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 80010e8:	498b      	ldr	r1, [pc, #556]	; (8001318 <seclectmenu+0x5c4>)
 80010ea:	4888      	ldr	r0, [pc, #544]	; (800130c <seclectmenu+0x5b8>)
 80010ec:	f7ff faf1 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	4885      	ldr	r0, [pc, #532]	; (800130c <seclectmenu+0x5b8>)
 80010f6:	f7ff fa91 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 80010fa:	4988      	ldr	r1, [pc, #544]	; (800131c <seclectmenu+0x5c8>)
 80010fc:	4883      	ldr	r0, [pc, #524]	; (800130c <seclectmenu+0x5b8>)
 80010fe:	f7ff fae8 	bl	80006d2 <CLCD_WriteString>
										break;
 8001102:	e041      	b.n	8001188 <seclectmenu+0x434>
									case 3:
										CLCD_Clear(&LCD1);
 8001104:	4881      	ldr	r0, [pc, #516]	; (800130c <seclectmenu+0x5b8>)
 8001106:	f7ff fafb 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	487f      	ldr	r0, [pc, #508]	; (800130c <seclectmenu+0x5b8>)
 8001110:	f7ff fa84 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 8001114:	4982      	ldr	r1, [pc, #520]	; (8001320 <seclectmenu+0x5cc>)
 8001116:	487d      	ldr	r0, [pc, #500]	; (800130c <seclectmenu+0x5b8>)
 8001118:	f7ff fadb 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2100      	movs	r1, #0
 8001120:	487a      	ldr	r0, [pc, #488]	; (800130c <seclectmenu+0x5b8>)
 8001122:	f7ff fa7b 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8001126:	497f      	ldr	r1, [pc, #508]	; (8001324 <seclectmenu+0x5d0>)
 8001128:	4878      	ldr	r0, [pc, #480]	; (800130c <seclectmenu+0x5b8>)
 800112a:	f7ff fad2 	bl	80006d2 <CLCD_WriteString>
										break;
 800112e:	e02b      	b.n	8001188 <seclectmenu+0x434>
									case 4:
										CLCD_Clear(&LCD1);
 8001130:	4876      	ldr	r0, [pc, #472]	; (800130c <seclectmenu+0x5b8>)
 8001132:	f7ff fae5 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	4874      	ldr	r0, [pc, #464]	; (800130c <seclectmenu+0x5b8>)
 800113c:	f7ff fa6e 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8001140:	4979      	ldr	r1, [pc, #484]	; (8001328 <seclectmenu+0x5d4>)
 8001142:	4872      	ldr	r0, [pc, #456]	; (800130c <seclectmenu+0x5b8>)
 8001144:	f7ff fac5 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2100      	movs	r1, #0
 800114c:	486f      	ldr	r0, [pc, #444]	; (800130c <seclectmenu+0x5b8>)
 800114e:	f7ff fa65 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 8001152:	4976      	ldr	r1, [pc, #472]	; (800132c <seclectmenu+0x5d8>)
 8001154:	486d      	ldr	r0, [pc, #436]	; (800130c <seclectmenu+0x5b8>)
 8001156:	f7ff fabc 	bl	80006d2 <CLCD_WriteString>
										break;
 800115a:	e015      	b.n	8001188 <seclectmenu+0x434>
									default:
										CLCD_Clear(&LCD1);
 800115c:	486b      	ldr	r0, [pc, #428]	; (800130c <seclectmenu+0x5b8>)
 800115e:	f7ff facf 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	4869      	ldr	r0, [pc, #420]	; (800130c <seclectmenu+0x5b8>)
 8001168:	f7ff fa58 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 800116c:	496d      	ldr	r1, [pc, #436]	; (8001324 <seclectmenu+0x5d0>)
 800116e:	4867      	ldr	r0, [pc, #412]	; (800130c <seclectmenu+0x5b8>)
 8001170:	f7ff faaf 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001174:	2201      	movs	r2, #1
 8001176:	2100      	movs	r1, #0
 8001178:	4864      	ldr	r0, [pc, #400]	; (800130c <seclectmenu+0x5b8>)
 800117a:	f7ff fa4f 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800117e:	496c      	ldr	r1, [pc, #432]	; (8001330 <seclectmenu+0x5dc>)
 8001180:	4862      	ldr	r0, [pc, #392]	; (800130c <seclectmenu+0x5b8>)
 8001182:	f7ff faa6 	bl	80006d2 <CLCD_WriteString>
										break;
 8001186:	bf00      	nop
									}
								}
								if (checkMENU() != 0)
 8001188:	f7ff fd66 	bl	8000c58 <checkMENU>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8179 	beq.w	8001486 <seclectmenu+0x732>
								{
									exitmenu = 15;
 8001194:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <seclectmenu+0x5b4>)
 8001196:	220f      	movs	r2, #15
 8001198:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800119a:	7dbb      	ldrb	r3, [r7, #22]
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	7d3b      	ldrb	r3, [r7, #20]
 80011a2:	4413      	add	r3, r2
 80011a4:	70bb      	strb	r3, [r7, #2]
									switch (statusadd1)
 80011a6:	7d3b      	ldrb	r3, [r7, #20]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	f200 8168 	bhi.w	8001480 <seclectmenu+0x72c>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <seclectmenu+0x464>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	08001269 	.word	0x08001269
 80011c0:	08001341 	.word	0x08001341
 80011c4:	080013e1 	.word	0x080013e1
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80011c8:	78bb      	ldrb	r3, [r7, #2]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 ff12 	bl	8002ff4 <CheckKey>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d02e      	beq.n	8001234 <seclectmenu+0x4e0>
										{
											CLCD_Clear(&LCD1);
 80011d6:	484d      	ldr	r0, [pc, #308]	; (800130c <seclectmenu+0x5b8>)
 80011d8:	f7ff fa92 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	484a      	ldr	r0, [pc, #296]	; (800130c <seclectmenu+0x5b8>)
 80011e2:	f7ff fa1b 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 1");
 80011e6:	4953      	ldr	r1, [pc, #332]	; (8001334 <seclectmenu+0x5e0>)
 80011e8:	4848      	ldr	r0, [pc, #288]	; (800130c <seclectmenu+0x5b8>)
 80011ea:	f7ff fa72 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2100      	movs	r1, #0
 80011f2:	4846      	ldr	r0, [pc, #280]	; (800130c <seclectmenu+0x5b8>)
 80011f4:	f7ff fa12 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 80011f8:	494f      	ldr	r1, [pc, #316]	; (8001338 <seclectmenu+0x5e4>)
 80011fa:	4844      	ldr	r0, [pc, #272]	; (800130c <seclectmenu+0x5b8>)
 80011fc:	f7ff fa69 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 8001200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001204:	f002 fcce 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001208:	4840      	ldr	r0, [pc, #256]	; (800130c <seclectmenu+0x5b8>)
 800120a:	f7ff fa79 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	483e      	ldr	r0, [pc, #248]	; (800130c <seclectmenu+0x5b8>)
 8001214:	f7ff fa02 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001218:	493d      	ldr	r1, [pc, #244]	; (8001310 <seclectmenu+0x5bc>)
 800121a:	483c      	ldr	r0, [pc, #240]	; (800130c <seclectmenu+0x5b8>)
 800121c:	f7ff fa59 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	2100      	movs	r1, #0
 8001224:	4839      	ldr	r0, [pc, #228]	; (800130c <seclectmenu+0x5b8>)
 8001226:	f7ff f9f9 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 800122a:	493a      	ldr	r1, [pc, #232]	; (8001314 <seclectmenu+0x5c0>)
 800122c:	4837      	ldr	r0, [pc, #220]	; (800130c <seclectmenu+0x5b8>)
 800122e:	f7ff fa50 	bl	80006d2 <CLCD_WriteString>
 8001232:	e128      	b.n	8001486 <seclectmenu+0x732>
										}
										else
										{
											adduid(keyadd1);
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fd64 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 800123c:	4833      	ldr	r0, [pc, #204]	; (800130c <seclectmenu+0x5b8>)
 800123e:	f7ff fa5f 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	4831      	ldr	r0, [pc, #196]	; (800130c <seclectmenu+0x5b8>)
 8001248:	f7ff f9e8 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 800124c:	4930      	ldr	r1, [pc, #192]	; (8001310 <seclectmenu+0x5bc>)
 800124e:	482f      	ldr	r0, [pc, #188]	; (800130c <seclectmenu+0x5b8>)
 8001250:	f7ff fa3f 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	2100      	movs	r1, #0
 8001258:	482c      	ldr	r0, [pc, #176]	; (800130c <seclectmenu+0x5b8>)
 800125a:	f7ff f9df 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 800125e:	492d      	ldr	r1, [pc, #180]	; (8001314 <seclectmenu+0x5c0>)
 8001260:	482a      	ldr	r0, [pc, #168]	; (800130c <seclectmenu+0x5b8>)
 8001262:	f7ff fa36 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 8001266:	e10e      	b.n	8001486 <seclectmenu+0x732>
									case 2:
										if (CheckKey(keyadd1) != 0)
 8001268:	78bb      	ldrb	r3, [r7, #2]
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fec2 	bl	8002ff4 <CheckKey>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d02e      	beq.n	80012d4 <seclectmenu+0x580>
										{
											CLCD_Clear(&LCD1);
 8001276:	4825      	ldr	r0, [pc, #148]	; (800130c <seclectmenu+0x5b8>)
 8001278:	f7ff fa42 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	4822      	ldr	r0, [pc, #136]	; (800130c <seclectmenu+0x5b8>)
 8001282:	f7ff f9cb 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 2");
 8001286:	492d      	ldr	r1, [pc, #180]	; (800133c <seclectmenu+0x5e8>)
 8001288:	4820      	ldr	r0, [pc, #128]	; (800130c <seclectmenu+0x5b8>)
 800128a:	f7ff fa22 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	2100      	movs	r1, #0
 8001292:	481e      	ldr	r0, [pc, #120]	; (800130c <seclectmenu+0x5b8>)
 8001294:	f7ff f9c2 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001298:	4927      	ldr	r1, [pc, #156]	; (8001338 <seclectmenu+0x5e4>)
 800129a:	481c      	ldr	r0, [pc, #112]	; (800130c <seclectmenu+0x5b8>)
 800129c:	f7ff fa19 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 80012a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a4:	f002 fc7e 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80012a8:	4818      	ldr	r0, [pc, #96]	; (800130c <seclectmenu+0x5b8>)
 80012aa:	f7ff fa29 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	4816      	ldr	r0, [pc, #88]	; (800130c <seclectmenu+0x5b8>)
 80012b4:	f7ff f9b2 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 80012b8:	4917      	ldr	r1, [pc, #92]	; (8001318 <seclectmenu+0x5c4>)
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <seclectmenu+0x5b8>)
 80012bc:	f7ff fa09 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2100      	movs	r1, #0
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <seclectmenu+0x5b8>)
 80012c6:	f7ff f9a9 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 80012ca:	4914      	ldr	r1, [pc, #80]	; (800131c <seclectmenu+0x5c8>)
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <seclectmenu+0x5b8>)
 80012ce:	f7ff fa00 	bl	80006d2 <CLCD_WriteString>
 80012d2:	e0d8      	b.n	8001486 <seclectmenu+0x732>
										}
										else
										{
											adduid(keyadd1);
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fd14 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <seclectmenu+0x5b8>)
 80012de:	f7ff fa0f 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <seclectmenu+0x5b8>)
 80012e8:	f7ff f998 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 80012ec:	490a      	ldr	r1, [pc, #40]	; (8001318 <seclectmenu+0x5c4>)
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <seclectmenu+0x5b8>)
 80012f0:	f7ff f9ef 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2100      	movs	r1, #0
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <seclectmenu+0x5b8>)
 80012fa:	f7ff f98f 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 80012fe:	4907      	ldr	r1, [pc, #28]	; (800131c <seclectmenu+0x5c8>)
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <seclectmenu+0x5b8>)
 8001302:	f7ff f9e6 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 8001306:	e0be      	b.n	8001486 <seclectmenu+0x732>
 8001308:	20000000 	.word	0x20000000
 800130c:	20000140 	.word	0x20000140
 8001310:	08006558 	.word	0x08006558
 8001314:	0800656c 	.word	0x0800656c
 8001318:	08006580 	.word	0x08006580
 800131c:	08006594 	.word	0x08006594
 8001320:	080065a8 	.word	0x080065a8
 8001324:	080065bc 	.word	0x080065bc
 8001328:	080065d0 	.word	0x080065d0
 800132c:	080065e4 	.word	0x080065e4
 8001330:	08006508 	.word	0x08006508
 8001334:	080065f0 	.word	0x080065f0
 8001338:	080065f8 	.word	0x080065f8
 800133c:	08006604 	.word	0x08006604
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001340:	78bb      	ldrb	r3, [r7, #2]
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fe56 	bl	8002ff4 <CheckKey>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d02e      	beq.n	80013ac <seclectmenu+0x658>
										{
											CLCD_Clear(&LCD1);
 800134e:	48ac      	ldr	r0, [pc, #688]	; (8001600 <seclectmenu+0x8ac>)
 8001350:	f7ff f9d6 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	48a9      	ldr	r0, [pc, #676]	; (8001600 <seclectmenu+0x8ac>)
 800135a:	f7ff f95f 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 3");
 800135e:	49a9      	ldr	r1, [pc, #676]	; (8001604 <seclectmenu+0x8b0>)
 8001360:	48a7      	ldr	r0, [pc, #668]	; (8001600 <seclectmenu+0x8ac>)
 8001362:	f7ff f9b6 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001366:	2201      	movs	r2, #1
 8001368:	2100      	movs	r1, #0
 800136a:	48a5      	ldr	r0, [pc, #660]	; (8001600 <seclectmenu+0x8ac>)
 800136c:	f7ff f956 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001370:	49a5      	ldr	r1, [pc, #660]	; (8001608 <seclectmenu+0x8b4>)
 8001372:	48a3      	ldr	r0, [pc, #652]	; (8001600 <seclectmenu+0x8ac>)
 8001374:	f7ff f9ad 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 8001378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137c:	f002 fc12 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001380:	489f      	ldr	r0, [pc, #636]	; (8001600 <seclectmenu+0x8ac>)
 8001382:	f7ff f9bd 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	489d      	ldr	r0, [pc, #628]	; (8001600 <seclectmenu+0x8ac>)
 800138c:	f7ff f946 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 8001390:	499e      	ldr	r1, [pc, #632]	; (800160c <seclectmenu+0x8b8>)
 8001392:	489b      	ldr	r0, [pc, #620]	; (8001600 <seclectmenu+0x8ac>)
 8001394:	f7ff f99d 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001398:	2201      	movs	r2, #1
 800139a:	2100      	movs	r1, #0
 800139c:	4898      	ldr	r0, [pc, #608]	; (8001600 <seclectmenu+0x8ac>)
 800139e:	f7ff f93d 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 80013a2:	499b      	ldr	r1, [pc, #620]	; (8001610 <seclectmenu+0x8bc>)
 80013a4:	4896      	ldr	r0, [pc, #600]	; (8001600 <seclectmenu+0x8ac>)
 80013a6:	f7ff f994 	bl	80006d2 <CLCD_WriteString>
 80013aa:	e06c      	b.n	8001486 <seclectmenu+0x732>
										}
										else
										{
											adduid(keyadd1);
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fca8 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 80013b4:	4892      	ldr	r0, [pc, #584]	; (8001600 <seclectmenu+0x8ac>)
 80013b6:	f7ff f9a3 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	4890      	ldr	r0, [pc, #576]	; (8001600 <seclectmenu+0x8ac>)
 80013c0:	f7ff f92c 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 80013c4:	4991      	ldr	r1, [pc, #580]	; (800160c <seclectmenu+0x8b8>)
 80013c6:	488e      	ldr	r0, [pc, #568]	; (8001600 <seclectmenu+0x8ac>)
 80013c8:	f7ff f983 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2100      	movs	r1, #0
 80013d0:	488b      	ldr	r0, [pc, #556]	; (8001600 <seclectmenu+0x8ac>)
 80013d2:	f7ff f923 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 80013d6:	498e      	ldr	r1, [pc, #568]	; (8001610 <seclectmenu+0x8bc>)
 80013d8:	4889      	ldr	r0, [pc, #548]	; (8001600 <seclectmenu+0x8ac>)
 80013da:	f7ff f97a 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 80013de:	e052      	b.n	8001486 <seclectmenu+0x732>
									case 4:
										if (CheckKey(keyadd1) != 0)
 80013e0:	78bb      	ldrb	r3, [r7, #2]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fe06 	bl	8002ff4 <CheckKey>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d02e      	beq.n	800144c <seclectmenu+0x6f8>
										{
											CLCD_Clear(&LCD1);
 80013ee:	4884      	ldr	r0, [pc, #528]	; (8001600 <seclectmenu+0x8ac>)
 80013f0:	f7ff f986 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4881      	ldr	r0, [pc, #516]	; (8001600 <seclectmenu+0x8ac>)
 80013fa:	f7ff f90f 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 4");
 80013fe:	4985      	ldr	r1, [pc, #532]	; (8001614 <seclectmenu+0x8c0>)
 8001400:	487f      	ldr	r0, [pc, #508]	; (8001600 <seclectmenu+0x8ac>)
 8001402:	f7ff f966 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	2100      	movs	r1, #0
 800140a:	487d      	ldr	r0, [pc, #500]	; (8001600 <seclectmenu+0x8ac>)
 800140c:	f7ff f906 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001410:	497d      	ldr	r1, [pc, #500]	; (8001608 <seclectmenu+0x8b4>)
 8001412:	487b      	ldr	r0, [pc, #492]	; (8001600 <seclectmenu+0x8ac>)
 8001414:	f7ff f95d 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 8001418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141c:	f002 fbc2 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001420:	4877      	ldr	r0, [pc, #476]	; (8001600 <seclectmenu+0x8ac>)
 8001422:	f7ff f96d 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	4875      	ldr	r0, [pc, #468]	; (8001600 <seclectmenu+0x8ac>)
 800142c:	f7ff f8f6 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8001430:	4979      	ldr	r1, [pc, #484]	; (8001618 <seclectmenu+0x8c4>)
 8001432:	4873      	ldr	r0, [pc, #460]	; (8001600 <seclectmenu+0x8ac>)
 8001434:	f7ff f94d 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	2100      	movs	r1, #0
 800143c:	4870      	ldr	r0, [pc, #448]	; (8001600 <seclectmenu+0x8ac>)
 800143e:	f7ff f8ed 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 8001442:	4976      	ldr	r1, [pc, #472]	; (800161c <seclectmenu+0x8c8>)
 8001444:	486e      	ldr	r0, [pc, #440]	; (8001600 <seclectmenu+0x8ac>)
 8001446:	f7ff f944 	bl	80006d2 <CLCD_WriteString>
 800144a:	e01c      	b.n	8001486 <seclectmenu+0x732>
										}
										else
										{
											adduid(keyadd1);
 800144c:	78bb      	ldrb	r3, [r7, #2]
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fc58 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 8001454:	486a      	ldr	r0, [pc, #424]	; (8001600 <seclectmenu+0x8ac>)
 8001456:	f7ff f953 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	4868      	ldr	r0, [pc, #416]	; (8001600 <seclectmenu+0x8ac>)
 8001460:	f7ff f8dc 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8001464:	496c      	ldr	r1, [pc, #432]	; (8001618 <seclectmenu+0x8c4>)
 8001466:	4866      	ldr	r0, [pc, #408]	; (8001600 <seclectmenu+0x8ac>)
 8001468:	f7ff f933 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800146c:	2201      	movs	r2, #1
 800146e:	2100      	movs	r1, #0
 8001470:	4863      	ldr	r0, [pc, #396]	; (8001600 <seclectmenu+0x8ac>)
 8001472:	f7ff f8d3 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 8001476:	4969      	ldr	r1, [pc, #420]	; (800161c <seclectmenu+0x8c8>)
 8001478:	4861      	ldr	r0, [pc, #388]	; (8001600 <seclectmenu+0x8ac>)
 800147a:	f7ff f92a 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 800147e:	e002      	b.n	8001486 <seclectmenu+0x732>
									default:
										back11 = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	74fb      	strb	r3, [r7, #19]
										break;
 8001484:	bf00      	nop
							while (back11 == 1)
 8001486:	7cfb      	ldrb	r3, [r7, #19]
 8001488:	2b01      	cmp	r3, #1
 800148a:	f43f adba 	beq.w	8001002 <seclectmenu+0x2ae>
									}
								}
							}
							CLCD_Clear(&LCD1);
 800148e:	485c      	ldr	r0, [pc, #368]	; (8001600 <seclectmenu+0x8ac>)
 8001490:	f7ff f936 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	4859      	ldr	r0, [pc, #356]	; (8001600 <seclectmenu+0x8ac>)
 800149a:	f7ff f8bf 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 800149e:	4960      	ldr	r1, [pc, #384]	; (8001620 <seclectmenu+0x8cc>)
 80014a0:	4857      	ldr	r0, [pc, #348]	; (8001600 <seclectmenu+0x8ac>)
 80014a2:	f7ff f916 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2100      	movs	r1, #0
 80014aa:	4855      	ldr	r0, [pc, #340]	; (8001600 <seclectmenu+0x8ac>)
 80014ac:	f7ff f8b6 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   GUEST CARD");
 80014b0:	495c      	ldr	r1, [pc, #368]	; (8001624 <seclectmenu+0x8d0>)
 80014b2:	4853      	ldr	r0, [pc, #332]	; (8001600 <seclectmenu+0x8ac>)
 80014b4:	f7ff f90d 	bl	80006d2 <CLCD_WriteString>
							break;
 80014b8:	e27e      	b.n	80019b8 <seclectmenu+0xc64>
						case 2:
							CLCD_Clear(&LCD1);
 80014ba:	4851      	ldr	r0, [pc, #324]	; (8001600 <seclectmenu+0x8ac>)
 80014bc:	f7ff f920 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	484e      	ldr	r0, [pc, #312]	; (8001600 <seclectmenu+0x8ac>)
 80014c6:	f7ff f8a9 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 80014ca:	4957      	ldr	r1, [pc, #348]	; (8001628 <seclectmenu+0x8d4>)
 80014cc:	484c      	ldr	r0, [pc, #304]	; (8001600 <seclectmenu+0x8ac>)
 80014ce:	f7ff f900 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2100      	movs	r1, #0
 80014d6:	484a      	ldr	r0, [pc, #296]	; (8001600 <seclectmenu+0x8ac>)
 80014d8:	f7ff f8a0 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 80014dc:	4953      	ldr	r1, [pc, #332]	; (800162c <seclectmenu+0x8d8>)
 80014de:	4848      	ldr	r0, [pc, #288]	; (8001600 <seclectmenu+0x8ac>)
 80014e0:	f7ff f8f7 	bl	80006d2 <CLCD_WriteString>
							uint8_t statusadd2 = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 80014ec:	e247      	b.n	800197e <seclectmenu+0xc2a>
							{
								if (exitmenu == 0)
 80014ee:	4b50      	ldr	r3, [pc, #320]	; (8001630 <seclectmenu+0x8dc>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <seclectmenu+0x7b4>
								{
									CLCD_Clear(&LCD1);
 80014f6:	4842      	ldr	r0, [pc, #264]	; (8001600 <seclectmenu+0x8ac>)
 80014f8:	f7ff f902 	bl	8000700 <CLCD_Clear>
									HAL_Delay(1000);
 80014fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001500:	f002 fb50 	bl	8003ba4 <HAL_Delay>
									return;
 8001504:	f001 bb48 	b.w	8002b98 <seclectmenu+0x1e44>
								}
								if (checkSELECT() != 0)
 8001508:	f7ff fbe5 	bl	8000cd6 <checkSELECT>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80b0 	beq.w	8001674 <seclectmenu+0x920>
								{
									exitmenu = 15;
 8001514:	4b46      	ldr	r3, [pc, #280]	; (8001630 <seclectmenu+0x8dc>)
 8001516:	220f      	movs	r2, #15
 8001518:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 800151a:	7cbb      	ldrb	r3, [r7, #18]
 800151c:	3301      	adds	r3, #1
 800151e:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8001520:	7cbb      	ldrb	r3, [r7, #18]
 8001522:	2b04      	cmp	r3, #4
 8001524:	d801      	bhi.n	800152a <seclectmenu+0x7d6>
 8001526:	7cbb      	ldrb	r3, [r7, #18]
 8001528:	e000      	b.n	800152c <seclectmenu+0x7d8>
 800152a:	2300      	movs	r3, #0
 800152c:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 800152e:	7cbb      	ldrb	r3, [r7, #18]
 8001530:	3b01      	subs	r3, #1
 8001532:	2b03      	cmp	r3, #3
 8001534:	f200 8088 	bhi.w	8001648 <seclectmenu+0x8f4>
 8001538:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <seclectmenu+0x7ec>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	08001551 	.word	0x08001551
 8001544:	0800157d 	.word	0x0800157d
 8001548:	080015a9 	.word	0x080015a9
 800154c:	080015d5 	.word	0x080015d5
									{
									case 1:
										CLCD_Clear(&LCD1);
 8001550:	482b      	ldr	r0, [pc, #172]	; (8001600 <seclectmenu+0x8ac>)
 8001552:	f7ff f8d5 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	4829      	ldr	r0, [pc, #164]	; (8001600 <seclectmenu+0x8ac>)
 800155c:	f7ff f85e 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 8001560:	4931      	ldr	r1, [pc, #196]	; (8001628 <seclectmenu+0x8d4>)
 8001562:	4827      	ldr	r0, [pc, #156]	; (8001600 <seclectmenu+0x8ac>)
 8001564:	f7ff f8b5 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	2100      	movs	r1, #0
 800156c:	4824      	ldr	r0, [pc, #144]	; (8001600 <seclectmenu+0x8ac>)
 800156e:	f7ff f855 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 8001572:	492e      	ldr	r1, [pc, #184]	; (800162c <seclectmenu+0x8d8>)
 8001574:	4822      	ldr	r0, [pc, #136]	; (8001600 <seclectmenu+0x8ac>)
 8001576:	f7ff f8ac 	bl	80006d2 <CLCD_WriteString>
										break;
 800157a:	e07b      	b.n	8001674 <seclectmenu+0x920>
									case 2:
										CLCD_Clear(&LCD1);
 800157c:	4820      	ldr	r0, [pc, #128]	; (8001600 <seclectmenu+0x8ac>)
 800157e:	f7ff f8bf 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	481e      	ldr	r0, [pc, #120]	; (8001600 <seclectmenu+0x8ac>)
 8001588:	f7ff f848 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 800158c:	4929      	ldr	r1, [pc, #164]	; (8001634 <seclectmenu+0x8e0>)
 800158e:	481c      	ldr	r0, [pc, #112]	; (8001600 <seclectmenu+0x8ac>)
 8001590:	f7ff f89f 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	2100      	movs	r1, #0
 8001598:	4819      	ldr	r0, [pc, #100]	; (8001600 <seclectmenu+0x8ac>)
 800159a:	f7ff f83f 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 800159e:	4926      	ldr	r1, [pc, #152]	; (8001638 <seclectmenu+0x8e4>)
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <seclectmenu+0x8ac>)
 80015a2:	f7ff f896 	bl	80006d2 <CLCD_WriteString>
										break;
 80015a6:	e065      	b.n	8001674 <seclectmenu+0x920>
									case 3:
										CLCD_Clear(&LCD1);
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <seclectmenu+0x8ac>)
 80015aa:	f7ff f8a9 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	4813      	ldr	r0, [pc, #76]	; (8001600 <seclectmenu+0x8ac>)
 80015b4:	f7ff f832 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 80015b8:	4920      	ldr	r1, [pc, #128]	; (800163c <seclectmenu+0x8e8>)
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <seclectmenu+0x8ac>)
 80015bc:	f7ff f889 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2100      	movs	r1, #0
 80015c4:	480e      	ldr	r0, [pc, #56]	; (8001600 <seclectmenu+0x8ac>)
 80015c6:	f7ff f829 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 80015ca:	491d      	ldr	r1, [pc, #116]	; (8001640 <seclectmenu+0x8ec>)
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <seclectmenu+0x8ac>)
 80015ce:	f7ff f880 	bl	80006d2 <CLCD_WriteString>
										break;
 80015d2:	e04f      	b.n	8001674 <seclectmenu+0x920>
									case 4:
										CLCD_Clear(&LCD1);
 80015d4:	480a      	ldr	r0, [pc, #40]	; (8001600 <seclectmenu+0x8ac>)
 80015d6:	f7ff f893 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	4808      	ldr	r0, [pc, #32]	; (8001600 <seclectmenu+0x8ac>)
 80015e0:	f7ff f81c 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 80015e4:	4917      	ldr	r1, [pc, #92]	; (8001644 <seclectmenu+0x8f0>)
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <seclectmenu+0x8ac>)
 80015e8:	f7ff f873 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2100      	movs	r1, #0
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <seclectmenu+0x8ac>)
 80015f2:	f7ff f813 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 80015f6:	4909      	ldr	r1, [pc, #36]	; (800161c <seclectmenu+0x8c8>)
 80015f8:	4801      	ldr	r0, [pc, #4]	; (8001600 <seclectmenu+0x8ac>)
 80015fa:	f7ff f86a 	bl	80006d2 <CLCD_WriteString>
										break;
 80015fe:	e039      	b.n	8001674 <seclectmenu+0x920>
 8001600:	20000140 	.word	0x20000140
 8001604:	0800660c 	.word	0x0800660c
 8001608:	080065f8 	.word	0x080065f8
 800160c:	080065a8 	.word	0x080065a8
 8001610:	080065bc 	.word	0x080065bc
 8001614:	08006614 	.word	0x08006614
 8001618:	080065d0 	.word	0x080065d0
 800161c:	080065e4 	.word	0x080065e4
 8001620:	08006520 	.word	0x08006520
 8001624:	08006530 	.word	0x08006530
 8001628:	0800661c 	.word	0x0800661c
 800162c:	08006630 	.word	0x08006630
 8001630:	20000000 	.word	0x20000000
 8001634:	08006644 	.word	0x08006644
 8001638:	08006658 	.word	0x08006658
 800163c:	0800666c 	.word	0x0800666c
 8001640:	08006680 	.word	0x08006680
 8001644:	08006694 	.word	0x08006694
									default:
										CLCD_Clear(&LCD1);
 8001648:	48ba      	ldr	r0, [pc, #744]	; (8001934 <seclectmenu+0xbe0>)
 800164a:	f7ff f859 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	48b8      	ldr	r0, [pc, #736]	; (8001934 <seclectmenu+0xbe0>)
 8001654:	f7fe ffe2 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 8001658:	49b7      	ldr	r1, [pc, #732]	; (8001938 <seclectmenu+0xbe4>)
 800165a:	48b6      	ldr	r0, [pc, #728]	; (8001934 <seclectmenu+0xbe0>)
 800165c:	f7ff f839 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001660:	2201      	movs	r2, #1
 8001662:	2100      	movs	r1, #0
 8001664:	48b3      	ldr	r0, [pc, #716]	; (8001934 <seclectmenu+0xbe0>)
 8001666:	f7fe ffd9 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800166a:	49b4      	ldr	r1, [pc, #720]	; (800193c <seclectmenu+0xbe8>)
 800166c:	48b1      	ldr	r0, [pc, #708]	; (8001934 <seclectmenu+0xbe0>)
 800166e:	f7ff f830 	bl	80006d2 <CLCD_WriteString>
										break;
 8001672:	bf00      	nop
									}
								}
								if (checkMENU() != 0)
 8001674:	f7ff faf0 	bl	8000c58 <checkMENU>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 817f 	beq.w	800197e <seclectmenu+0xc2a>
								{
									exitmenu = 15;
 8001680:	4baf      	ldr	r3, [pc, #700]	; (8001940 <seclectmenu+0xbec>)
 8001682:	220f      	movs	r2, #15
 8001684:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001686:	7dbb      	ldrb	r3, [r7, #22]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	b2da      	uxtb	r2, r3
 800168c:	7cbb      	ldrb	r3, [r7, #18]
 800168e:	4413      	add	r3, r2
 8001690:	70fb      	strb	r3, [r7, #3]
									switch (statusadd2)
 8001692:	7cbb      	ldrb	r3, [r7, #18]
 8001694:	3b01      	subs	r3, #1
 8001696:	2b03      	cmp	r3, #3
 8001698:	f200 816e 	bhi.w	8001978 <seclectmenu+0xc24>
 800169c:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <seclectmenu+0x950>)
 800169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	08001755 	.word	0x08001755
 80016ac:	080017f5 	.word	0x080017f5
 80016b0:	08001895 	.word	0x08001895
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 fc9c 	bl	8002ff4 <CheckKey>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d02e      	beq.n	8001720 <seclectmenu+0x9cc>
										{
											CLCD_Clear(&LCD1);
 80016c2:	489c      	ldr	r0, [pc, #624]	; (8001934 <seclectmenu+0xbe0>)
 80016c4:	f7ff f81c 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	4899      	ldr	r0, [pc, #612]	; (8001934 <seclectmenu+0xbe0>)
 80016ce:	f7fe ffa5 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST 1");
 80016d2:	499c      	ldr	r1, [pc, #624]	; (8001944 <seclectmenu+0xbf0>)
 80016d4:	4897      	ldr	r0, [pc, #604]	; (8001934 <seclectmenu+0xbe0>)
 80016d6:	f7fe fffc 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	2100      	movs	r1, #0
 80016de:	4895      	ldr	r0, [pc, #596]	; (8001934 <seclectmenu+0xbe0>)
 80016e0:	f7fe ff9c 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 80016e4:	4998      	ldr	r1, [pc, #608]	; (8001948 <seclectmenu+0xbf4>)
 80016e6:	4893      	ldr	r0, [pc, #588]	; (8001934 <seclectmenu+0xbe0>)
 80016e8:	f7fe fff3 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 80016ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f0:	f002 fa58 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80016f4:	488f      	ldr	r0, [pc, #572]	; (8001934 <seclectmenu+0xbe0>)
 80016f6:	f7ff f803 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	488d      	ldr	r0, [pc, #564]	; (8001934 <seclectmenu+0xbe0>)
 8001700:	f7fe ff8c 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 8001704:	4991      	ldr	r1, [pc, #580]	; (800194c <seclectmenu+0xbf8>)
 8001706:	488b      	ldr	r0, [pc, #556]	; (8001934 <seclectmenu+0xbe0>)
 8001708:	f7fe ffe3 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800170c:	2201      	movs	r2, #1
 800170e:	2100      	movs	r1, #0
 8001710:	4888      	ldr	r0, [pc, #544]	; (8001934 <seclectmenu+0xbe0>)
 8001712:	f7fe ff83 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 8001716:	498e      	ldr	r1, [pc, #568]	; (8001950 <seclectmenu+0xbfc>)
 8001718:	4886      	ldr	r0, [pc, #536]	; (8001934 <seclectmenu+0xbe0>)
 800171a:	f7fe ffda 	bl	80006d2 <CLCD_WriteString>
 800171e:	e12e      	b.n	800197e <seclectmenu+0xc2a>
										}
										else
										{
											adduid(keyadd2);
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	4618      	mov	r0, r3
 8001724:	f001 faee 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 8001728:	4882      	ldr	r0, [pc, #520]	; (8001934 <seclectmenu+0xbe0>)
 800172a:	f7fe ffe9 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	4880      	ldr	r0, [pc, #512]	; (8001934 <seclectmenu+0xbe0>)
 8001734:	f7fe ff72 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 8001738:	4984      	ldr	r1, [pc, #528]	; (800194c <seclectmenu+0xbf8>)
 800173a:	487e      	ldr	r0, [pc, #504]	; (8001934 <seclectmenu+0xbe0>)
 800173c:	f7fe ffc9 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	2100      	movs	r1, #0
 8001744:	487b      	ldr	r0, [pc, #492]	; (8001934 <seclectmenu+0xbe0>)
 8001746:	f7fe ff69 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 800174a:	4981      	ldr	r1, [pc, #516]	; (8001950 <seclectmenu+0xbfc>)
 800174c:	4879      	ldr	r0, [pc, #484]	; (8001934 <seclectmenu+0xbe0>)
 800174e:	f7fe ffc0 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 8001752:	e114      	b.n	800197e <seclectmenu+0xc2a>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fc4c 	bl	8002ff4 <CheckKey>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d02e      	beq.n	80017c0 <seclectmenu+0xa6c>
										{
											CLCD_Clear(&LCD1);
 8001762:	4874      	ldr	r0, [pc, #464]	; (8001934 <seclectmenu+0xbe0>)
 8001764:	f7fe ffcc 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	4871      	ldr	r0, [pc, #452]	; (8001934 <seclectmenu+0xbe0>)
 800176e:	f7fe ff55 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST 2");
 8001772:	4978      	ldr	r1, [pc, #480]	; (8001954 <seclectmenu+0xc00>)
 8001774:	486f      	ldr	r0, [pc, #444]	; (8001934 <seclectmenu+0xbe0>)
 8001776:	f7fe ffac 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	2100      	movs	r1, #0
 800177e:	486d      	ldr	r0, [pc, #436]	; (8001934 <seclectmenu+0xbe0>)
 8001780:	f7fe ff4c 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001784:	4970      	ldr	r1, [pc, #448]	; (8001948 <seclectmenu+0xbf4>)
 8001786:	486b      	ldr	r0, [pc, #428]	; (8001934 <seclectmenu+0xbe0>)
 8001788:	f7fe ffa3 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 800178c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001790:	f002 fa08 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001794:	4867      	ldr	r0, [pc, #412]	; (8001934 <seclectmenu+0xbe0>)
 8001796:	f7fe ffb3 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	4865      	ldr	r0, [pc, #404]	; (8001934 <seclectmenu+0xbe0>)
 80017a0:	f7fe ff3c 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 80017a4:	496c      	ldr	r1, [pc, #432]	; (8001958 <seclectmenu+0xc04>)
 80017a6:	4863      	ldr	r0, [pc, #396]	; (8001934 <seclectmenu+0xbe0>)
 80017a8:	f7fe ff93 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2100      	movs	r1, #0
 80017b0:	4860      	ldr	r0, [pc, #384]	; (8001934 <seclectmenu+0xbe0>)
 80017b2:	f7fe ff33 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 80017b6:	4969      	ldr	r1, [pc, #420]	; (800195c <seclectmenu+0xc08>)
 80017b8:	485e      	ldr	r0, [pc, #376]	; (8001934 <seclectmenu+0xbe0>)
 80017ba:	f7fe ff8a 	bl	80006d2 <CLCD_WriteString>
 80017be:	e0de      	b.n	800197e <seclectmenu+0xc2a>
										}
										else
										{
											adduid(keyadd2);
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fa9e 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 80017c8:	485a      	ldr	r0, [pc, #360]	; (8001934 <seclectmenu+0xbe0>)
 80017ca:	f7fe ff99 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	4858      	ldr	r0, [pc, #352]	; (8001934 <seclectmenu+0xbe0>)
 80017d4:	f7fe ff22 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 80017d8:	495f      	ldr	r1, [pc, #380]	; (8001958 <seclectmenu+0xc04>)
 80017da:	4856      	ldr	r0, [pc, #344]	; (8001934 <seclectmenu+0xbe0>)
 80017dc:	f7fe ff79 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2100      	movs	r1, #0
 80017e4:	4853      	ldr	r0, [pc, #332]	; (8001934 <seclectmenu+0xbe0>)
 80017e6:	f7fe ff19 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 80017ea:	495c      	ldr	r1, [pc, #368]	; (800195c <seclectmenu+0xc08>)
 80017ec:	4851      	ldr	r0, [pc, #324]	; (8001934 <seclectmenu+0xbe0>)
 80017ee:	f7fe ff70 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 80017f2:	e0c4      	b.n	800197e <seclectmenu+0xc2a>
									case 3:
										if (CheckKey(keyadd2) != 0)
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 fbfc 	bl	8002ff4 <CheckKey>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d02e      	beq.n	8001860 <seclectmenu+0xb0c>
										{
											CLCD_Clear(&LCD1);
 8001802:	484c      	ldr	r0, [pc, #304]	; (8001934 <seclectmenu+0xbe0>)
 8001804:	f7fe ff7c 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	4849      	ldr	r0, [pc, #292]	; (8001934 <seclectmenu+0xbe0>)
 800180e:	f7fe ff05 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST 3");
 8001812:	4953      	ldr	r1, [pc, #332]	; (8001960 <seclectmenu+0xc0c>)
 8001814:	4847      	ldr	r0, [pc, #284]	; (8001934 <seclectmenu+0xbe0>)
 8001816:	f7fe ff5c 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	2100      	movs	r1, #0
 800181e:	4845      	ldr	r0, [pc, #276]	; (8001934 <seclectmenu+0xbe0>)
 8001820:	f7fe fefc 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001824:	4948      	ldr	r1, [pc, #288]	; (8001948 <seclectmenu+0xbf4>)
 8001826:	4843      	ldr	r0, [pc, #268]	; (8001934 <seclectmenu+0xbe0>)
 8001828:	f7fe ff53 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001830:	f002 f9b8 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001834:	483f      	ldr	r0, [pc, #252]	; (8001934 <seclectmenu+0xbe0>)
 8001836:	f7fe ff63 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	483d      	ldr	r0, [pc, #244]	; (8001934 <seclectmenu+0xbe0>)
 8001840:	f7fe feec 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 8001844:	4947      	ldr	r1, [pc, #284]	; (8001964 <seclectmenu+0xc10>)
 8001846:	483b      	ldr	r0, [pc, #236]	; (8001934 <seclectmenu+0xbe0>)
 8001848:	f7fe ff43 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800184c:	2201      	movs	r2, #1
 800184e:	2100      	movs	r1, #0
 8001850:	4838      	ldr	r0, [pc, #224]	; (8001934 <seclectmenu+0xbe0>)
 8001852:	f7fe fee3 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 8001856:	4938      	ldr	r1, [pc, #224]	; (8001938 <seclectmenu+0xbe4>)
 8001858:	4836      	ldr	r0, [pc, #216]	; (8001934 <seclectmenu+0xbe0>)
 800185a:	f7fe ff3a 	bl	80006d2 <CLCD_WriteString>
 800185e:	e08e      	b.n	800197e <seclectmenu+0xc2a>
										}
										else
										{
											adduid(keyadd2);
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	4618      	mov	r0, r3
 8001864:	f001 fa4e 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 8001868:	4832      	ldr	r0, [pc, #200]	; (8001934 <seclectmenu+0xbe0>)
 800186a:	f7fe ff49 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	4830      	ldr	r0, [pc, #192]	; (8001934 <seclectmenu+0xbe0>)
 8001874:	f7fe fed2 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 8001878:	493a      	ldr	r1, [pc, #232]	; (8001964 <seclectmenu+0xc10>)
 800187a:	482e      	ldr	r0, [pc, #184]	; (8001934 <seclectmenu+0xbe0>)
 800187c:	f7fe ff29 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	2100      	movs	r1, #0
 8001884:	482b      	ldr	r0, [pc, #172]	; (8001934 <seclectmenu+0xbe0>)
 8001886:	f7fe fec9 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 800188a:	492b      	ldr	r1, [pc, #172]	; (8001938 <seclectmenu+0xbe4>)
 800188c:	4829      	ldr	r0, [pc, #164]	; (8001934 <seclectmenu+0xbe0>)
 800188e:	f7fe ff20 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 8001892:	e074      	b.n	800197e <seclectmenu+0xc2a>
									case 4:
										if (CheckKey(keyadd2) != 0)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	4618      	mov	r0, r3
 8001898:	f001 fbac 	bl	8002ff4 <CheckKey>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d02e      	beq.n	8001900 <seclectmenu+0xbac>
										{
											CLCD_Clear(&LCD1);
 80018a2:	4824      	ldr	r0, [pc, #144]	; (8001934 <seclectmenu+0xbe0>)
 80018a4:	f7fe ff2c 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <seclectmenu+0xbe0>)
 80018ae:	f7fe feb5 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST");
 80018b2:	492d      	ldr	r1, [pc, #180]	; (8001968 <seclectmenu+0xc14>)
 80018b4:	481f      	ldr	r0, [pc, #124]	; (8001934 <seclectmenu+0xbe0>)
 80018b6:	f7fe ff0c 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2100      	movs	r1, #0
 80018be:	481d      	ldr	r0, [pc, #116]	; (8001934 <seclectmenu+0xbe0>)
 80018c0:	f7fe feac 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 80018c4:	4920      	ldr	r1, [pc, #128]	; (8001948 <seclectmenu+0xbf4>)
 80018c6:	481b      	ldr	r0, [pc, #108]	; (8001934 <seclectmenu+0xbe0>)
 80018c8:	f7fe ff03 	bl	80006d2 <CLCD_WriteString>
											HAL_Delay(1000);
 80018cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018d0:	f002 f968 	bl	8003ba4 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80018d4:	4817      	ldr	r0, [pc, #92]	; (8001934 <seclectmenu+0xbe0>)
 80018d6:	f7fe ff13 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	4815      	ldr	r0, [pc, #84]	; (8001934 <seclectmenu+0xbe0>)
 80018e0:	f7fe fe9c 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80018e4:	4921      	ldr	r1, [pc, #132]	; (800196c <seclectmenu+0xc18>)
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <seclectmenu+0xbe0>)
 80018e8:	f7fe fef3 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2100      	movs	r1, #0
 80018f0:	4810      	ldr	r0, [pc, #64]	; (8001934 <seclectmenu+0xbe0>)
 80018f2:	f7fe fe93 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80018f6:	491e      	ldr	r1, [pc, #120]	; (8001970 <seclectmenu+0xc1c>)
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <seclectmenu+0xbe0>)
 80018fa:	f7fe feea 	bl	80006d2 <CLCD_WriteString>
 80018fe:	e03e      	b.n	800197e <seclectmenu+0xc2a>
										}
										else
										{
											adduid(keyadd2);
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	4618      	mov	r0, r3
 8001904:	f001 f9fe 	bl	8002d04 <adduid>
											CLCD_Clear(&LCD1);
 8001908:	480a      	ldr	r0, [pc, #40]	; (8001934 <seclectmenu+0xbe0>)
 800190a:	f7fe fef9 	bl	8000700 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <seclectmenu+0xbe0>)
 8001914:	f7fe fe82 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <seclectmenu+0xc20>)
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <seclectmenu+0xbe0>)
 800191c:	f7fe fed9 	bl	80006d2 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	2100      	movs	r1, #0
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <seclectmenu+0xbe0>)
 8001926:	f7fe fe79 	bl	800061c <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 800192a:	4911      	ldr	r1, [pc, #68]	; (8001970 <seclectmenu+0xc1c>)
 800192c:	4801      	ldr	r0, [pc, #4]	; (8001934 <seclectmenu+0xbe0>)
 800192e:	f7fe fed0 	bl	80006d2 <CLCD_WriteString>
										}
										break;
 8001932:	e024      	b.n	800197e <seclectmenu+0xc2a>
 8001934:	20000140 	.word	0x20000140
 8001938:	08006680 	.word	0x08006680
 800193c:	08006508 	.word	0x08006508
 8001940:	20000000 	.word	0x20000000
 8001944:	080066a8 	.word	0x080066a8
 8001948:	080065f8 	.word	0x080065f8
 800194c:	0800661c 	.word	0x0800661c
 8001950:	08006630 	.word	0x08006630
 8001954:	080066b0 	.word	0x080066b0
 8001958:	08006644 	.word	0x08006644
 800195c:	08006658 	.word	0x08006658
 8001960:	080066b8 	.word	0x080066b8
 8001964:	0800666c 	.word	0x0800666c
 8001968:	080066c0 	.word	0x080066c0
 800196c:	080066c8 	.word	0x080066c8
 8001970:	080065e4 	.word	0x080065e4
 8001974:	08006694 	.word	0x08006694
									default:
										back12 = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	747b      	strb	r3, [r7, #17]
										break;
 800197c:	bf00      	nop
							while (back12 == 1)
 800197e:	7c7b      	ldrb	r3, [r7, #17]
 8001980:	2b01      	cmp	r3, #1
 8001982:	f43f adb4 	beq.w	80014ee <seclectmenu+0x79a>
									}
								}
							}
							CLCD_Clear(&LCD1);
 8001986:	48b9      	ldr	r0, [pc, #740]	; (8001c6c <seclectmenu+0xf18>)
 8001988:	f7fe feba 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	48b6      	ldr	r0, [pc, #728]	; (8001c6c <seclectmenu+0xf18>)
 8001992:	f7fe fe43 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8001996:	49b6      	ldr	r1, [pc, #728]	; (8001c70 <seclectmenu+0xf1c>)
 8001998:	48b4      	ldr	r0, [pc, #720]	; (8001c6c <seclectmenu+0xf18>)
 800199a:	f7fe fe9a 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	2100      	movs	r1, #0
 80019a2:	48b2      	ldr	r0, [pc, #712]	; (8001c6c <seclectmenu+0xf18>)
 80019a4:	f7fe fe3a 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> GUEST CARD");
 80019a8:	49b2      	ldr	r1, [pc, #712]	; (8001c74 <seclectmenu+0xf20>)
 80019aa:	48b0      	ldr	r0, [pc, #704]	; (8001c6c <seclectmenu+0xf18>)
 80019ac:	f7fe fe91 	bl	80006d2 <CLCD_WriteString>
							break;
 80019b0:	e002      	b.n	80019b8 <seclectmenu+0xc64>
						default:
							back = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	757b      	strb	r3, [r7, #21]
							break;
 80019b6:	bf00      	nop
				while (back == 1)
 80019b8:	7d7b      	ldrb	r3, [r7, #21]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f43f aa8f 	beq.w	8000ede <seclectmenu+0x18a>
						}
					}
				}
				CLCD_Clear(&LCD1);
 80019c0:	48aa      	ldr	r0, [pc, #680]	; (8001c6c <seclectmenu+0xf18>)
 80019c2:	f7fe fe9d 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	48a8      	ldr	r0, [pc, #672]	; (8001c6c <seclectmenu+0xf18>)
 80019cc:	f7fe fe26 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  ADD CARD");
 80019d0:	49a9      	ldr	r1, [pc, #676]	; (8001c78 <seclectmenu+0xf24>)
 80019d2:	48a6      	ldr	r0, [pc, #664]	; (8001c6c <seclectmenu+0xf18>)
 80019d4:	f7fe fe7d 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80019d8:	2201      	movs	r2, #1
 80019da:	2100      	movs	r1, #0
 80019dc:	48a3      	ldr	r0, [pc, #652]	; (8001c6c <seclectmenu+0xf18>)
 80019de:	f7fe fe1d 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 80019e2:	49a6      	ldr	r1, [pc, #664]	; (8001c7c <seclectmenu+0xf28>)
 80019e4:	48a1      	ldr	r0, [pc, #644]	; (8001c6c <seclectmenu+0xf18>)
 80019e6:	f7fe fe74 	bl	80006d2 <CLCD_WriteString>
				break;
 80019ea:	f001 b8c9 	b.w	8002b80 <seclectmenu+0x1e2c>
			case 1:
				CLCD_Clear(&LCD1);
 80019ee:	489f      	ldr	r0, [pc, #636]	; (8001c6c <seclectmenu+0xf18>)
 80019f0:	f7fe fe86 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	489c      	ldr	r0, [pc, #624]	; (8001c6c <seclectmenu+0xf18>)
 80019fa:	f7fe fe0f 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "     SELECT ");
 80019fe:	49a0      	ldr	r1, [pc, #640]	; (8001c80 <seclectmenu+0xf2c>)
 8001a00:	489a      	ldr	r0, [pc, #616]	; (8001c6c <seclectmenu+0xf18>)
 8001a02:	f7fe fe66 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8001a06:	2201      	movs	r2, #1
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4898      	ldr	r0, [pc, #608]	; (8001c6c <seclectmenu+0xf18>)
 8001a0c:	f7fe fe06 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "PLEASE PRESS #");
 8001a10:	499c      	ldr	r1, [pc, #624]	; (8001c84 <seclectmenu+0xf30>)
 8001a12:	4896      	ldr	r0, [pc, #600]	; (8001c6c <seclectmenu+0xf18>)
 8001a14:	f7fe fe5d 	bl	80006d2 <CLCD_WriteString>
				uint8_t statusremove = -1;
 8001a18:	23ff      	movs	r3, #255	; 0xff
 8001a1a:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001a20:	f001 b878 	b.w	8002b14 <seclectmenu+0x1dc0>
				{
					if (exitmenu == 0)
 8001a24:	4b98      	ldr	r3, [pc, #608]	; (8001c88 <seclectmenu+0xf34>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d108      	bne.n	8001a3e <seclectmenu+0xcea>
					{
						CLCD_Clear(&LCD1);
 8001a2c:	488f      	ldr	r0, [pc, #572]	; (8001c6c <seclectmenu+0xf18>)
 8001a2e:	f7fe fe67 	bl	8000700 <CLCD_Clear>
						HAL_Delay(1000);
 8001a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a36:	f002 f8b5 	bl	8003ba4 <HAL_Delay>
						return;
 8001a3a:	f001 b8ad 	b.w	8002b98 <seclectmenu+0x1e44>
					}
					if (checkSELECT() != 0)
 8001a3e:	f7ff f94a 	bl	8000cd6 <checkSELECT>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d054      	beq.n	8001af2 <seclectmenu+0xd9e>
					{
						exitmenu = 15;
 8001a48:	4b8f      	ldr	r3, [pc, #572]	; (8001c88 <seclectmenu+0xf34>)
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001a4e:	7c3b      	ldrb	r3, [r7, #16]
 8001a50:	3301      	adds	r3, #1
 8001a52:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001a54:	7c3b      	ldrb	r3, [r7, #16]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d801      	bhi.n	8001a5e <seclectmenu+0xd0a>
 8001a5a:	7c3b      	ldrb	r3, [r7, #16]
 8001a5c:	e000      	b.n	8001a60 <seclectmenu+0xd0c>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001a62:	7c3b      	ldrb	r3, [r7, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <seclectmenu+0xd1a>
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d016      	beq.n	8001a9a <seclectmenu+0xd46>
 8001a6c:	e02b      	b.n	8001ac6 <seclectmenu+0xd72>
						{
						case 0:
							CLCD_Clear(&LCD1);
 8001a6e:	487f      	ldr	r0, [pc, #508]	; (8001c6c <seclectmenu+0xf18>)
 8001a70:	f7fe fe46 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	487c      	ldr	r0, [pc, #496]	; (8001c6c <seclectmenu+0xf18>)
 8001a7a:	f7fe fdcf 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> REMOVE CARD");
 8001a7e:	4983      	ldr	r1, [pc, #524]	; (8001c8c <seclectmenu+0xf38>)
 8001a80:	487a      	ldr	r0, [pc, #488]	; (8001c6c <seclectmenu+0xf18>)
 8001a82:	f7fe fe26 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001a86:	2201      	movs	r2, #1
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4878      	ldr	r0, [pc, #480]	; (8001c6c <seclectmenu+0xf18>)
 8001a8c:	f7fe fdc6 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE ALL");
 8001a90:	497f      	ldr	r1, [pc, #508]	; (8001c90 <seclectmenu+0xf3c>)
 8001a92:	4876      	ldr	r0, [pc, #472]	; (8001c6c <seclectmenu+0xf18>)
 8001a94:	f7fe fe1d 	bl	80006d2 <CLCD_WriteString>
							break;
 8001a98:	e02b      	b.n	8001af2 <seclectmenu+0xd9e>
						case 1:
							CLCD_Clear(&LCD1);
 8001a9a:	4874      	ldr	r0, [pc, #464]	; (8001c6c <seclectmenu+0xf18>)
 8001a9c:	f7fe fe30 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4871      	ldr	r0, [pc, #452]	; (8001c6c <seclectmenu+0xf18>)
 8001aa6:	f7fe fdb9 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE CARD");
 8001aaa:	497a      	ldr	r1, [pc, #488]	; (8001c94 <seclectmenu+0xf40>)
 8001aac:	486f      	ldr	r0, [pc, #444]	; (8001c6c <seclectmenu+0xf18>)
 8001aae:	f7fe fe10 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	486d      	ldr	r0, [pc, #436]	; (8001c6c <seclectmenu+0xf18>)
 8001ab8:	f7fe fdb0 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> REMOVE ALL");
 8001abc:	4976      	ldr	r1, [pc, #472]	; (8001c98 <seclectmenu+0xf44>)
 8001abe:	486b      	ldr	r0, [pc, #428]	; (8001c6c <seclectmenu+0xf18>)
 8001ac0:	f7fe fe07 	bl	80006d2 <CLCD_WriteString>
							break;
 8001ac4:	e015      	b.n	8001af2 <seclectmenu+0xd9e>
						default:
							CLCD_Clear(&LCD1);
 8001ac6:	4869      	ldr	r0, [pc, #420]	; (8001c6c <seclectmenu+0xf18>)
 8001ac8:	f7fe fe1a 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4866      	ldr	r0, [pc, #408]	; (8001c6c <seclectmenu+0xf18>)
 8001ad2:	f7fe fda3 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE ALL");
 8001ad6:	496e      	ldr	r1, [pc, #440]	; (8001c90 <seclectmenu+0xf3c>)
 8001ad8:	4864      	ldr	r0, [pc, #400]	; (8001c6c <seclectmenu+0xf18>)
 8001ada:	f7fe fdfa 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4862      	ldr	r0, [pc, #392]	; (8001c6c <seclectmenu+0xf18>)
 8001ae4:	f7fe fd9a 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 8001ae8:	496c      	ldr	r1, [pc, #432]	; (8001c9c <seclectmenu+0xf48>)
 8001aea:	4860      	ldr	r0, [pc, #384]	; (8001c6c <seclectmenu+0xf18>)
 8001aec:	f7fe fdf1 	bl	80006d2 <CLCD_WriteString>
							break;
 8001af0:	bf00      	nop
						}
					}
					if (checkMENU() != 0)
 8001af2:	f7ff f8b1 	bl	8000c58 <checkMENU>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f001 800b 	beq.w	8002b14 <seclectmenu+0x1dc0>
					{
						exitmenu = 15;
 8001afe:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <seclectmenu+0xf34>)
 8001b00:	220f      	movs	r2, #15
 8001b02:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001b04:	7c3b      	ldrb	r3, [r7, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <seclectmenu+0xdc0>
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	f000 87f7 	beq.w	8002afe <seclectmenu+0x1daa>
 8001b10:	f000 bffd 	b.w	8002b0e <seclectmenu+0x1dba>
						{
						case 0:
							CLCD_Clear(&LCD1);
 8001b14:	4855      	ldr	r0, [pc, #340]	; (8001c6c <seclectmenu+0xf18>)
 8001b16:	f7fe fdf3 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4853      	ldr	r0, [pc, #332]	; (8001c6c <seclectmenu+0xf18>)
 8001b20:	f7fe fd7c 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> SELECT CARD");
 8001b24:	495e      	ldr	r1, [pc, #376]	; (8001ca0 <seclectmenu+0xf4c>)
 8001b26:	4851      	ldr	r0, [pc, #324]	; (8001c6c <seclectmenu+0xf18>)
 8001b28:	f7fe fdd3 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2100      	movs	r1, #0
 8001b30:	484e      	ldr	r0, [pc, #312]	; (8001c6c <seclectmenu+0xf18>)
 8001b32:	f7fe fd73 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   SCAN CARD");
 8001b36:	495b      	ldr	r1, [pc, #364]	; (8001ca4 <seclectmenu+0xf50>)
 8001b38:	484c      	ldr	r0, [pc, #304]	; (8001c6c <seclectmenu+0xf18>)
 8001b3a:	f7fe fdca 	bl	80006d2 <CLCD_WriteString>
							uint8_t statusrm1 = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001b46:	f000 bfc0 	b.w	8002aca <seclectmenu+0x1d76>
							{
								if (exitmenu == 0)
 8001b4a:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <seclectmenu+0xf34>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <seclectmenu+0xe10>
								{
									CLCD_Clear(&LCD1);
 8001b52:	4846      	ldr	r0, [pc, #280]	; (8001c6c <seclectmenu+0xf18>)
 8001b54:	f7fe fdd4 	bl	8000700 <CLCD_Clear>
									HAL_Delay(1000);
 8001b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5c:	f002 f822 	bl	8003ba4 <HAL_Delay>
									return;
 8001b60:	f001 b81a 	b.w	8002b98 <seclectmenu+0x1e44>
								}
								if (checkSELECT() != 0)
 8001b64:	f7ff f8b7 	bl	8000cd6 <checkSELECT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d051      	beq.n	8001c12 <seclectmenu+0xebe>
								{
									statusrm1++;
 8001b6e:	7bbb      	ldrb	r3, [r7, #14]
 8001b70:	3301      	adds	r3, #1
 8001b72:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d801      	bhi.n	8001b7e <seclectmenu+0xe2a>
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	e000      	b.n	8001b80 <seclectmenu+0xe2c>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001b82:	7bbb      	ldrb	r3, [r7, #14]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <seclectmenu+0xe3a>
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d016      	beq.n	8001bba <seclectmenu+0xe66>
 8001b8c:	e02b      	b.n	8001be6 <seclectmenu+0xe92>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001b8e:	4837      	ldr	r0, [pc, #220]	; (8001c6c <seclectmenu+0xf18>)
 8001b90:	f7fe fdb6 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	4834      	ldr	r0, [pc, #208]	; (8001c6c <seclectmenu+0xf18>)
 8001b9a:	f7fe fd3f 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SELECT CARD");
 8001b9e:	4940      	ldr	r1, [pc, #256]	; (8001ca0 <seclectmenu+0xf4c>)
 8001ba0:	4832      	ldr	r0, [pc, #200]	; (8001c6c <seclectmenu+0xf18>)
 8001ba2:	f7fe fd96 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4830      	ldr	r0, [pc, #192]	; (8001c6c <seclectmenu+0xf18>)
 8001bac:	f7fe fd36 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SCAN CARD");
 8001bb0:	493c      	ldr	r1, [pc, #240]	; (8001ca4 <seclectmenu+0xf50>)
 8001bb2:	482e      	ldr	r0, [pc, #184]	; (8001c6c <seclectmenu+0xf18>)
 8001bb4:	f7fe fd8d 	bl	80006d2 <CLCD_WriteString>
										break;
 8001bb8:	e02b      	b.n	8001c12 <seclectmenu+0xebe>
									case 1:
										CLCD_Clear(&LCD1);
 8001bba:	482c      	ldr	r0, [pc, #176]	; (8001c6c <seclectmenu+0xf18>)
 8001bbc:	f7fe fda0 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4829      	ldr	r0, [pc, #164]	; (8001c6c <seclectmenu+0xf18>)
 8001bc6:	f7fe fd29 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SELECT CARD");
 8001bca:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <seclectmenu+0xf54>)
 8001bcc:	4827      	ldr	r0, [pc, #156]	; (8001c6c <seclectmenu+0xf18>)
 8001bce:	f7fe fd80 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4825      	ldr	r0, [pc, #148]	; (8001c6c <seclectmenu+0xf18>)
 8001bd8:	f7fe fd20 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SCAN CARD");
 8001bdc:	4933      	ldr	r1, [pc, #204]	; (8001cac <seclectmenu+0xf58>)
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <seclectmenu+0xf18>)
 8001be0:	f7fe fd77 	bl	80006d2 <CLCD_WriteString>
										;
										break;
 8001be4:	e015      	b.n	8001c12 <seclectmenu+0xebe>
									default:
										CLCD_Clear(&LCD1);
 8001be6:	4821      	ldr	r0, [pc, #132]	; (8001c6c <seclectmenu+0xf18>)
 8001be8:	f7fe fd8a 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <seclectmenu+0xf18>)
 8001bf2:	f7fe fd13 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SCAN CARD");
 8001bf6:	492b      	ldr	r1, [pc, #172]	; (8001ca4 <seclectmenu+0xf50>)
 8001bf8:	481c      	ldr	r0, [pc, #112]	; (8001c6c <seclectmenu+0xf18>)
 8001bfa:	f7fe fd6a 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2100      	movs	r1, #0
 8001c02:	481a      	ldr	r0, [pc, #104]	; (8001c6c <seclectmenu+0xf18>)
 8001c04:	f7fe fd0a 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> BACK");
 8001c08:	4924      	ldr	r1, [pc, #144]	; (8001c9c <seclectmenu+0xf48>)
 8001c0a:	4818      	ldr	r0, [pc, #96]	; (8001c6c <seclectmenu+0xf18>)
 8001c0c:	f7fe fd61 	bl	80006d2 <CLCD_WriteString>
										break;
 8001c10:	bf00      	nop
									}
								}
								if (checkMENU() != 0)
 8001c12:	f7ff f821 	bl	8000c58 <checkMENU>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8756 	beq.w	8002aca <seclectmenu+0x1d76>
								{
									exitmenu = 15;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <seclectmenu+0xf34>)
 8001c20:	220f      	movs	r2, #15
 8001c22:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <seclectmenu+0xee0>
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	f000 8699 	beq.w	8002962 <seclectmenu+0x1c0e>
 8001c30:	f000 bf48 	b.w	8002ac4 <seclectmenu+0x1d70>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <seclectmenu+0xf18>)
 8001c36:	f7fe fd63 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	480b      	ldr	r0, [pc, #44]	; (8001c6c <seclectmenu+0xf18>)
 8001c40:	f7fe fcec 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8001c44:	491a      	ldr	r1, [pc, #104]	; (8001cb0 <seclectmenu+0xf5c>)
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <seclectmenu+0xf18>)
 8001c48:	f7fe fd43 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <seclectmenu+0xf18>)
 8001c52:	f7fe fce3 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   GUEST CARD");
 8001c56:	4917      	ldr	r1, [pc, #92]	; (8001cb4 <seclectmenu+0xf60>)
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <seclectmenu+0xf18>)
 8001c5a:	f7fe fd3a 	bl	80006d2 <CLCD_WriteString>
										uint8_t statusadd = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001c66:	f000 be62 	b.w	800292e <seclectmenu+0x1bda>
 8001c6a:	bf00      	nop
 8001c6c:	20000140 	.word	0x20000140
 8001c70:	0800644c 	.word	0x0800644c
 8001c74:	08006540 	.word	0x08006540
 8001c78:	080064a8 	.word	0x080064a8
 8001c7c:	080064b8 	.word	0x080064b8
 8001c80:	080066d4 	.word	0x080066d4
 8001c84:	08006498 	.word	0x08006498
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	080066e4 	.word	0x080066e4
 8001c90:	080066f4 	.word	0x080066f4
 8001c94:	08006704 	.word	0x08006704
 8001c98:	08006714 	.word	0x08006714
 8001c9c:	08006550 	.word	0x08006550
 8001ca0:	08006724 	.word	0x08006724
 8001ca4:	08006734 	.word	0x08006734
 8001ca8:	08006744 	.word	0x08006744
 8001cac:	08006754 	.word	0x08006754
 8001cb0:	08006520 	.word	0x08006520
 8001cb4:	08006530 	.word	0x08006530
										{
											if (exitmenu == 0)
 8001cb8:	4ba7      	ldr	r3, [pc, #668]	; (8001f58 <seclectmenu+0x1204>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d108      	bne.n	8001cd2 <seclectmenu+0xf7e>
											{
												CLCD_Clear(&LCD1);
 8001cc0:	48a6      	ldr	r0, [pc, #664]	; (8001f5c <seclectmenu+0x1208>)
 8001cc2:	f7fe fd1d 	bl	8000700 <CLCD_Clear>
												HAL_Delay(1000);
 8001cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cca:	f001 ff6b 	bl	8003ba4 <HAL_Delay>
												return;
 8001cce:	f000 bf63 	b.w	8002b98 <seclectmenu+0x1e44>
											}
											if (checkSELECT() != 0)
 8001cd2:	f7ff f800 	bl	8000cd6 <checkSELECT>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d054      	beq.n	8001d86 <seclectmenu+0x1032>
											{
												exitmenu = 15;
 8001cdc:	4b9e      	ldr	r3, [pc, #632]	; (8001f58 <seclectmenu+0x1204>)
 8001cde:	220f      	movs	r2, #15
 8001ce0:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001ce2:	7b3b      	ldrb	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001ce8:	7b3b      	ldrb	r3, [r7, #12]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d801      	bhi.n	8001cf2 <seclectmenu+0xf9e>
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	e000      	b.n	8001cf4 <seclectmenu+0xfa0>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001cf6:	7b3b      	ldrb	r3, [r7, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d002      	beq.n	8001d02 <seclectmenu+0xfae>
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d016      	beq.n	8001d2e <seclectmenu+0xfda>
 8001d00:	e02b      	b.n	8001d5a <seclectmenu+0x1006>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001d02:	4896      	ldr	r0, [pc, #600]	; (8001f5c <seclectmenu+0x1208>)
 8001d04:	f7fe fcfc 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4893      	ldr	r0, [pc, #588]	; (8001f5c <seclectmenu+0x1208>)
 8001d0e:	f7fe fc85 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8001d12:	4993      	ldr	r1, [pc, #588]	; (8001f60 <seclectmenu+0x120c>)
 8001d14:	4891      	ldr	r0, [pc, #580]	; (8001f5c <seclectmenu+0x1208>)
 8001d16:	f7fe fcdc 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	488f      	ldr	r0, [pc, #572]	; (8001f5c <seclectmenu+0x1208>)
 8001d20:	f7fe fc7c 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8001d24:	498f      	ldr	r1, [pc, #572]	; (8001f64 <seclectmenu+0x1210>)
 8001d26:	488d      	ldr	r0, [pc, #564]	; (8001f5c <seclectmenu+0x1208>)
 8001d28:	f7fe fcd3 	bl	80006d2 <CLCD_WriteString>
													break;
 8001d2c:	e02b      	b.n	8001d86 <seclectmenu+0x1032>
												case 2:
													CLCD_Clear(&LCD1);
 8001d2e:	488b      	ldr	r0, [pc, #556]	; (8001f5c <seclectmenu+0x1208>)
 8001d30:	f7fe fce6 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	4888      	ldr	r0, [pc, #544]	; (8001f5c <seclectmenu+0x1208>)
 8001d3a:	f7fe fc6f 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8001d3e:	4989      	ldr	r1, [pc, #548]	; (8001f64 <seclectmenu+0x1210>)
 8001d40:	4886      	ldr	r0, [pc, #536]	; (8001f5c <seclectmenu+0x1208>)
 8001d42:	f7fe fcc6 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4884      	ldr	r0, [pc, #528]	; (8001f5c <seclectmenu+0x1208>)
 8001d4c:	f7fe fc66 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8001d50:	4983      	ldr	r1, [pc, #524]	; (8001f60 <seclectmenu+0x120c>)
 8001d52:	4882      	ldr	r0, [pc, #520]	; (8001f5c <seclectmenu+0x1208>)
 8001d54:	f7fe fcbd 	bl	80006d2 <CLCD_WriteString>
													break;
 8001d58:	e015      	b.n	8001d86 <seclectmenu+0x1032>
												default:
													CLCD_Clear(&LCD1);
 8001d5a:	4880      	ldr	r0, [pc, #512]	; (8001f5c <seclectmenu+0x1208>)
 8001d5c:	f7fe fcd0 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	487d      	ldr	r0, [pc, #500]	; (8001f5c <seclectmenu+0x1208>)
 8001d66:	f7fe fc59 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8001d6a:	497e      	ldr	r1, [pc, #504]	; (8001f64 <seclectmenu+0x1210>)
 8001d6c:	487b      	ldr	r0, [pc, #492]	; (8001f5c <seclectmenu+0x1208>)
 8001d6e:	f7fe fcb0 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2100      	movs	r1, #0
 8001d76:	4879      	ldr	r0, [pc, #484]	; (8001f5c <seclectmenu+0x1208>)
 8001d78:	f7fe fc50 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> BACK");
 8001d7c:	497a      	ldr	r1, [pc, #488]	; (8001f68 <seclectmenu+0x1214>)
 8001d7e:	4877      	ldr	r0, [pc, #476]	; (8001f5c <seclectmenu+0x1208>)
 8001d80:	f7fe fca7 	bl	80006d2 <CLCD_WriteString>
													break;
 8001d84:	bf00      	nop
												}
											}
											if (checkMENU() != 0)
 8001d86:	f7fe ff67 	bl	8000c58 <checkMENU>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 85ce 	beq.w	800292e <seclectmenu+0x1bda>
											{
												exitmenu = 15;
 8001d92:	4b71      	ldr	r3, [pc, #452]	; (8001f58 <seclectmenu+0x1204>)
 8001d94:	220f      	movs	r2, #15
 8001d96:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001d98:	7b3b      	ldrb	r3, [r7, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d004      	beq.n	8001da8 <seclectmenu+0x1054>
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	f000 82f3 	beq.w	800238a <seclectmenu+0x1636>
 8001da4:	f000 bdc0 	b.w	8002928 <seclectmenu+0x1bd4>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001da8:	486c      	ldr	r0, [pc, #432]	; (8001f5c <seclectmenu+0x1208>)
 8001daa:	f7fe fca9 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	486a      	ldr	r0, [pc, #424]	; (8001f5c <seclectmenu+0x1208>)
 8001db4:	f7fe fc32 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001db8:	496c      	ldr	r1, [pc, #432]	; (8001f6c <seclectmenu+0x1218>)
 8001dba:	4868      	ldr	r0, [pc, #416]	; (8001f5c <seclectmenu+0x1208>)
 8001dbc:	f7fe fc89 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4865      	ldr	r0, [pc, #404]	; (8001f5c <seclectmenu+0x1208>)
 8001dc6:	f7fe fc29 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8001dca:	4969      	ldr	r1, [pc, #420]	; (8001f70 <seclectmenu+0x121c>)
 8001dcc:	4863      	ldr	r0, [pc, #396]	; (8001f5c <seclectmenu+0x1208>)
 8001dce:	f7fe fc80 	bl	80006d2 <CLCD_WriteString>
													uint8_t statusadd1 = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001dda:	e2bc      	b.n	8002356 <seclectmenu+0x1602>
													{
														if (exitmenu == 0)
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <seclectmenu+0x1204>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <seclectmenu+0x10a2>
														{
															CLCD_Clear(&LCD1);
 8001de4:	485d      	ldr	r0, [pc, #372]	; (8001f5c <seclectmenu+0x1208>)
 8001de6:	f7fe fc8b 	bl	8000700 <CLCD_Clear>
															HAL_Delay(1000);
 8001dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dee:	f001 fed9 	bl	8003ba4 <HAL_Delay>
															return;
 8001df2:	f000 bed1 	b.w	8002b98 <seclectmenu+0x1e44>
														}
														if (checkSELECT() != 0)
 8001df6:	f7fe ff6e 	bl	8000cd6 <checkSELECT>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 808b 	beq.w	8001f18 <seclectmenu+0x11c4>
														{
															exitmenu = 15;
 8001e02:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <seclectmenu+0x1204>)
 8001e04:	220f      	movs	r2, #15
 8001e06:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001e08:	7abb      	ldrb	r3, [r7, #10]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d801      	bhi.n	8001e18 <seclectmenu+0x10c4>
 8001e14:	7abb      	ldrb	r3, [r7, #10]
 8001e16:	e000      	b.n	8001e1a <seclectmenu+0x10c6>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001e1c:	7abb      	ldrb	r3, [r7, #10]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d863      	bhi.n	8001eec <seclectmenu+0x1198>
 8001e24:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <seclectmenu+0x10d8>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e69 	.word	0x08001e69
 8001e34:	08001e95 	.word	0x08001e95
 8001e38:	08001ec1 	.word	0x08001ec1
															{
															case 1:
																CLCD_Clear(&LCD1);
 8001e3c:	4847      	ldr	r0, [pc, #284]	; (8001f5c <seclectmenu+0x1208>)
 8001e3e:	f7fe fc5f 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	4845      	ldr	r0, [pc, #276]	; (8001f5c <seclectmenu+0x1208>)
 8001e48:	f7fe fbe8 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001e4c:	4947      	ldr	r1, [pc, #284]	; (8001f6c <seclectmenu+0x1218>)
 8001e4e:	4843      	ldr	r0, [pc, #268]	; (8001f5c <seclectmenu+0x1208>)
 8001e50:	f7fe fc3f 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2100      	movs	r1, #0
 8001e58:	4840      	ldr	r0, [pc, #256]	; (8001f5c <seclectmenu+0x1208>)
 8001e5a:	f7fe fbdf 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8001e5e:	4944      	ldr	r1, [pc, #272]	; (8001f70 <seclectmenu+0x121c>)
 8001e60:	483e      	ldr	r0, [pc, #248]	; (8001f5c <seclectmenu+0x1208>)
 8001e62:	f7fe fc36 	bl	80006d2 <CLCD_WriteString>
																break;
 8001e66:	e057      	b.n	8001f18 <seclectmenu+0x11c4>
															case 2:
																CLCD_Clear(&LCD1);
 8001e68:	483c      	ldr	r0, [pc, #240]	; (8001f5c <seclectmenu+0x1208>)
 8001e6a:	f7fe fc49 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	483a      	ldr	r0, [pc, #232]	; (8001f5c <seclectmenu+0x1208>)
 8001e74:	f7fe fbd2 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 8001e78:	493e      	ldr	r1, [pc, #248]	; (8001f74 <seclectmenu+0x1220>)
 8001e7a:	4838      	ldr	r0, [pc, #224]	; (8001f5c <seclectmenu+0x1208>)
 8001e7c:	f7fe fc29 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2100      	movs	r1, #0
 8001e84:	4835      	ldr	r0, [pc, #212]	; (8001f5c <seclectmenu+0x1208>)
 8001e86:	f7fe fbc9 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 8001e8a:	493b      	ldr	r1, [pc, #236]	; (8001f78 <seclectmenu+0x1224>)
 8001e8c:	4833      	ldr	r0, [pc, #204]	; (8001f5c <seclectmenu+0x1208>)
 8001e8e:	f7fe fc20 	bl	80006d2 <CLCD_WriteString>
																break;
 8001e92:	e041      	b.n	8001f18 <seclectmenu+0x11c4>
															case 3:
																CLCD_Clear(&LCD1);
 8001e94:	4831      	ldr	r0, [pc, #196]	; (8001f5c <seclectmenu+0x1208>)
 8001e96:	f7fe fc33 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	482f      	ldr	r0, [pc, #188]	; (8001f5c <seclectmenu+0x1208>)
 8001ea0:	f7fe fbbc 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <seclectmenu+0x1228>)
 8001ea6:	482d      	ldr	r0, [pc, #180]	; (8001f5c <seclectmenu+0x1208>)
 8001ea8:	f7fe fc13 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2100      	movs	r1, #0
 8001eb0:	482a      	ldr	r0, [pc, #168]	; (8001f5c <seclectmenu+0x1208>)
 8001eb2:	f7fe fbb3 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8001eb6:	4932      	ldr	r1, [pc, #200]	; (8001f80 <seclectmenu+0x122c>)
 8001eb8:	4828      	ldr	r0, [pc, #160]	; (8001f5c <seclectmenu+0x1208>)
 8001eba:	f7fe fc0a 	bl	80006d2 <CLCD_WriteString>
																break;
 8001ebe:	e02b      	b.n	8001f18 <seclectmenu+0x11c4>
															case 4:
																CLCD_Clear(&LCD1);
 8001ec0:	4826      	ldr	r0, [pc, #152]	; (8001f5c <seclectmenu+0x1208>)
 8001ec2:	f7fe fc1d 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4824      	ldr	r0, [pc, #144]	; (8001f5c <seclectmenu+0x1208>)
 8001ecc:	f7fe fba6 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8001ed0:	492c      	ldr	r1, [pc, #176]	; (8001f84 <seclectmenu+0x1230>)
 8001ed2:	4822      	ldr	r0, [pc, #136]	; (8001f5c <seclectmenu+0x1208>)
 8001ed4:	f7fe fbfd 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2100      	movs	r1, #0
 8001edc:	481f      	ldr	r0, [pc, #124]	; (8001f5c <seclectmenu+0x1208>)
 8001ede:	f7fe fb9d 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 8001ee2:	4929      	ldr	r1, [pc, #164]	; (8001f88 <seclectmenu+0x1234>)
 8001ee4:	481d      	ldr	r0, [pc, #116]	; (8001f5c <seclectmenu+0x1208>)
 8001ee6:	f7fe fbf4 	bl	80006d2 <CLCD_WriteString>
																break;
 8001eea:	e015      	b.n	8001f18 <seclectmenu+0x11c4>
															default:
																CLCD_Clear(&LCD1);
 8001eec:	481b      	ldr	r0, [pc, #108]	; (8001f5c <seclectmenu+0x1208>)
 8001eee:	f7fe fc07 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <seclectmenu+0x1208>)
 8001ef8:	f7fe fb90 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8001efc:	4920      	ldr	r1, [pc, #128]	; (8001f80 <seclectmenu+0x122c>)
 8001efe:	4817      	ldr	r0, [pc, #92]	; (8001f5c <seclectmenu+0x1208>)
 8001f00:	f7fe fbe7 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2100      	movs	r1, #0
 8001f08:	4814      	ldr	r0, [pc, #80]	; (8001f5c <seclectmenu+0x1208>)
 8001f0a:	f7fe fb87 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 8001f0e:	491f      	ldr	r1, [pc, #124]	; (8001f8c <seclectmenu+0x1238>)
 8001f10:	4812      	ldr	r0, [pc, #72]	; (8001f5c <seclectmenu+0x1208>)
 8001f12:	f7fe fbde 	bl	80006d2 <CLCD_WriteString>
																break;
 8001f16:	bf00      	nop
															}
														}
														if (checkMENU() != 0)
 8001f18:	f7fe fe9e 	bl	8000c58 <checkMENU>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8219 	beq.w	8002356 <seclectmenu+0x1602>
														{
															exitmenu = 15;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <seclectmenu+0x1204>)
 8001f26:	220f      	movs	r2, #15
 8001f28:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001f2a:	7b3b      	ldrb	r3, [r7, #12]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	7abb      	ldrb	r3, [r7, #10]
 8001f32:	4413      	add	r3, r2
 8001f34:	713b      	strb	r3, [r7, #4]
															switch (statusadd1)
 8001f36:	7abb      	ldrb	r3, [r7, #10]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	f200 8208 	bhi.w	8002350 <seclectmenu+0x15fc>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <seclectmenu+0x11f4>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f91 	.word	0x08001f91
 8001f4c:	0800206f 	.word	0x0800206f
 8001f50:	0800214d 	.word	0x0800214d
 8001f54:	0800222b 	.word	0x0800222b
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000140 	.word	0x20000140
 8001f60:	08006520 	.word	0x08006520
 8001f64:	0800644c 	.word	0x0800644c
 8001f68:	08006550 	.word	0x08006550
 8001f6c:	08006558 	.word	0x08006558
 8001f70:	0800656c 	.word	0x0800656c
 8001f74:	08006580 	.word	0x08006580
 8001f78:	08006594 	.word	0x08006594
 8001f7c:	080065a8 	.word	0x080065a8
 8001f80:	080065bc 	.word	0x080065bc
 8001f84:	080065d0 	.word	0x080065d0
 8001f88:	080065e4 	.word	0x080065e4
 8001f8c:	08006508 	.word	0x08006508
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001f90:	793b      	ldrb	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f82e 	bl	8002ff4 <CheckKey>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d125      	bne.n	8001fea <seclectmenu+0x1296>
																{
																	CLCD_Clear(&LCD1);
 8001f9e:	48b9      	ldr	r0, [pc, #740]	; (8002284 <seclectmenu+0x1530>)
 8001fa0:	f7fe fbae 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	48b6      	ldr	r0, [pc, #728]	; (8002284 <seclectmenu+0x1530>)
 8001faa:	f7fe fb37 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 1 ");
 8001fae:	49b6      	ldr	r1, [pc, #728]	; (8002288 <seclectmenu+0x1534>)
 8001fb0:	48b4      	ldr	r0, [pc, #720]	; (8002284 <seclectmenu+0x1530>)
 8001fb2:	f7fe fb8e 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8001fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fba:	f001 fdf3 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8001fbe:	48b1      	ldr	r0, [pc, #708]	; (8002284 <seclectmenu+0x1530>)
 8001fc0:	f7fe fb9e 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	48ae      	ldr	r0, [pc, #696]	; (8002284 <seclectmenu+0x1530>)
 8001fca:	f7fe fb27 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001fce:	49af      	ldr	r1, [pc, #700]	; (800228c <seclectmenu+0x1538>)
 8001fd0:	48ac      	ldr	r0, [pc, #688]	; (8002284 <seclectmenu+0x1530>)
 8001fd2:	f7fe fb7e 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2100      	movs	r1, #0
 8001fda:	48aa      	ldr	r0, [pc, #680]	; (8002284 <seclectmenu+0x1530>)
 8001fdc:	f7fe fb1e 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8001fe0:	49ab      	ldr	r1, [pc, #684]	; (8002290 <seclectmenu+0x153c>)
 8001fe2:	48a8      	ldr	r0, [pc, #672]	; (8002284 <seclectmenu+0x1530>)
 8001fe4:	f7fe fb75 	bl	80006d2 <CLCD_WriteString>
 8001fe8:	e1b5      	b.n	8002356 <seclectmenu+0x1602>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 8001fea:	793b      	ldrb	r3, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 f801 	bl	8002ff4 <CheckKey>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 f82b 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 8001ffa:	48a2      	ldr	r0, [pc, #648]	; (8002284 <seclectmenu+0x1530>)
 8001ffc:	f7fe fb80 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	489f      	ldr	r0, [pc, #636]	; (8002284 <seclectmenu+0x1530>)
 8002006:	f7fe fb09 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 1 DELETION ");
 800200a:	49a2      	ldr	r1, [pc, #648]	; (8002294 <seclectmenu+0x1540>)
 800200c:	489d      	ldr	r0, [pc, #628]	; (8002284 <seclectmenu+0x1530>)
 800200e:	f7fe fb60 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002012:	2201      	movs	r2, #1
 8002014:	2100      	movs	r1, #0
 8002016:	489b      	ldr	r0, [pc, #620]	; (8002284 <seclectmenu+0x1530>)
 8002018:	f7fe fb00 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 800201c:	499e      	ldr	r1, [pc, #632]	; (8002298 <seclectmenu+0x1544>)
 800201e:	4899      	ldr	r0, [pc, #612]	; (8002284 <seclectmenu+0x1530>)
 8002020:	f7fe fb57 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002028:	f001 fdbc 	bl	8003ba4 <HAL_Delay>
																	if (checkcountUID() == 0)
 800202c:	f000 fe38 	bl	8002ca0 <checkcountUID>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <seclectmenu+0x12ee>
																	{
																		startadd();
 8002036:	f001 f819 	bl	800306c <startadd>
																		exitmenu = 0;
 800203a:	4b98      	ldr	r3, [pc, #608]	; (800229c <seclectmenu+0x1548>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e189      	b.n	8002356 <seclectmenu+0x1602>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 8002042:	4890      	ldr	r0, [pc, #576]	; (8002284 <seclectmenu+0x1530>)
 8002044:	f7fe fb5c 	bl	8000700 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	488d      	ldr	r0, [pc, #564]	; (8002284 <seclectmenu+0x1530>)
 800204e:	f7fe fae5 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8002052:	498e      	ldr	r1, [pc, #568]	; (800228c <seclectmenu+0x1538>)
 8002054:	488b      	ldr	r0, [pc, #556]	; (8002284 <seclectmenu+0x1530>)
 8002056:	f7fe fb3c 	bl	80006d2 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 800205a:	2201      	movs	r2, #1
 800205c:	2100      	movs	r1, #0
 800205e:	4889      	ldr	r0, [pc, #548]	; (8002284 <seclectmenu+0x1530>)
 8002060:	f7fe fadc 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8002064:	498a      	ldr	r1, [pc, #552]	; (8002290 <seclectmenu+0x153c>)
 8002066:	4887      	ldr	r0, [pc, #540]	; (8002284 <seclectmenu+0x1530>)
 8002068:	f7fe fb33 	bl	80006d2 <CLCD_WriteString>
																	}
																}
																break;
 800206c:	e173      	b.n	8002356 <seclectmenu+0x1602>
															case 2:
																if (CheckKey(keyadd1) == 0)
 800206e:	793b      	ldrb	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 ffbf 	bl	8002ff4 <CheckKey>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d125      	bne.n	80020c8 <seclectmenu+0x1374>
																{
																	CLCD_Clear(&LCD1);
 800207c:	4881      	ldr	r0, [pc, #516]	; (8002284 <seclectmenu+0x1530>)
 800207e:	f7fe fb3f 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	487f      	ldr	r0, [pc, #508]	; (8002284 <seclectmenu+0x1530>)
 8002088:	f7fe fac8 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 2 ");
 800208c:	4984      	ldr	r1, [pc, #528]	; (80022a0 <seclectmenu+0x154c>)
 800208e:	487d      	ldr	r0, [pc, #500]	; (8002284 <seclectmenu+0x1530>)
 8002090:	f7fe fb1f 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002098:	f001 fd84 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800209c:	4879      	ldr	r0, [pc, #484]	; (8002284 <seclectmenu+0x1530>)
 800209e:	f7fe fb2f 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	4877      	ldr	r0, [pc, #476]	; (8002284 <seclectmenu+0x1530>)
 80020a8:	f7fe fab8 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 80020ac:	497d      	ldr	r1, [pc, #500]	; (80022a4 <seclectmenu+0x1550>)
 80020ae:	4875      	ldr	r0, [pc, #468]	; (8002284 <seclectmenu+0x1530>)
 80020b0:	f7fe fb0f 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2100      	movs	r1, #0
 80020b8:	4872      	ldr	r0, [pc, #456]	; (8002284 <seclectmenu+0x1530>)
 80020ba:	f7fe faaf 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 80020be:	497a      	ldr	r1, [pc, #488]	; (80022a8 <seclectmenu+0x1554>)
 80020c0:	4870      	ldr	r0, [pc, #448]	; (8002284 <seclectmenu+0x1530>)
 80020c2:	f7fe fb06 	bl	80006d2 <CLCD_WriteString>
 80020c6:	e146      	b.n	8002356 <seclectmenu+0x1602>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 80020c8:	793b      	ldrb	r3, [r7, #4]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 ff92 	bl	8002ff4 <CheckKey>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 ffbc 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 80020d8:	486a      	ldr	r0, [pc, #424]	; (8002284 <seclectmenu+0x1530>)
 80020da:	f7fe fb11 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	4868      	ldr	r0, [pc, #416]	; (8002284 <seclectmenu+0x1530>)
 80020e4:	f7fe fa9a 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 2 DELETION ");
 80020e8:	4970      	ldr	r1, [pc, #448]	; (80022ac <seclectmenu+0x1558>)
 80020ea:	4866      	ldr	r0, [pc, #408]	; (8002284 <seclectmenu+0x1530>)
 80020ec:	f7fe faf1 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2100      	movs	r1, #0
 80020f4:	4863      	ldr	r0, [pc, #396]	; (8002284 <seclectmenu+0x1530>)
 80020f6:	f7fe fa91 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80020fa:	4967      	ldr	r1, [pc, #412]	; (8002298 <seclectmenu+0x1544>)
 80020fc:	4861      	ldr	r0, [pc, #388]	; (8002284 <seclectmenu+0x1530>)
 80020fe:	f7fe fae8 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002106:	f001 fd4d 	bl	8003ba4 <HAL_Delay>
																	if (checkcountUID() == 0)
 800210a:	f000 fdc9 	bl	8002ca0 <checkcountUID>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <seclectmenu+0x13cc>
																	{
																		startadd();
 8002114:	f000 ffaa 	bl	800306c <startadd>
																		exitmenu = 0;
 8002118:	4b60      	ldr	r3, [pc, #384]	; (800229c <seclectmenu+0x1548>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e11a      	b.n	8002356 <seclectmenu+0x1602>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 8002120:	4858      	ldr	r0, [pc, #352]	; (8002284 <seclectmenu+0x1530>)
 8002122:	f7fe faed 	bl	8000700 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	4856      	ldr	r0, [pc, #344]	; (8002284 <seclectmenu+0x1530>)
 800212c:	f7fe fa76 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 8002130:	495c      	ldr	r1, [pc, #368]	; (80022a4 <seclectmenu+0x1550>)
 8002132:	4854      	ldr	r0, [pc, #336]	; (8002284 <seclectmenu+0x1530>)
 8002134:	f7fe facd 	bl	80006d2 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002138:	2201      	movs	r2, #1
 800213a:	2100      	movs	r1, #0
 800213c:	4851      	ldr	r0, [pc, #324]	; (8002284 <seclectmenu+0x1530>)
 800213e:	f7fe fa6d 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 8002142:	4959      	ldr	r1, [pc, #356]	; (80022a8 <seclectmenu+0x1554>)
 8002144:	484f      	ldr	r0, [pc, #316]	; (8002284 <seclectmenu+0x1530>)
 8002146:	f7fe fac4 	bl	80006d2 <CLCD_WriteString>
																	}
																}
																break;
 800214a:	e104      	b.n	8002356 <seclectmenu+0x1602>
															case 3:
																if (CheckKey(keyadd1) == 0)
 800214c:	793b      	ldrb	r3, [r7, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 ff50 	bl	8002ff4 <CheckKey>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d125      	bne.n	80021a6 <seclectmenu+0x1452>
																{
																	CLCD_Clear(&LCD1);
 800215a:	484a      	ldr	r0, [pc, #296]	; (8002284 <seclectmenu+0x1530>)
 800215c:	f7fe fad0 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	4847      	ldr	r0, [pc, #284]	; (8002284 <seclectmenu+0x1530>)
 8002166:	f7fe fa59 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 3 ");
 800216a:	4951      	ldr	r1, [pc, #324]	; (80022b0 <seclectmenu+0x155c>)
 800216c:	4845      	ldr	r0, [pc, #276]	; (8002284 <seclectmenu+0x1530>)
 800216e:	f7fe fab0 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002176:	f001 fd15 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800217a:	4842      	ldr	r0, [pc, #264]	; (8002284 <seclectmenu+0x1530>)
 800217c:	f7fe fac0 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	483f      	ldr	r0, [pc, #252]	; (8002284 <seclectmenu+0x1530>)
 8002186:	f7fe fa49 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 800218a:	494a      	ldr	r1, [pc, #296]	; (80022b4 <seclectmenu+0x1560>)
 800218c:	483d      	ldr	r0, [pc, #244]	; (8002284 <seclectmenu+0x1530>)
 800218e:	f7fe faa0 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	2100      	movs	r1, #0
 8002196:	483b      	ldr	r0, [pc, #236]	; (8002284 <seclectmenu+0x1530>)
 8002198:	f7fe fa40 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 800219c:	4946      	ldr	r1, [pc, #280]	; (80022b8 <seclectmenu+0x1564>)
 800219e:	4839      	ldr	r0, [pc, #228]	; (8002284 <seclectmenu+0x1530>)
 80021a0:	f7fe fa97 	bl	80006d2 <CLCD_WriteString>
 80021a4:	e0d7      	b.n	8002356 <seclectmenu+0x1602>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 80021a6:	793b      	ldrb	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 ff23 	bl	8002ff4 <CheckKey>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 ff4d 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 80021b6:	4833      	ldr	r0, [pc, #204]	; (8002284 <seclectmenu+0x1530>)
 80021b8:	f7fe faa2 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	4830      	ldr	r0, [pc, #192]	; (8002284 <seclectmenu+0x1530>)
 80021c2:	f7fe fa2b 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 3 DELETION ");
 80021c6:	493d      	ldr	r1, [pc, #244]	; (80022bc <seclectmenu+0x1568>)
 80021c8:	482e      	ldr	r0, [pc, #184]	; (8002284 <seclectmenu+0x1530>)
 80021ca:	f7fe fa82 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80021ce:	2201      	movs	r2, #1
 80021d0:	2100      	movs	r1, #0
 80021d2:	482c      	ldr	r0, [pc, #176]	; (8002284 <seclectmenu+0x1530>)
 80021d4:	f7fe fa22 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80021d8:	492f      	ldr	r1, [pc, #188]	; (8002298 <seclectmenu+0x1544>)
 80021da:	482a      	ldr	r0, [pc, #168]	; (8002284 <seclectmenu+0x1530>)
 80021dc:	f7fe fa79 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 80021e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021e4:	f001 fcde 	bl	8003ba4 <HAL_Delay>
																	if (checkcountUID() == 0)
 80021e8:	f000 fd5a 	bl	8002ca0 <checkcountUID>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <seclectmenu+0x14aa>
																	{
																		startadd();
 80021f2:	f000 ff3b 	bl	800306c <startadd>
																		exitmenu = 0;
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <seclectmenu+0x1548>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e0ab      	b.n	8002356 <seclectmenu+0x1602>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 80021fe:	4821      	ldr	r0, [pc, #132]	; (8002284 <seclectmenu+0x1530>)
 8002200:	f7fe fa7e 	bl	8000700 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	481e      	ldr	r0, [pc, #120]	; (8002284 <seclectmenu+0x1530>)
 800220a:	f7fe fa07 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 800220e:	4929      	ldr	r1, [pc, #164]	; (80022b4 <seclectmenu+0x1560>)
 8002210:	481c      	ldr	r0, [pc, #112]	; (8002284 <seclectmenu+0x1530>)
 8002212:	f7fe fa5e 	bl	80006d2 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002216:	2201      	movs	r2, #1
 8002218:	2100      	movs	r1, #0
 800221a:	481a      	ldr	r0, [pc, #104]	; (8002284 <seclectmenu+0x1530>)
 800221c:	f7fe f9fe 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8002220:	4925      	ldr	r1, [pc, #148]	; (80022b8 <seclectmenu+0x1564>)
 8002222:	4818      	ldr	r0, [pc, #96]	; (8002284 <seclectmenu+0x1530>)
 8002224:	f7fe fa55 	bl	80006d2 <CLCD_WriteString>
																	}
																}
																break;
 8002228:	e095      	b.n	8002356 <seclectmenu+0x1602>
															case 4:
																if (CheckKey(keyadd1) == 0)
 800222a:	793b      	ldrb	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fee1 	bl	8002ff4 <CheckKey>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d149      	bne.n	80022cc <seclectmenu+0x1578>
																{
																	CLCD_Clear(&LCD1);
 8002238:	4812      	ldr	r0, [pc, #72]	; (8002284 <seclectmenu+0x1530>)
 800223a:	f7fe fa61 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	4810      	ldr	r0, [pc, #64]	; (8002284 <seclectmenu+0x1530>)
 8002244:	f7fe f9ea 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 4 ");
 8002248:	491d      	ldr	r1, [pc, #116]	; (80022c0 <seclectmenu+0x156c>)
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <seclectmenu+0x1530>)
 800224c:	f7fe fa41 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002254:	f001 fca6 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002258:	480a      	ldr	r0, [pc, #40]	; (8002284 <seclectmenu+0x1530>)
 800225a:	f7fe fa51 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	4808      	ldr	r0, [pc, #32]	; (8002284 <seclectmenu+0x1530>)
 8002264:	f7fe f9da 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8002268:	4916      	ldr	r1, [pc, #88]	; (80022c4 <seclectmenu+0x1570>)
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <seclectmenu+0x1530>)
 800226c:	f7fe fa31 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002270:	2201      	movs	r2, #1
 8002272:	2100      	movs	r1, #0
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <seclectmenu+0x1530>)
 8002276:	f7fe f9d1 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 800227a:	4913      	ldr	r1, [pc, #76]	; (80022c8 <seclectmenu+0x1574>)
 800227c:	4801      	ldr	r0, [pc, #4]	; (8002284 <seclectmenu+0x1530>)
 800227e:	f7fe fa28 	bl	80006d2 <CLCD_WriteString>
 8002282:	e068      	b.n	8002356 <seclectmenu+0x1602>
 8002284:	20000140 	.word	0x20000140
 8002288:	08006764 	.word	0x08006764
 800228c:	08006558 	.word	0x08006558
 8002290:	0800656c 	.word	0x0800656c
 8002294:	08006778 	.word	0x08006778
 8002298:	0800678c 	.word	0x0800678c
 800229c:	20000000 	.word	0x20000000
 80022a0:	0800679c 	.word	0x0800679c
 80022a4:	08006580 	.word	0x08006580
 80022a8:	08006594 	.word	0x08006594
 80022ac:	080067b0 	.word	0x080067b0
 80022b0:	080067c4 	.word	0x080067c4
 80022b4:	080065a8 	.word	0x080065a8
 80022b8:	080065bc 	.word	0x080065bc
 80022bc:	080067d8 	.word	0x080067d8
 80022c0:	080067ec 	.word	0x080067ec
 80022c4:	080065d0 	.word	0x080065d0
 80022c8:	080065e4 	.word	0x080065e4
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 80022cc:	793b      	ldrb	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fe90 	bl	8002ff4 <CheckKey>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 feba 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 80022dc:	48ad      	ldr	r0, [pc, #692]	; (8002594 <seclectmenu+0x1840>)
 80022de:	f7fe fa0f 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	48ab      	ldr	r0, [pc, #684]	; (8002594 <seclectmenu+0x1840>)
 80022e8:	f7fe f998 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 4 DELETION ");
 80022ec:	49aa      	ldr	r1, [pc, #680]	; (8002598 <seclectmenu+0x1844>)
 80022ee:	48a9      	ldr	r0, [pc, #676]	; (8002594 <seclectmenu+0x1840>)
 80022f0:	f7fe f9ef 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2100      	movs	r1, #0
 80022f8:	48a6      	ldr	r0, [pc, #664]	; (8002594 <seclectmenu+0x1840>)
 80022fa:	f7fe f98f 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80022fe:	49a7      	ldr	r1, [pc, #668]	; (800259c <seclectmenu+0x1848>)
 8002300:	48a4      	ldr	r0, [pc, #656]	; (8002594 <seclectmenu+0x1840>)
 8002302:	f7fe f9e6 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800230a:	f001 fc4b 	bl	8003ba4 <HAL_Delay>
																	if (checkcountUID() == 0)
 800230e:	f000 fcc7 	bl	8002ca0 <checkcountUID>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <seclectmenu+0x15d0>
																	{
																		startadd();
 8002318:	f000 fea8 	bl	800306c <startadd>
																		exitmenu = 0;
 800231c:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <seclectmenu+0x184c>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e018      	b.n	8002356 <seclectmenu+0x1602>
																	}
																	else
																	{
																		CLCD_Clear(&LCD1);
 8002324:	489b      	ldr	r0, [pc, #620]	; (8002594 <seclectmenu+0x1840>)
 8002326:	f7fe f9eb 	bl	8000700 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	4899      	ldr	r0, [pc, #612]	; (8002594 <seclectmenu+0x1840>)
 8002330:	f7fe f974 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8002334:	499b      	ldr	r1, [pc, #620]	; (80025a4 <seclectmenu+0x1850>)
 8002336:	4897      	ldr	r0, [pc, #604]	; (8002594 <seclectmenu+0x1840>)
 8002338:	f7fe f9cb 	bl	80006d2 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 800233c:	2201      	movs	r2, #1
 800233e:	2100      	movs	r1, #0
 8002340:	4894      	ldr	r0, [pc, #592]	; (8002594 <seclectmenu+0x1840>)
 8002342:	f7fe f96b 	bl	800061c <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    BACK ");
 8002346:	4998      	ldr	r1, [pc, #608]	; (80025a8 <seclectmenu+0x1854>)
 8002348:	4892      	ldr	r0, [pc, #584]	; (8002594 <seclectmenu+0x1840>)
 800234a:	f7fe f9c2 	bl	80006d2 <CLCD_WriteString>
																	}
																}
																break;
 800234e:	e002      	b.n	8002356 <seclectmenu+0x1602>
															default:
																back11 = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	727b      	strb	r3, [r7, #9]
																break;
 8002354:	bf00      	nop
													while (back11 == 1)
 8002356:	7a7b      	ldrb	r3, [r7, #9]
 8002358:	2b01      	cmp	r3, #1
 800235a:	f43f ad3f 	beq.w	8001ddc <seclectmenu+0x1088>
															}
														}
													}
													CLCD_Clear(&LCD1);
 800235e:	488d      	ldr	r0, [pc, #564]	; (8002594 <seclectmenu+0x1840>)
 8002360:	f7fe f9ce 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	488a      	ldr	r0, [pc, #552]	; (8002594 <seclectmenu+0x1840>)
 800236a:	f7fe f957 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 800236e:	498f      	ldr	r1, [pc, #572]	; (80025ac <seclectmenu+0x1858>)
 8002370:	4888      	ldr	r0, [pc, #544]	; (8002594 <seclectmenu+0x1840>)
 8002372:	f7fe f9ae 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002376:	2201      	movs	r2, #1
 8002378:	2100      	movs	r1, #0
 800237a:	4886      	ldr	r0, [pc, #536]	; (8002594 <seclectmenu+0x1840>)
 800237c:	f7fe f94e 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   GUEST CARD");
 8002380:	498b      	ldr	r1, [pc, #556]	; (80025b0 <seclectmenu+0x185c>)
 8002382:	4884      	ldr	r0, [pc, #528]	; (8002594 <seclectmenu+0x1840>)
 8002384:	f7fe f9a5 	bl	80006d2 <CLCD_WriteString>
													break;
 8002388:	e2d1      	b.n	800292e <seclectmenu+0x1bda>
												case 2:
													CLCD_Clear(&LCD1);
 800238a:	4882      	ldr	r0, [pc, #520]	; (8002594 <seclectmenu+0x1840>)
 800238c:	f7fe f9b8 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	487f      	ldr	r0, [pc, #508]	; (8002594 <seclectmenu+0x1840>)
 8002396:	f7fe f941 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  GUEST 1 ");
 800239a:	4986      	ldr	r1, [pc, #536]	; (80025b4 <seclectmenu+0x1860>)
 800239c:	487d      	ldr	r0, [pc, #500]	; (8002594 <seclectmenu+0x1840>)
 800239e:	f7fe f998 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80023a2:	2201      	movs	r2, #1
 80023a4:	2100      	movs	r1, #0
 80023a6:	487b      	ldr	r0, [pc, #492]	; (8002594 <seclectmenu+0x1840>)
 80023a8:	f7fe f938 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 80023ac:	4982      	ldr	r1, [pc, #520]	; (80025b8 <seclectmenu+0x1864>)
 80023ae:	4879      	ldr	r0, [pc, #484]	; (8002594 <seclectmenu+0x1840>)
 80023b0:	f7fe f98f 	bl	80006d2 <CLCD_WriteString>
													uint8_t statusadd2 = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 80023bc:	e274      	b.n	80028a8 <seclectmenu+0x1b54>
													{
														if (exitmenu == 0)
 80023be:	4b78      	ldr	r3, [pc, #480]	; (80025a0 <seclectmenu+0x184c>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <seclectmenu+0x1682>
														{
															CLCD_Clear(&LCD1);
 80023c6:	4873      	ldr	r0, [pc, #460]	; (8002594 <seclectmenu+0x1840>)
 80023c8:	f7fe f99a 	bl	8000700 <CLCD_Clear>
															HAL_Delay(1000);
 80023cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023d0:	f001 fbe8 	bl	8003ba4 <HAL_Delay>
															return;
 80023d4:	e3e0      	b.n	8002b98 <seclectmenu+0x1e44>
														}
														if (checkSELECT() != 0)
 80023d6:	f7fe fc7e 	bl	8000cd6 <checkSELECT>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 808b 	beq.w	80024f8 <seclectmenu+0x17a4>
														{
															exitmenu = 15;
 80023e2:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <seclectmenu+0x184c>)
 80023e4:	220f      	movs	r2, #15
 80023e6:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 80023e8:	7a3b      	ldrb	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 80023ee:	7a3b      	ldrb	r3, [r7, #8]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d801      	bhi.n	80023f8 <seclectmenu+0x16a4>
 80023f4:	7a3b      	ldrb	r3, [r7, #8]
 80023f6:	e000      	b.n	80023fa <seclectmenu+0x16a6>
 80023f8:	2300      	movs	r3, #0
 80023fa:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 80023fc:	7a3b      	ldrb	r3, [r7, #8]
 80023fe:	3b01      	subs	r3, #1
 8002400:	2b03      	cmp	r3, #3
 8002402:	d863      	bhi.n	80024cc <seclectmenu+0x1778>
 8002404:	a201      	add	r2, pc, #4	; (adr r2, 800240c <seclectmenu+0x16b8>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	0800241d 	.word	0x0800241d
 8002410:	08002449 	.word	0x08002449
 8002414:	08002475 	.word	0x08002475
 8002418:	080024a1 	.word	0x080024a1
															{
															case 1:
																CLCD_Clear(&LCD1);
 800241c:	485d      	ldr	r0, [pc, #372]	; (8002594 <seclectmenu+0x1840>)
 800241e:	f7fe f96f 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	485b      	ldr	r0, [pc, #364]	; (8002594 <seclectmenu+0x1840>)
 8002428:	f7fe f8f8 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 800242c:	4963      	ldr	r1, [pc, #396]	; (80025bc <seclectmenu+0x1868>)
 800242e:	4859      	ldr	r0, [pc, #356]	; (8002594 <seclectmenu+0x1840>)
 8002430:	f7fe f94f 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002434:	2201      	movs	r2, #1
 8002436:	2100      	movs	r1, #0
 8002438:	4856      	ldr	r0, [pc, #344]	; (8002594 <seclectmenu+0x1840>)
 800243a:	f7fe f8ef 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 800243e:	495e      	ldr	r1, [pc, #376]	; (80025b8 <seclectmenu+0x1864>)
 8002440:	4854      	ldr	r0, [pc, #336]	; (8002594 <seclectmenu+0x1840>)
 8002442:	f7fe f946 	bl	80006d2 <CLCD_WriteString>
																break;
 8002446:	e057      	b.n	80024f8 <seclectmenu+0x17a4>
															case 2:
																CLCD_Clear(&LCD1);
 8002448:	4852      	ldr	r0, [pc, #328]	; (8002594 <seclectmenu+0x1840>)
 800244a:	f7fe f959 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	4850      	ldr	r0, [pc, #320]	; (8002594 <seclectmenu+0x1840>)
 8002454:	f7fe f8e2 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 8002458:	4959      	ldr	r1, [pc, #356]	; (80025c0 <seclectmenu+0x186c>)
 800245a:	484e      	ldr	r0, [pc, #312]	; (8002594 <seclectmenu+0x1840>)
 800245c:	f7fe f939 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002460:	2201      	movs	r2, #1
 8002462:	2100      	movs	r1, #0
 8002464:	484b      	ldr	r0, [pc, #300]	; (8002594 <seclectmenu+0x1840>)
 8002466:	f7fe f8d9 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 800246a:	4956      	ldr	r1, [pc, #344]	; (80025c4 <seclectmenu+0x1870>)
 800246c:	4849      	ldr	r0, [pc, #292]	; (8002594 <seclectmenu+0x1840>)
 800246e:	f7fe f930 	bl	80006d2 <CLCD_WriteString>
																break;
 8002472:	e041      	b.n	80024f8 <seclectmenu+0x17a4>
															case 3:
																CLCD_Clear(&LCD1);
 8002474:	4847      	ldr	r0, [pc, #284]	; (8002594 <seclectmenu+0x1840>)
 8002476:	f7fe f943 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	4845      	ldr	r0, [pc, #276]	; (8002594 <seclectmenu+0x1840>)
 8002480:	f7fe f8cc 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 8002484:	4950      	ldr	r1, [pc, #320]	; (80025c8 <seclectmenu+0x1874>)
 8002486:	4843      	ldr	r0, [pc, #268]	; (8002594 <seclectmenu+0x1840>)
 8002488:	f7fe f923 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 800248c:	2201      	movs	r2, #1
 800248e:	2100      	movs	r1, #0
 8002490:	4840      	ldr	r0, [pc, #256]	; (8002594 <seclectmenu+0x1840>)
 8002492:	f7fe f8c3 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 8002496:	494d      	ldr	r1, [pc, #308]	; (80025cc <seclectmenu+0x1878>)
 8002498:	483e      	ldr	r0, [pc, #248]	; (8002594 <seclectmenu+0x1840>)
 800249a:	f7fe f91a 	bl	80006d2 <CLCD_WriteString>
																break;
 800249e:	e02b      	b.n	80024f8 <seclectmenu+0x17a4>
															case 4:
																CLCD_Clear(&LCD1);
 80024a0:	483c      	ldr	r0, [pc, #240]	; (8002594 <seclectmenu+0x1840>)
 80024a2:	f7fe f92d 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	483a      	ldr	r0, [pc, #232]	; (8002594 <seclectmenu+0x1840>)
 80024ac:	f7fe f8b6 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 80024b0:	4947      	ldr	r1, [pc, #284]	; (80025d0 <seclectmenu+0x187c>)
 80024b2:	4838      	ldr	r0, [pc, #224]	; (8002594 <seclectmenu+0x1840>)
 80024b4:	f7fe f90d 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80024b8:	2201      	movs	r2, #1
 80024ba:	2100      	movs	r1, #0
 80024bc:	4835      	ldr	r0, [pc, #212]	; (8002594 <seclectmenu+0x1840>)
 80024be:	f7fe f8ad 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 80024c2:	4939      	ldr	r1, [pc, #228]	; (80025a8 <seclectmenu+0x1854>)
 80024c4:	4833      	ldr	r0, [pc, #204]	; (8002594 <seclectmenu+0x1840>)
 80024c6:	f7fe f904 	bl	80006d2 <CLCD_WriteString>
																break;
 80024ca:	e015      	b.n	80024f8 <seclectmenu+0x17a4>
															default:
																CLCD_Clear(&LCD1);
 80024cc:	4831      	ldr	r0, [pc, #196]	; (8002594 <seclectmenu+0x1840>)
 80024ce:	f7fe f917 	bl	8000700 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	482f      	ldr	r0, [pc, #188]	; (8002594 <seclectmenu+0x1840>)
 80024d8:	f7fe f8a0 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 80024dc:	493b      	ldr	r1, [pc, #236]	; (80025cc <seclectmenu+0x1878>)
 80024de:	482d      	ldr	r0, [pc, #180]	; (8002594 <seclectmenu+0x1840>)
 80024e0:	f7fe f8f7 	bl	80006d2 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80024e4:	2201      	movs	r2, #1
 80024e6:	2100      	movs	r1, #0
 80024e8:	482a      	ldr	r0, [pc, #168]	; (8002594 <seclectmenu+0x1840>)
 80024ea:	f7fe f897 	bl	800061c <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 80024ee:	4939      	ldr	r1, [pc, #228]	; (80025d4 <seclectmenu+0x1880>)
 80024f0:	4828      	ldr	r0, [pc, #160]	; (8002594 <seclectmenu+0x1840>)
 80024f2:	f7fe f8ee 	bl	80006d2 <CLCD_WriteString>
																break;
 80024f6:	bf00      	nop
															}
														}
														if (checkMENU() != 0)
 80024f8:	f7fe fbae 	bl	8000c58 <checkMENU>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 81d2 	beq.w	80028a8 <seclectmenu+0x1b54>
														{
															exitmenu = 15;
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <seclectmenu+0x184c>)
 8002506:	220f      	movs	r2, #15
 8002508:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800250a:	7b3b      	ldrb	r3, [r7, #12]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	b2da      	uxtb	r2, r3
 8002510:	7a3b      	ldrb	r3, [r7, #8]
 8002512:	4413      	add	r3, r2
 8002514:	717b      	strb	r3, [r7, #5]
															switch (statusadd2)
 8002516:	7a3b      	ldrb	r3, [r7, #8]
 8002518:	3b01      	subs	r3, #1
 800251a:	2b03      	cmp	r3, #3
 800251c:	f200 81c1 	bhi.w	80028a2 <seclectmenu+0x1b4e>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <seclectmenu+0x17d4>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	08002539 	.word	0x08002539
 800252c:	0800264b 	.word	0x0800264b
 8002530:	08002713 	.word	0x08002713
 8002534:	080027db 	.word	0x080027db
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8002538:	797b      	ldrb	r3, [r7, #5]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fd5a 	bl	8002ff4 <CheckKey>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d14a      	bne.n	80025dc <seclectmenu+0x1888>
																{
																	CLCD_Clear(&LCD1);
 8002546:	4813      	ldr	r0, [pc, #76]	; (8002594 <seclectmenu+0x1840>)
 8002548:	f7fe f8da 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	2100      	movs	r1, #0
 8002550:	4810      	ldr	r0, [pc, #64]	; (8002594 <seclectmenu+0x1840>)
 8002552:	f7fe f863 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 1 ");
 8002556:	4920      	ldr	r1, [pc, #128]	; (80025d8 <seclectmenu+0x1884>)
 8002558:	480e      	ldr	r0, [pc, #56]	; (8002594 <seclectmenu+0x1840>)
 800255a:	f7fe f8ba 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 800255e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002562:	f001 fb1f 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002566:	480b      	ldr	r0, [pc, #44]	; (8002594 <seclectmenu+0x1840>)
 8002568:	f7fe f8ca 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800256c:	2200      	movs	r2, #0
 800256e:	2100      	movs	r1, #0
 8002570:	4808      	ldr	r0, [pc, #32]	; (8002594 <seclectmenu+0x1840>)
 8002572:	f7fe f853 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 8002576:	4911      	ldr	r1, [pc, #68]	; (80025bc <seclectmenu+0x1868>)
 8002578:	4806      	ldr	r0, [pc, #24]	; (8002594 <seclectmenu+0x1840>)
 800257a:	f7fe f8aa 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800257e:	2201      	movs	r2, #1
 8002580:	2100      	movs	r1, #0
 8002582:	4804      	ldr	r0, [pc, #16]	; (8002594 <seclectmenu+0x1840>)
 8002584:	f7fe f84a 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 8002588:	490b      	ldr	r1, [pc, #44]	; (80025b8 <seclectmenu+0x1864>)
 800258a:	4802      	ldr	r0, [pc, #8]	; (8002594 <seclectmenu+0x1840>)
 800258c:	f7fe f8a1 	bl	80006d2 <CLCD_WriteString>
 8002590:	e18a      	b.n	80028a8 <seclectmenu+0x1b54>
 8002592:	bf00      	nop
 8002594:	20000140 	.word	0x20000140
 8002598:	08006800 	.word	0x08006800
 800259c:	0800678c 	.word	0x0800678c
 80025a0:	20000000 	.word	0x20000000
 80025a4:	080065d0 	.word	0x080065d0
 80025a8:	080065e4 	.word	0x080065e4
 80025ac:	08006520 	.word	0x08006520
 80025b0:	08006530 	.word	0x08006530
 80025b4:	08006814 	.word	0x08006814
 80025b8:	08006630 	.word	0x08006630
 80025bc:	0800661c 	.word	0x0800661c
 80025c0:	08006644 	.word	0x08006644
 80025c4:	08006658 	.word	0x08006658
 80025c8:	0800666c 	.word	0x0800666c
 80025cc:	08006680 	.word	0x08006680
 80025d0:	08006694 	.word	0x08006694
 80025d4:	08006508 	.word	0x08006508
 80025d8:	08006824 	.word	0x08006824
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 80025dc:	797b      	ldrb	r3, [r7, #5]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fd08 	bl	8002ff4 <CheckKey>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fd32 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 80025ec:	48bb      	ldr	r0, [pc, #748]	; (80028dc <seclectmenu+0x1b88>)
 80025ee:	f7fe f887 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	48b9      	ldr	r0, [pc, #740]	; (80028dc <seclectmenu+0x1b88>)
 80025f8:	f7fe f810 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 1 DELETION ");
 80025fc:	49b8      	ldr	r1, [pc, #736]	; (80028e0 <seclectmenu+0x1b8c>)
 80025fe:	48b7      	ldr	r0, [pc, #732]	; (80028dc <seclectmenu+0x1b88>)
 8002600:	f7fe f867 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002604:	2201      	movs	r2, #1
 8002606:	2100      	movs	r1, #0
 8002608:	48b4      	ldr	r0, [pc, #720]	; (80028dc <seclectmenu+0x1b88>)
 800260a:	f7fe f807 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 800260e:	49b5      	ldr	r1, [pc, #724]	; (80028e4 <seclectmenu+0x1b90>)
 8002610:	48b2      	ldr	r0, [pc, #712]	; (80028dc <seclectmenu+0x1b88>)
 8002612:	f7fe f85e 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800261a:	f001 fac3 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800261e:	48af      	ldr	r0, [pc, #700]	; (80028dc <seclectmenu+0x1b88>)
 8002620:	f7fe f86e 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	48ac      	ldr	r0, [pc, #688]	; (80028dc <seclectmenu+0x1b88>)
 800262a:	f7fd fff7 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 800262e:	49ae      	ldr	r1, [pc, #696]	; (80028e8 <seclectmenu+0x1b94>)
 8002630:	48aa      	ldr	r0, [pc, #680]	; (80028dc <seclectmenu+0x1b88>)
 8002632:	f7fe f84e 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002636:	2201      	movs	r2, #1
 8002638:	2100      	movs	r1, #0
 800263a:	48a8      	ldr	r0, [pc, #672]	; (80028dc <seclectmenu+0x1b88>)
 800263c:	f7fd ffee 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 8002640:	49aa      	ldr	r1, [pc, #680]	; (80028ec <seclectmenu+0x1b98>)
 8002642:	48a6      	ldr	r0, [pc, #664]	; (80028dc <seclectmenu+0x1b88>)
 8002644:	f7fe f845 	bl	80006d2 <CLCD_WriteString>
																}
																break;
 8002648:	e12e      	b.n	80028a8 <seclectmenu+0x1b54>
															case 2:
																if (CheckKey(keyadd2) == 0)
 800264a:	797b      	ldrb	r3, [r7, #5]
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fcd1 	bl	8002ff4 <CheckKey>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d125      	bne.n	80026a4 <seclectmenu+0x1950>
																{
																	CLCD_Clear(&LCD1);
 8002658:	48a0      	ldr	r0, [pc, #640]	; (80028dc <seclectmenu+0x1b88>)
 800265a:	f7fe f851 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	489e      	ldr	r0, [pc, #632]	; (80028dc <seclectmenu+0x1b88>)
 8002664:	f7fd ffda 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 2 ");
 8002668:	49a1      	ldr	r1, [pc, #644]	; (80028f0 <seclectmenu+0x1b9c>)
 800266a:	489c      	ldr	r0, [pc, #624]	; (80028dc <seclectmenu+0x1b88>)
 800266c:	f7fe f831 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002674:	f001 fa96 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002678:	4898      	ldr	r0, [pc, #608]	; (80028dc <seclectmenu+0x1b88>)
 800267a:	f7fe f841 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	4896      	ldr	r0, [pc, #600]	; (80028dc <seclectmenu+0x1b88>)
 8002684:	f7fd ffca 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 8002688:	499a      	ldr	r1, [pc, #616]	; (80028f4 <seclectmenu+0x1ba0>)
 800268a:	4894      	ldr	r0, [pc, #592]	; (80028dc <seclectmenu+0x1b88>)
 800268c:	f7fe f821 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002690:	2201      	movs	r2, #1
 8002692:	2100      	movs	r1, #0
 8002694:	4891      	ldr	r0, [pc, #580]	; (80028dc <seclectmenu+0x1b88>)
 8002696:	f7fd ffc1 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 800269a:	4997      	ldr	r1, [pc, #604]	; (80028f8 <seclectmenu+0x1ba4>)
 800269c:	488f      	ldr	r0, [pc, #572]	; (80028dc <seclectmenu+0x1b88>)
 800269e:	f7fe f818 	bl	80006d2 <CLCD_WriteString>
 80026a2:	e101      	b.n	80028a8 <seclectmenu+0x1b54>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 80026a4:	797b      	ldrb	r3, [r7, #5]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fca4 	bl	8002ff4 <CheckKey>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fcce 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 80026b4:	4889      	ldr	r0, [pc, #548]	; (80028dc <seclectmenu+0x1b88>)
 80026b6:	f7fe f823 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	4887      	ldr	r0, [pc, #540]	; (80028dc <seclectmenu+0x1b88>)
 80026c0:	f7fd ffac 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 2 DELETION ");
 80026c4:	498d      	ldr	r1, [pc, #564]	; (80028fc <seclectmenu+0x1ba8>)
 80026c6:	4885      	ldr	r0, [pc, #532]	; (80028dc <seclectmenu+0x1b88>)
 80026c8:	f7fe f803 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80026cc:	2201      	movs	r2, #1
 80026ce:	2100      	movs	r1, #0
 80026d0:	4882      	ldr	r0, [pc, #520]	; (80028dc <seclectmenu+0x1b88>)
 80026d2:	f7fd ffa3 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80026d6:	4983      	ldr	r1, [pc, #524]	; (80028e4 <seclectmenu+0x1b90>)
 80026d8:	4880      	ldr	r0, [pc, #512]	; (80028dc <seclectmenu+0x1b88>)
 80026da:	f7fd fffa 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 80026de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e2:	f001 fa5f 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80026e6:	487d      	ldr	r0, [pc, #500]	; (80028dc <seclectmenu+0x1b88>)
 80026e8:	f7fe f80a 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	487a      	ldr	r0, [pc, #488]	; (80028dc <seclectmenu+0x1b88>)
 80026f2:	f7fd ff93 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 80026f6:	497f      	ldr	r1, [pc, #508]	; (80028f4 <seclectmenu+0x1ba0>)
 80026f8:	4878      	ldr	r0, [pc, #480]	; (80028dc <seclectmenu+0x1b88>)
 80026fa:	f7fd ffea 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	2100      	movs	r1, #0
 8002702:	4876      	ldr	r0, [pc, #472]	; (80028dc <seclectmenu+0x1b88>)
 8002704:	f7fd ff8a 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 8002708:	497b      	ldr	r1, [pc, #492]	; (80028f8 <seclectmenu+0x1ba4>)
 800270a:	4874      	ldr	r0, [pc, #464]	; (80028dc <seclectmenu+0x1b88>)
 800270c:	f7fd ffe1 	bl	80006d2 <CLCD_WriteString>
																}
																break;
 8002710:	e0ca      	b.n	80028a8 <seclectmenu+0x1b54>
															case 3:
																if (CheckKey(keyadd2) == 0)
 8002712:	797b      	ldrb	r3, [r7, #5]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fc6d 	bl	8002ff4 <CheckKey>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d125      	bne.n	800276c <seclectmenu+0x1a18>
																{
																	CLCD_Clear(&LCD1);
 8002720:	486e      	ldr	r0, [pc, #440]	; (80028dc <seclectmenu+0x1b88>)
 8002722:	f7fd ffed 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	486c      	ldr	r0, [pc, #432]	; (80028dc <seclectmenu+0x1b88>)
 800272c:	f7fd ff76 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 3 ");
 8002730:	4973      	ldr	r1, [pc, #460]	; (8002900 <seclectmenu+0x1bac>)
 8002732:	486a      	ldr	r0, [pc, #424]	; (80028dc <seclectmenu+0x1b88>)
 8002734:	f7fd ffcd 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800273c:	f001 fa32 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002740:	4866      	ldr	r0, [pc, #408]	; (80028dc <seclectmenu+0x1b88>)
 8002742:	f7fd ffdd 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	4864      	ldr	r0, [pc, #400]	; (80028dc <seclectmenu+0x1b88>)
 800274c:	f7fd ff66 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 8002750:	496c      	ldr	r1, [pc, #432]	; (8002904 <seclectmenu+0x1bb0>)
 8002752:	4862      	ldr	r0, [pc, #392]	; (80028dc <seclectmenu+0x1b88>)
 8002754:	f7fd ffbd 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002758:	2201      	movs	r2, #1
 800275a:	2100      	movs	r1, #0
 800275c:	485f      	ldr	r0, [pc, #380]	; (80028dc <seclectmenu+0x1b88>)
 800275e:	f7fd ff5d 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 8002762:	4969      	ldr	r1, [pc, #420]	; (8002908 <seclectmenu+0x1bb4>)
 8002764:	485d      	ldr	r0, [pc, #372]	; (80028dc <seclectmenu+0x1b88>)
 8002766:	f7fd ffb4 	bl	80006d2 <CLCD_WriteString>
 800276a:	e09d      	b.n	80028a8 <seclectmenu+0x1b54>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 800276c:	797b      	ldrb	r3, [r7, #5]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fc40 	bl	8002ff4 <CheckKey>
 8002774:	4603      	mov	r3, r0
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fc6a 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 800277c:	4857      	ldr	r0, [pc, #348]	; (80028dc <seclectmenu+0x1b88>)
 800277e:	f7fd ffbf 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	4855      	ldr	r0, [pc, #340]	; (80028dc <seclectmenu+0x1b88>)
 8002788:	f7fd ff48 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 3 DELETION ");
 800278c:	495f      	ldr	r1, [pc, #380]	; (800290c <seclectmenu+0x1bb8>)
 800278e:	4853      	ldr	r0, [pc, #332]	; (80028dc <seclectmenu+0x1b88>)
 8002790:	f7fd ff9f 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002794:	2201      	movs	r2, #1
 8002796:	2100      	movs	r1, #0
 8002798:	4850      	ldr	r0, [pc, #320]	; (80028dc <seclectmenu+0x1b88>)
 800279a:	f7fd ff3f 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 800279e:	4951      	ldr	r1, [pc, #324]	; (80028e4 <seclectmenu+0x1b90>)
 80027a0:	484e      	ldr	r0, [pc, #312]	; (80028dc <seclectmenu+0x1b88>)
 80027a2:	f7fd ff96 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 80027a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027aa:	f001 f9fb 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80027ae:	484b      	ldr	r0, [pc, #300]	; (80028dc <seclectmenu+0x1b88>)
 80027b0:	f7fd ffa6 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2100      	movs	r1, #0
 80027b8:	4848      	ldr	r0, [pc, #288]	; (80028dc <seclectmenu+0x1b88>)
 80027ba:	f7fd ff2f 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 80027be:	4951      	ldr	r1, [pc, #324]	; (8002904 <seclectmenu+0x1bb0>)
 80027c0:	4846      	ldr	r0, [pc, #280]	; (80028dc <seclectmenu+0x1b88>)
 80027c2:	f7fd ff86 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80027c6:	2201      	movs	r2, #1
 80027c8:	2100      	movs	r1, #0
 80027ca:	4844      	ldr	r0, [pc, #272]	; (80028dc <seclectmenu+0x1b88>)
 80027cc:	f7fd ff26 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 80027d0:	494d      	ldr	r1, [pc, #308]	; (8002908 <seclectmenu+0x1bb4>)
 80027d2:	4842      	ldr	r0, [pc, #264]	; (80028dc <seclectmenu+0x1b88>)
 80027d4:	f7fd ff7d 	bl	80006d2 <CLCD_WriteString>
																}
																break;
 80027d8:	e066      	b.n	80028a8 <seclectmenu+0x1b54>
															case 4:
																if (CheckKey(keyadd2) == 0)
 80027da:	797b      	ldrb	r3, [r7, #5]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fc09 	bl	8002ff4 <CheckKey>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d125      	bne.n	8002834 <seclectmenu+0x1ae0>
																{
																	CLCD_Clear(&LCD1);
 80027e8:	483c      	ldr	r0, [pc, #240]	; (80028dc <seclectmenu+0x1b88>)
 80027ea:	f7fd ff89 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	483a      	ldr	r0, [pc, #232]	; (80028dc <seclectmenu+0x1b88>)
 80027f4:	f7fd ff12 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 4 ");
 80027f8:	4945      	ldr	r1, [pc, #276]	; (8002910 <seclectmenu+0x1bbc>)
 80027fa:	4838      	ldr	r0, [pc, #224]	; (80028dc <seclectmenu+0x1b88>)
 80027fc:	f7fd ff69 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002804:	f001 f9ce 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002808:	4834      	ldr	r0, [pc, #208]	; (80028dc <seclectmenu+0x1b88>)
 800280a:	f7fd ff79 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	4832      	ldr	r0, [pc, #200]	; (80028dc <seclectmenu+0x1b88>)
 8002814:	f7fd ff02 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 8002818:	493e      	ldr	r1, [pc, #248]	; (8002914 <seclectmenu+0x1bc0>)
 800281a:	4830      	ldr	r0, [pc, #192]	; (80028dc <seclectmenu+0x1b88>)
 800281c:	f7fd ff59 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002820:	2201      	movs	r2, #1
 8002822:	2100      	movs	r1, #0
 8002824:	482d      	ldr	r0, [pc, #180]	; (80028dc <seclectmenu+0x1b88>)
 8002826:	f7fd fef9 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 800282a:	493b      	ldr	r1, [pc, #236]	; (8002918 <seclectmenu+0x1bc4>)
 800282c:	482b      	ldr	r0, [pc, #172]	; (80028dc <seclectmenu+0x1b88>)
 800282e:	f7fd ff50 	bl	80006d2 <CLCD_WriteString>
 8002832:	e039      	b.n	80028a8 <seclectmenu+0x1b54>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 8002834:	797b      	ldrb	r3, [r7, #5]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fbdc 	bl	8002ff4 <CheckKey>
 800283c:	4603      	mov	r3, r0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fc06 	bl	8003050 <removeuid>
																	CLCD_Clear(&LCD1);
 8002844:	4825      	ldr	r0, [pc, #148]	; (80028dc <seclectmenu+0x1b88>)
 8002846:	f7fd ff5b 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	4823      	ldr	r0, [pc, #140]	; (80028dc <seclectmenu+0x1b88>)
 8002850:	f7fd fee4 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 4 DELETION ");
 8002854:	4931      	ldr	r1, [pc, #196]	; (800291c <seclectmenu+0x1bc8>)
 8002856:	4821      	ldr	r0, [pc, #132]	; (80028dc <seclectmenu+0x1b88>)
 8002858:	f7fd ff3b 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800285c:	2201      	movs	r2, #1
 800285e:	2100      	movs	r1, #0
 8002860:	481e      	ldr	r0, [pc, #120]	; (80028dc <seclectmenu+0x1b88>)
 8002862:	f7fd fedb 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 8002866:	491f      	ldr	r1, [pc, #124]	; (80028e4 <seclectmenu+0x1b90>)
 8002868:	481c      	ldr	r0, [pc, #112]	; (80028dc <seclectmenu+0x1b88>)
 800286a:	f7fd ff32 	bl	80006d2 <CLCD_WriteString>
																	HAL_Delay(1000);
 800286e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002872:	f001 f997 	bl	8003ba4 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002876:	4819      	ldr	r0, [pc, #100]	; (80028dc <seclectmenu+0x1b88>)
 8002878:	f7fd ff42 	bl	8000700 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	4816      	ldr	r0, [pc, #88]	; (80028dc <seclectmenu+0x1b88>)
 8002882:	f7fd fecb 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 8002886:	4923      	ldr	r1, [pc, #140]	; (8002914 <seclectmenu+0x1bc0>)
 8002888:	4814      	ldr	r0, [pc, #80]	; (80028dc <seclectmenu+0x1b88>)
 800288a:	f7fd ff22 	bl	80006d2 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800288e:	2201      	movs	r2, #1
 8002890:	2100      	movs	r1, #0
 8002892:	4812      	ldr	r0, [pc, #72]	; (80028dc <seclectmenu+0x1b88>)
 8002894:	f7fd fec2 	bl	800061c <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 8002898:	491f      	ldr	r1, [pc, #124]	; (8002918 <seclectmenu+0x1bc4>)
 800289a:	4810      	ldr	r0, [pc, #64]	; (80028dc <seclectmenu+0x1b88>)
 800289c:	f7fd ff19 	bl	80006d2 <CLCD_WriteString>
																}
																break;
 80028a0:	e002      	b.n	80028a8 <seclectmenu+0x1b54>
															default:
																back12 = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	71fb      	strb	r3, [r7, #7]
																break;
 80028a6:	bf00      	nop
													while (back12 == 1)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f43f ad87 	beq.w	80023be <seclectmenu+0x166a>
															}
														}
													}
													CLCD_Clear(&LCD1);
 80028b0:	480a      	ldr	r0, [pc, #40]	; (80028dc <seclectmenu+0x1b88>)
 80028b2:	f7fd ff25 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	4808      	ldr	r0, [pc, #32]	; (80028dc <seclectmenu+0x1b88>)
 80028bc:	f7fd feae 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   ADMIN CARD");
 80028c0:	4917      	ldr	r1, [pc, #92]	; (8002920 <seclectmenu+0x1bcc>)
 80028c2:	4806      	ldr	r0, [pc, #24]	; (80028dc <seclectmenu+0x1b88>)
 80028c4:	f7fd ff05 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80028c8:	2201      	movs	r2, #1
 80028ca:	2100      	movs	r1, #0
 80028cc:	4803      	ldr	r0, [pc, #12]	; (80028dc <seclectmenu+0x1b88>)
 80028ce:	f7fd fea5 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> GUEST CARD");
 80028d2:	4914      	ldr	r1, [pc, #80]	; (8002924 <seclectmenu+0x1bd0>)
 80028d4:	4801      	ldr	r0, [pc, #4]	; (80028dc <seclectmenu+0x1b88>)
 80028d6:	f7fd fefc 	bl	80006d2 <CLCD_WriteString>
													break;
 80028da:	e028      	b.n	800292e <seclectmenu+0x1bda>
 80028dc:	20000140 	.word	0x20000140
 80028e0:	08006778 	.word	0x08006778
 80028e4:	0800678c 	.word	0x0800678c
 80028e8:	0800661c 	.word	0x0800661c
 80028ec:	08006630 	.word	0x08006630
 80028f0:	08006838 	.word	0x08006838
 80028f4:	08006644 	.word	0x08006644
 80028f8:	08006658 	.word	0x08006658
 80028fc:	080067b0 	.word	0x080067b0
 8002900:	0800684c 	.word	0x0800684c
 8002904:	0800666c 	.word	0x0800666c
 8002908:	08006680 	.word	0x08006680
 800290c:	080067d8 	.word	0x080067d8
 8002910:	08006860 	.word	0x08006860
 8002914:	08006694 	.word	0x08006694
 8002918:	080065e4 	.word	0x080065e4
 800291c:	08006800 	.word	0x08006800
 8002920:	0800644c 	.word	0x0800644c
 8002924:	08006540 	.word	0x08006540
												default:
													backrm10 = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	72fb      	strb	r3, [r7, #11]
													break;
 800292c:	bf00      	nop
										while (backrm10 == 1)
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	2b01      	cmp	r3, #1
 8002932:	f43f a9c1 	beq.w	8001cb8 <seclectmenu+0xf64>
												}
											}
										}
										CLCD_Clear(&LCD1);
 8002936:	489a      	ldr	r0, [pc, #616]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002938:	f7fd fee2 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	4897      	ldr	r0, [pc, #604]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002942:	f7fd fe6b 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SELECT CARD");
 8002946:	4997      	ldr	r1, [pc, #604]	; (8002ba4 <seclectmenu+0x1e50>)
 8002948:	4895      	ldr	r0, [pc, #596]	; (8002ba0 <seclectmenu+0x1e4c>)
 800294a:	f7fd fec2 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800294e:	2201      	movs	r2, #1
 8002950:	2100      	movs	r1, #0
 8002952:	4893      	ldr	r0, [pc, #588]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002954:	f7fd fe62 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SCAN CARD");
 8002958:	4993      	ldr	r1, [pc, #588]	; (8002ba8 <seclectmenu+0x1e54>)
 800295a:	4891      	ldr	r0, [pc, #580]	; (8002ba0 <seclectmenu+0x1e4c>)
 800295c:	f7fd feb9 	bl	80006d2 <CLCD_WriteString>
										break;
 8002960:	e0b3      	b.n	8002aca <seclectmenu+0x1d76>
									case 1:
										CLCD_Clear(&LCD1);
 8002962:	488f      	ldr	r0, [pc, #572]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002964:	f7fd fecc 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	488c      	ldr	r0, [pc, #560]	; (8002ba0 <seclectmenu+0x1e4c>)
 800296e:	f7fd fe55 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "SCAN CARD");
 8002972:	498e      	ldr	r1, [pc, #568]	; (8002bac <seclectmenu+0x1e58>)
 8002974:	488a      	ldr	r0, [pc, #552]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002976:	f7fd feac 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800297a:	2201      	movs	r2, #1
 800297c:	2100      	movs	r1, #0
 800297e:	4888      	ldr	r0, [pc, #544]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002980:	f7fd fe4c 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 8002984:	498a      	ldr	r1, [pc, #552]	; (8002bb0 <seclectmenu+0x1e5c>)
 8002986:	4886      	ldr	r0, [pc, #536]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002988:	f7fd fea3 	bl	80006d2 <CLCD_WriteString>
										uint8_t rmquet = 1;
 800298c:	2301      	movs	r3, #1
 800298e:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002990:	e07e      	b.n	8002a90 <seclectmenu+0x1d3c>
										{
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8002992:	4888      	ldr	r0, [pc, #544]	; (8002bb4 <seclectmenu+0x1e60>)
 8002994:	f000 fd14 	bl	80033c0 <TM_MFRC522_Check>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d171      	bne.n	8002a82 <seclectmenu+0x1d2e>
											{

												if (CheckListUID(CardID) != 0)
 800299e:	4885      	ldr	r0, [pc, #532]	; (8002bb4 <seclectmenu+0x1e60>)
 80029a0:	f000 f94e 	bl	8002c40 <CheckListUID>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d046      	beq.n	8002a38 <seclectmenu+0x1ce4>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 80029aa:	4882      	ldr	r0, [pc, #520]	; (8002bb4 <seclectmenu+0x1e60>)
 80029ac:	f000 f948 	bl	8002c40 <CheckListUID>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fb1e 	bl	8002ff4 <CheckKey>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fb48 	bl	8003050 <removeuid>
													CLCD_Clear(&LCD1);
 80029c0:	4877      	ldr	r0, [pc, #476]	; (8002ba0 <seclectmenu+0x1e4c>)
 80029c2:	f7fd fe9d 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	4875      	ldr	r0, [pc, #468]	; (8002ba0 <seclectmenu+0x1e4c>)
 80029cc:	f7fd fe26 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "  CARD DELETION ");
 80029d0:	4979      	ldr	r1, [pc, #484]	; (8002bb8 <seclectmenu+0x1e64>)
 80029d2:	4873      	ldr	r0, [pc, #460]	; (8002ba0 <seclectmenu+0x1e4c>)
 80029d4:	f7fd fe7d 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80029d8:	2201      	movs	r2, #1
 80029da:	2100      	movs	r1, #0
 80029dc:	4870      	ldr	r0, [pc, #448]	; (8002ba0 <seclectmenu+0x1e4c>)
 80029de:	f7fd fe1d 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80029e2:	4976      	ldr	r1, [pc, #472]	; (8002bbc <seclectmenu+0x1e68>)
 80029e4:	486e      	ldr	r0, [pc, #440]	; (8002ba0 <seclectmenu+0x1e4c>)
 80029e6:	f7fd fe74 	bl	80006d2 <CLCD_WriteString>
													HAL_Delay(1000);
 80029ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ee:	f001 f8d9 	bl	8003ba4 <HAL_Delay>
													if (checkcountUID() == 0)
 80029f2:	f000 f955 	bl	8002ca0 <checkcountUID>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <seclectmenu+0x1cb8>
													{
														startadd();
 80029fc:	f000 fb36 	bl	800306c <startadd>
														rmquet = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8002a04:	4b6e      	ldr	r3, [pc, #440]	; (8002bc0 <seclectmenu+0x1e6c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
														return;
 8002a0a:	e0c5      	b.n	8002b98 <seclectmenu+0x1e44>
													}else{
														CLCD_Clear(&LCD1);
 8002a0c:	4864      	ldr	r0, [pc, #400]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a0e:	f7fd fe77 	bl	8000700 <CLCD_Clear>
														CLCD_SetCursor(&LCD1, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	4862      	ldr	r0, [pc, #392]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a18:	f7fd fe00 	bl	800061c <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "SCAN CARD");
 8002a1c:	4963      	ldr	r1, [pc, #396]	; (8002bac <seclectmenu+0x1e58>)
 8002a1e:	4860      	ldr	r0, [pc, #384]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a20:	f7fd fe57 	bl	80006d2 <CLCD_WriteString>
														CLCD_SetCursor(&LCD1, 0, 1);
 8002a24:	2201      	movs	r2, #1
 8002a26:	2100      	movs	r1, #0
 8002a28:	485d      	ldr	r0, [pc, #372]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a2a:	f7fd fdf7 	bl	800061c <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "=>  BACK");
 8002a2e:	4960      	ldr	r1, [pc, #384]	; (8002bb0 <seclectmenu+0x1e5c>)
 8002a30:	485b      	ldr	r0, [pc, #364]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a32:	f7fd fe4e 	bl	80006d2 <CLCD_WriteString>
 8002a36:	e024      	b.n	8002a82 <seclectmenu+0x1d2e>
													}

												}
												else
												{
													CLCD_Clear(&LCD1);
 8002a38:	4859      	ldr	r0, [pc, #356]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a3a:	f7fd fe61 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2100      	movs	r1, #0
 8002a42:	4857      	ldr	r0, [pc, #348]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a44:	f7fd fdea 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "CARD UNAVAILABLE");
 8002a48:	495e      	ldr	r1, [pc, #376]	; (8002bc4 <seclectmenu+0x1e70>)
 8002a4a:	4855      	ldr	r0, [pc, #340]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a4c:	f7fd fe41 	bl	80006d2 <CLCD_WriteString>
													HAL_Delay(1000);
 8002a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a54:	f001 f8a6 	bl	8003ba4 <HAL_Delay>
													CLCD_Clear(&LCD1);
 8002a58:	4851      	ldr	r0, [pc, #324]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a5a:	f7fd fe51 	bl	8000700 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	484f      	ldr	r0, [pc, #316]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a64:	f7fd fdda 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "SCAN CARD");
 8002a68:	4950      	ldr	r1, [pc, #320]	; (8002bac <seclectmenu+0x1e58>)
 8002a6a:	484d      	ldr	r0, [pc, #308]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a6c:	f7fd fe31 	bl	80006d2 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2100      	movs	r1, #0
 8002a74:	484a      	ldr	r0, [pc, #296]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a76:	f7fd fdd1 	bl	800061c <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  BACK");
 8002a7a:	494d      	ldr	r1, [pc, #308]	; (8002bb0 <seclectmenu+0x1e5c>)
 8002a7c:	4848      	ldr	r0, [pc, #288]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a7e:	f7fd fe28 	bl	80006d2 <CLCD_WriteString>
												}
											}
											if (checkMENU() == 1)
 8002a82:	f7fe f8e9 	bl	8000c58 <checkMENU>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <seclectmenu+0x1d3c>
											{
												rmquet = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002a90:	79bb      	ldrb	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f47f af7d 	bne.w	8002992 <seclectmenu+0x1c3e>
											}
										}
										CLCD_Clear(&LCD1);
 8002a98:	4841      	ldr	r0, [pc, #260]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002a9a:	f7fd fe31 	bl	8000700 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	483f      	ldr	r0, [pc, #252]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002aa4:	f7fd fdba 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SELECT CARD");
 8002aa8:	4947      	ldr	r1, [pc, #284]	; (8002bc8 <seclectmenu+0x1e74>)
 8002aaa:	483d      	ldr	r0, [pc, #244]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002aac:	f7fd fe11 	bl	80006d2 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	483a      	ldr	r0, [pc, #232]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002ab6:	f7fd fdb1 	bl	800061c <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SCAN CARD");
 8002aba:	4944      	ldr	r1, [pc, #272]	; (8002bcc <seclectmenu+0x1e78>)
 8002abc:	4838      	ldr	r0, [pc, #224]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002abe:	f7fd fe08 	bl	80006d2 <CLCD_WriteString>
										break;
 8002ac2:	e002      	b.n	8002aca <seclectmenu+0x1d76>
									default:
										backrm1 = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	737b      	strb	r3, [r7, #13]
										break;
 8002ac8:	bf00      	nop
							while (backrm1 == 1)
 8002aca:	7b7b      	ldrb	r3, [r7, #13]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	f43f a83c 	beq.w	8001b4a <seclectmenu+0xdf6>
									}
								}
							}
							CLCD_Clear(&LCD1);
 8002ad2:	4833      	ldr	r0, [pc, #204]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002ad4:	f7fd fe14 	bl	8000700 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	4830      	ldr	r0, [pc, #192]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002ade:	f7fd fd9d 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> REMOVE CARD");
 8002ae2:	493b      	ldr	r1, [pc, #236]	; (8002bd0 <seclectmenu+0x1e7c>)
 8002ae4:	482e      	ldr	r0, [pc, #184]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002ae6:	f7fd fdf4 	bl	80006d2 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8002aea:	2201      	movs	r2, #1
 8002aec:	2100      	movs	r1, #0
 8002aee:	482c      	ldr	r0, [pc, #176]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002af0:	f7fd fd94 	bl	800061c <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE ALL");
 8002af4:	4937      	ldr	r1, [pc, #220]	; (8002bd4 <seclectmenu+0x1e80>)
 8002af6:	482a      	ldr	r0, [pc, #168]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002af8:	f7fd fdeb 	bl	80006d2 <CLCD_WriteString>
							break;
 8002afc:	e00a      	b.n	8002b14 <seclectmenu+0x1dc0>
						case 1:
							resetflash();
 8002afe:	f000 fbf1 	bl	80032e4 <resetflash>
							startadd();
 8002b02:	f000 fab3 	bl	800306c <startadd>
							exitmenu = 0;
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <seclectmenu+0x1e6c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
							break;
 8002b0c:	e002      	b.n	8002b14 <seclectmenu+0x1dc0>
						default:
							backrm = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
							break;
 8002b12:	bf00      	nop
				while (backrm == 1)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	f43e af84 	beq.w	8001a24 <seclectmenu+0xcd0>
						}
					}
				}
				CLCD_Clear(&LCD1);
 8002b1c:	4820      	ldr	r0, [pc, #128]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b1e:	f7fd fdef 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	481e      	ldr	r0, [pc, #120]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b28:	f7fd fd78 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    ADD CARD");
 8002b2c:	492a      	ldr	r1, [pc, #168]	; (8002bd8 <seclectmenu+0x1e84>)
 8002b2e:	481c      	ldr	r0, [pc, #112]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b30:	f7fd fdcf 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002b34:	2201      	movs	r2, #1
 8002b36:	2100      	movs	r1, #0
 8002b38:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b3a:	f7fd fd6f 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  REMOVE CARD");
 8002b3e:	4927      	ldr	r1, [pc, #156]	; (8002bdc <seclectmenu+0x1e88>)
 8002b40:	4817      	ldr	r0, [pc, #92]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b42:	f7fd fdc6 	bl	80006d2 <CLCD_WriteString>
				break;
 8002b46:	e01b      	b.n	8002b80 <seclectmenu+0x1e2c>
			case 2:
				checkthe();
 8002b48:	f000 f968 	bl	8002e1c <checkthe>
				CLCD_Clear(&LCD1);
 8002b4c:	4814      	ldr	r0, [pc, #80]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b4e:	f7fd fdd7 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	4812      	ldr	r0, [pc, #72]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b58:	f7fd fd60 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 8002b5c:	4920      	ldr	r1, [pc, #128]	; (8002be0 <seclectmenu+0x1e8c>)
 8002b5e:	4810      	ldr	r0, [pc, #64]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b60:	f7fd fdb7 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002b64:	2201      	movs	r2, #1
 8002b66:	2100      	movs	r1, #0
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b6a:	f7fd fd57 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  CHECK CARD");
 8002b6e:	491d      	ldr	r1, [pc, #116]	; (8002be4 <seclectmenu+0x1e90>)
 8002b70:	480b      	ldr	r0, [pc, #44]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b72:	f7fd fdae 	bl	80006d2 <CLCD_WriteString>
				break;
 8002b76:	e003      	b.n	8002b80 <seclectmenu+0x1e2c>
				break;
			default:
				exitmenu = 0;
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <seclectmenu+0x1e6c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
				break;
 8002b7e:	bf00      	nop
	while (exitmenu )
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <seclectmenu+0x1e6c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f47e a904 	bne.w	8000d92 <seclectmenu+0x3e>
			}
		}
	}
	CLCD_Clear(&LCD1);
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <seclectmenu+0x1e4c>)
 8002b8c:	f7fd fdb8 	bl	8000700 <CLCD_Clear>
	HAL_Delay(1000);
 8002b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b94:	f001 f806 	bl	8003ba4 <HAL_Delay>
}
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000140 	.word	0x20000140
 8002ba4:	08006724 	.word	0x08006724
 8002ba8:	08006734 	.word	0x08006734
 8002bac:	08006874 	.word	0x08006874
 8002bb0:	08006508 	.word	0x08006508
 8002bb4:	20000130 	.word	0x20000130
 8002bb8:	08006880 	.word	0x08006880
 8002bbc:	0800678c 	.word	0x0800678c
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	08006894 	.word	0x08006894
 8002bc8:	08006744 	.word	0x08006744
 8002bcc:	08006754 	.word	0x08006754
 8002bd0:	080066e4 	.word	0x080066e4
 8002bd4:	080066f4 	.word	0x080066f4
 8002bd8:	080064c8 	.word	0x080064c8
 8002bdc:	080064d8 	.word	0x080064d8
 8002be0:	080064b8 	.word	0x080064b8
 8002be4:	080064e8 	.word	0x080064e8

08002be8 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002bf2:	f107 030c 	add.w	r3, r7, #12
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f7fd fb22 	bl	8000244 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002c00:	7cbb      	ldrb	r3, [r7, #18]
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d001      	beq.n	8002c0a <CheckUID+0x22>
		return 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e016      	b.n	8002c38 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
 8002c0e:	e00f      	b.n	8002c30 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	443b      	add	r3, r7
 8002c1e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <CheckUID+0x42>
			return 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e006      	b.n	8002c38 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d9ec      	bls.n	8002c10 <CheckUID+0x28>
	}
	return 1;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <CheckListUID+0x5c>)
 8002c4a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c4c:	e018      	b.n	8002c80 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3306      	adds	r3, #6
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fadd 	bl	8000212 <Flash_Read_2Byte>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d10a      	bne.n	8002c7a <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ffbe 	bl	8002be8 <CheckUID>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d103      	bne.n	8002c7a <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3305      	adds	r3, #5
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	e00b      	b.n	8002c92 <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3305      	adds	r3, #5
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fab8 	bl	80001fa <Flash_Read_Byte>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2bff      	cmp	r3, #255	; 0xff
 8002c8e:	d1de      	bne.n	8002c4e <CheckListUID+0xe>
	}
	return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0800a000 	.word	0x0800a000

08002ca0 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <checkcountUID+0x60>)
 8002ca8:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002cae:	e01a      	b.n	8002ce6 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3306      	adds	r3, #6
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd faac 	bl	8000212 <Flash_Read_2Byte>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d10c      	bne.n	8002ce0 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3305      	adds	r3, #5
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fa95 	bl	80001fa <Flash_Read_Byte>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <checkcountUID+0x40>
			{
				count++;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3305      	adds	r3, #5
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fa85 	bl	80001fa <Flash_Read_Byte>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2bff      	cmp	r3, #255	; 0xff
 8002cf4:	d1dc      	bne.n	8002cb0 <checkcountUID+0x10>
	}
	return count;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	0800a000 	.word	0x0800a000

08002d04 <adduid>:

void adduid(uint8_t key)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002d0e:	f000 fa35 	bl	800317c <setaddress>
	CLCD_Clear(&LCD1);
 8002d12:	483a      	ldr	r0, [pc, #232]	; (8002dfc <adduid+0xf8>)
 8002d14:	f7fd fcf4 	bl	8000700 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4837      	ldr	r0, [pc, #220]	; (8002dfc <adduid+0xf8>)
 8002d1e:	f7fd fc7d 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "SCAN CARD");
 8002d22:	4937      	ldr	r1, [pc, #220]	; (8002e00 <adduid+0xfc>)
 8002d24:	4835      	ldr	r0, [pc, #212]	; (8002dfc <adduid+0xf8>)
 8002d26:	f7fd fcd4 	bl	80006d2 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4833      	ldr	r0, [pc, #204]	; (8002dfc <adduid+0xf8>)
 8002d30:	f7fd fc74 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002d34:	4933      	ldr	r1, [pc, #204]	; (8002e04 <adduid+0x100>)
 8002d36:	4831      	ldr	r0, [pc, #196]	; (8002dfc <adduid+0xf8>)
 8002d38:	f7fd fccb 	bl	80006d2 <CLCD_WriteString>
	while (exitmenu)
 8002d3c:	e055      	b.n	8002dea <adduid+0xe6>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002d3e:	4832      	ldr	r0, [pc, #200]	; (8002e08 <adduid+0x104>)
 8002d40:	f000 fb3e 	bl	80033c0 <TM_MFRC522_Check>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d14a      	bne.n	8002de0 <adduid+0xdc>
		{
			if (CheckListUID(CardID) == 0)
 8002d4a:	482f      	ldr	r0, [pc, #188]	; (8002e08 <adduid+0x104>)
 8002d4c:	f7ff ff78 	bl	8002c40 <CheckListUID>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11f      	bne.n	8002d96 <adduid+0x92>
			{
				CardID[5] = key;
 8002d56:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <adduid+0x104>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <adduid+0x108>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2206      	movs	r2, #6
 8002d62:	4929      	ldr	r1, [pc, #164]	; (8002e08 <adduid+0x104>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fa25 	bl	80001b4 <Flash_Write_Array>
				AddressUID += 8;
 8002d6a:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <adduid+0x108>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3308      	adds	r3, #8
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <adduid+0x108>)
 8002d72:	6013      	str	r3, [r2, #0]
				CLCD_Clear(&LCD1);
 8002d74:	4821      	ldr	r0, [pc, #132]	; (8002dfc <adduid+0xf8>)
 8002d76:	f7fd fcc3 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	481f      	ldr	r0, [pc, #124]	; (8002dfc <adduid+0xf8>)
 8002d80:	f7fd fc4c 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SUCCESSFUL");
 8002d84:	4922      	ldr	r1, [pc, #136]	; (8002e10 <adduid+0x10c>)
 8002d86:	481d      	ldr	r0, [pc, #116]	; (8002dfc <adduid+0xf8>)
 8002d88:	f7fd fca3 	bl	80006d2 <CLCD_WriteString>
				HAL_Delay(1000);
 8002d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d90:	f000 ff08 	bl	8003ba4 <HAL_Delay>
				return;
 8002d94:	e02f      	b.n	8002df6 <adduid+0xf2>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8002d96:	4819      	ldr	r0, [pc, #100]	; (8002dfc <adduid+0xf8>)
 8002d98:	f7fd fcb2 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4816      	ldr	r0, [pc, #88]	; (8002dfc <adduid+0xf8>)
 8002da2:	f7fd fc3b 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "CARD AVAILABLE");
 8002da6:	491b      	ldr	r1, [pc, #108]	; (8002e14 <adduid+0x110>)
 8002da8:	4814      	ldr	r0, [pc, #80]	; (8002dfc <adduid+0xf8>)
 8002daa:	f7fd fc92 	bl	80006d2 <CLCD_WriteString>
				HAL_Delay(1000);
 8002dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002db2:	f000 fef7 	bl	8003ba4 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002db6:	4811      	ldr	r0, [pc, #68]	; (8002dfc <adduid+0xf8>)
 8002db8:	f7fd fca2 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	480e      	ldr	r0, [pc, #56]	; (8002dfc <adduid+0xf8>)
 8002dc2:	f7fd fc2b 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SCAN CARD");
 8002dc6:	490e      	ldr	r1, [pc, #56]	; (8002e00 <adduid+0xfc>)
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <adduid+0xf8>)
 8002dca:	f7fd fc82 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002dce:	2201      	movs	r2, #1
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	480a      	ldr	r0, [pc, #40]	; (8002dfc <adduid+0xf8>)
 8002dd4:	f7fd fc22 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002dd8:	490a      	ldr	r1, [pc, #40]	; (8002e04 <adduid+0x100>)
 8002dda:	4808      	ldr	r0, [pc, #32]	; (8002dfc <adduid+0xf8>)
 8002ddc:	f7fd fc79 	bl	80006d2 <CLCD_WriteString>
			}
		}
		if (checkMENU() == 1)
 8002de0:	f7fd ff3a 	bl	8000c58 <checkMENU>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d004      	beq.n	8002df4 <adduid+0xf0>
	while (exitmenu)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <adduid+0x114>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1a5      	bne.n	8002d3e <adduid+0x3a>
 8002df2:	e000      	b.n	8002df6 <adduid+0xf2>
		{
			return;
 8002df4:	bf00      	nop
		}
	}
}
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000140 	.word	0x20000140
 8002e00:	08006874 	.word	0x08006874
 8002e04:	08006508 	.word	0x08006508
 8002e08:	20000130 	.word	0x20000130
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	080068a8 	.word	0x080068a8
 8002e14:	080068b4 	.word	0x080068b4
 8002e18:	20000000 	.word	0x20000000

08002e1c <checkthe>:
void checkthe(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <checkthe+0x1a8>)
 8002e24:	221e      	movs	r2, #30
 8002e26:	701a      	strb	r2, [r3, #0]
	CLCD_Clear(&LCD1);
 8002e28:	4867      	ldr	r0, [pc, #412]	; (8002fc8 <checkthe+0x1ac>)
 8002e2a:	f7fd fc69 	bl	8000700 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	4865      	ldr	r0, [pc, #404]	; (8002fc8 <checkthe+0x1ac>)
 8002e34:	f7fd fbf2 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "SCAN CARD");
 8002e38:	4964      	ldr	r1, [pc, #400]	; (8002fcc <checkthe+0x1b0>)
 8002e3a:	4863      	ldr	r0, [pc, #396]	; (8002fc8 <checkthe+0x1ac>)
 8002e3c:	f7fd fc49 	bl	80006d2 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002e40:	2201      	movs	r2, #1
 8002e42:	2100      	movs	r1, #0
 8002e44:	4860      	ldr	r0, [pc, #384]	; (8002fc8 <checkthe+0x1ac>)
 8002e46:	f7fd fbe9 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002e4a:	4961      	ldr	r1, [pc, #388]	; (8002fd0 <checkthe+0x1b4>)
 8002e4c:	485e      	ldr	r0, [pc, #376]	; (8002fc8 <checkthe+0x1ac>)
 8002e4e:	f7fd fc40 	bl	80006d2 <CLCD_WriteString>
	while (exitmenu )
 8002e52:	e0ac      	b.n	8002fae <checkthe+0x192>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002e54:	485f      	ldr	r0, [pc, #380]	; (8002fd4 <checkthe+0x1b8>)
 8002e56:	f000 fab3 	bl	80033c0 <TM_MFRC522_Check>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 80a1 	bne.w	8002fa4 <checkthe+0x188>
		{

			if (CheckListUID(CardID) == 0)
 8002e62:	485c      	ldr	r0, [pc, #368]	; (8002fd4 <checkthe+0x1b8>)
 8002e64:	f7ff feec 	bl	8002c40 <CheckListUID>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d129      	bne.n	8002ec2 <checkthe+0xa6>
			{
				CLCD_Clear(&LCD1);
 8002e6e:	4856      	ldr	r0, [pc, #344]	; (8002fc8 <checkthe+0x1ac>)
 8002e70:	f7fd fc46 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	4853      	ldr	r0, [pc, #332]	; (8002fc8 <checkthe+0x1ac>)
 8002e7a:	f7fd fbcf 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "CARD NOT ADDED");
 8002e7e:	4956      	ldr	r1, [pc, #344]	; (8002fd8 <checkthe+0x1bc>)
 8002e80:	4851      	ldr	r0, [pc, #324]	; (8002fc8 <checkthe+0x1ac>)
 8002e82:	f7fd fc26 	bl	80006d2 <CLCD_WriteString>
				HAL_Delay(1000);
 8002e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e8a:	f000 fe8b 	bl	8003ba4 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002e8e:	484e      	ldr	r0, [pc, #312]	; (8002fc8 <checkthe+0x1ac>)
 8002e90:	f7fd fc36 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2100      	movs	r1, #0
 8002e98:	484b      	ldr	r0, [pc, #300]	; (8002fc8 <checkthe+0x1ac>)
 8002e9a:	f7fd fbbf 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SCAN CARD");
 8002e9e:	494b      	ldr	r1, [pc, #300]	; (8002fcc <checkthe+0x1b0>)
 8002ea0:	4849      	ldr	r0, [pc, #292]	; (8002fc8 <checkthe+0x1ac>)
 8002ea2:	f7fd fc16 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4847      	ldr	r0, [pc, #284]	; (8002fc8 <checkthe+0x1ac>)
 8002eac:	f7fd fbb6 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002eb0:	4947      	ldr	r1, [pc, #284]	; (8002fd0 <checkthe+0x1b4>)
 8002eb2:	4845      	ldr	r0, [pc, #276]	; (8002fc8 <checkthe+0x1ac>)
 8002eb4:	f7fd fc0d 	bl	80006d2 <CLCD_WriteString>
				HAL_Delay(1000);
 8002eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ebc:	f000 fe72 	bl	8003ba4 <HAL_Delay>
 8002ec0:	e070      	b.n	8002fa4 <checkthe+0x188>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002ec2:	4844      	ldr	r0, [pc, #272]	; (8002fd4 <checkthe+0x1b8>)
 8002ec4:	f7ff febc 	bl	8002c40 <CheckListUID>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	717b      	strb	r3, [r7, #5]
				CLCD_Clear(&LCD1);
 8002eda:	483b      	ldr	r0, [pc, #236]	; (8002fc8 <checkthe+0x1ac>)
 8002edc:	f7fd fc10 	bl	8000700 <CLCD_Clear>
				switch (key1)
 8002ee0:	797b      	ldrb	r3, [r7, #5]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d109      	bne.n	8002efa <checkthe+0xde>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4837      	ldr	r0, [pc, #220]	; (8002fc8 <checkthe+0x1ac>)
 8002eec:	f7fd fb96 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "ADMIN CARD");
 8002ef0:	493a      	ldr	r1, [pc, #232]	; (8002fdc <checkthe+0x1c0>)
 8002ef2:	4835      	ldr	r0, [pc, #212]	; (8002fc8 <checkthe+0x1ac>)
 8002ef4:	f7fd fbed 	bl	80006d2 <CLCD_WriteString>
					break;
 8002ef8:	e009      	b.n	8002f0e <checkthe+0xf2>
				default:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	4832      	ldr	r0, [pc, #200]	; (8002fc8 <checkthe+0x1ac>)
 8002f00:	f7fd fb8c 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "GUEST CARD");
 8002f04:	4936      	ldr	r1, [pc, #216]	; (8002fe0 <checkthe+0x1c4>)
 8002f06:	4830      	ldr	r0, [pc, #192]	; (8002fc8 <checkthe+0x1ac>)
 8002f08:	f7fd fbe3 	bl	80006d2 <CLCD_WriteString>
					break;
 8002f0c:	bf00      	nop
				}
				switch (key2)
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d01a      	beq.n	8002f4a <checkthe+0x12e>
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	dc22      	bgt.n	8002f5e <checkthe+0x142>
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d002      	beq.n	8002f22 <checkthe+0x106>
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d00a      	beq.n	8002f36 <checkthe+0x11a>
 8002f20:	e01d      	b.n	8002f5e <checkthe+0x142>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f22:	2201      	movs	r2, #1
 8002f24:	2100      	movs	r1, #0
 8002f26:	4828      	ldr	r0, [pc, #160]	; (8002fc8 <checkthe+0x1ac>)
 8002f28:	f7fd fb78 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 1");
 8002f2c:	492d      	ldr	r1, [pc, #180]	; (8002fe4 <checkthe+0x1c8>)
 8002f2e:	4826      	ldr	r0, [pc, #152]	; (8002fc8 <checkthe+0x1ac>)
 8002f30:	f7fd fbcf 	bl	80006d2 <CLCD_WriteString>
					break;
 8002f34:	e01d      	b.n	8002f72 <checkthe+0x156>
				case 2:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f36:	2201      	movs	r2, #1
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4823      	ldr	r0, [pc, #140]	; (8002fc8 <checkthe+0x1ac>)
 8002f3c:	f7fd fb6e 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 2");
 8002f40:	4929      	ldr	r1, [pc, #164]	; (8002fe8 <checkthe+0x1cc>)
 8002f42:	4821      	ldr	r0, [pc, #132]	; (8002fc8 <checkthe+0x1ac>)
 8002f44:	f7fd fbc5 	bl	80006d2 <CLCD_WriteString>
					break;
 8002f48:	e013      	b.n	8002f72 <checkthe+0x156>
				case 3:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	481e      	ldr	r0, [pc, #120]	; (8002fc8 <checkthe+0x1ac>)
 8002f50:	f7fd fb64 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 3");
 8002f54:	4925      	ldr	r1, [pc, #148]	; (8002fec <checkthe+0x1d0>)
 8002f56:	481c      	ldr	r0, [pc, #112]	; (8002fc8 <checkthe+0x1ac>)
 8002f58:	f7fd fbbb 	bl	80006d2 <CLCD_WriteString>
					break;
 8002f5c:	e009      	b.n	8002f72 <checkthe+0x156>
				default:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	2100      	movs	r1, #0
 8002f62:	4819      	ldr	r0, [pc, #100]	; (8002fc8 <checkthe+0x1ac>)
 8002f64:	f7fd fb5a 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 4");
 8002f68:	4921      	ldr	r1, [pc, #132]	; (8002ff0 <checkthe+0x1d4>)
 8002f6a:	4817      	ldr	r0, [pc, #92]	; (8002fc8 <checkthe+0x1ac>)
 8002f6c:	f7fd fbb1 	bl	80006d2 <CLCD_WriteString>
					break;
 8002f70:	bf00      	nop
				}
				HAL_Delay(1000);
 8002f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f76:	f000 fe15 	bl	8003ba4 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002f7a:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <checkthe+0x1ac>)
 8002f7c:	f7fd fbc0 	bl	8000700 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	4810      	ldr	r0, [pc, #64]	; (8002fc8 <checkthe+0x1ac>)
 8002f86:	f7fd fb49 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SCAN CARD");
 8002f8a:	4910      	ldr	r1, [pc, #64]	; (8002fcc <checkthe+0x1b0>)
 8002f8c:	480e      	ldr	r0, [pc, #56]	; (8002fc8 <checkthe+0x1ac>)
 8002f8e:	f7fd fba0 	bl	80006d2 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002f92:	2201      	movs	r2, #1
 8002f94:	2100      	movs	r1, #0
 8002f96:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <checkthe+0x1ac>)
 8002f98:	f7fd fb40 	bl	800061c <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <checkthe+0x1b4>)
 8002f9e:	480a      	ldr	r0, [pc, #40]	; (8002fc8 <checkthe+0x1ac>)
 8002fa0:	f7fd fb97 	bl	80006d2 <CLCD_WriteString>
			}
		}
		if (checkMENU() == 1)
 8002fa4:	f7fd fe58 	bl	8000c58 <checkMENU>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d005      	beq.n	8002fba <checkthe+0x19e>
	while (exitmenu )
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <checkthe+0x1a8>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f47f af4e 	bne.w	8002e54 <checkthe+0x38>
 8002fb8:	e000      	b.n	8002fbc <checkthe+0x1a0>
		{
			return;
 8002fba:	bf00      	nop
		}
	}
}
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	20000140 	.word	0x20000140
 8002fcc:	08006874 	.word	0x08006874
 8002fd0:	08006508 	.word	0x08006508
 8002fd4:	20000130 	.word	0x20000130
 8002fd8:	080068c4 	.word	0x080068c4
 8002fdc:	080068d4 	.word	0x080068d4
 8002fe0:	080068e0 	.word	0x080068e0
 8002fe4:	080068ec 	.word	0x080068ec
 8002fe8:	080068f4 	.word	0x080068f4
 8002fec:	080068fc 	.word	0x080068fc
 8002ff0:	08006904 	.word	0x08006904

08002ff4 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <CheckKey+0x58>)
 8003000:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003002:	e015      	b.n	8003030 <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3306      	adds	r3, #6
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd f902 	bl	8000212 <Flash_Read_2Byte>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003016:	429a      	cmp	r2, r3
 8003018:	d107      	bne.n	800302a <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3305      	adds	r3, #5
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	79fa      	ldrb	r2, [r7, #7]
 8003022:	429a      	cmp	r2, r3
 8003024:	d101      	bne.n	800302a <CheckKey+0x36>
				return pt;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	e00b      	b.n	8003042 <CheckKey+0x4e>
		}
		pt = pt + 8;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3308      	adds	r3, #8
 800302e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3305      	adds	r3, #5
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd f8e0 	bl	80001fa <Flash_Read_Byte>
 800303a:	4603      	mov	r3, r0
 800303c:	2bff      	cmp	r3, #255	; 0xff
 800303e:	d1e1      	bne.n	8003004 <CheckKey+0x10>
	}
	return 0;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	0800a000 	.word	0x0800a000

08003050 <removeuid>:
void removeuid(uint32_t addressrm)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3306      	adds	r3, #6
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd f890 	bl	8000184 <Flash_Write_2Byte>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <startadd>:
void startadd(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 8003070:	483b      	ldr	r0, [pc, #236]	; (8003160 <startadd+0xf4>)
 8003072:	f7fd fb45 	bl	8000700 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	4839      	ldr	r0, [pc, #228]	; (8003160 <startadd+0xf4>)
 800307c:	f7fd face 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "SCAN CARD");
 8003080:	4938      	ldr	r1, [pc, #224]	; (8003164 <startadd+0xf8>)
 8003082:	4837      	ldr	r0, [pc, #220]	; (8003160 <startadd+0xf4>)
 8003084:	f7fd fb25 	bl	80006d2 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8003088:	2201      	movs	r2, #1
 800308a:	2100      	movs	r1, #0
 800308c:	4834      	ldr	r0, [pc, #208]	; (8003160 <startadd+0xf4>)
 800308e:	f7fd fac5 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "ADMIN CARD");
 8003092:	4935      	ldr	r1, [pc, #212]	; (8003168 <startadd+0xfc>)
 8003094:	4832      	ldr	r0, [pc, #200]	; (8003160 <startadd+0xf4>)
 8003096:	f7fd fb1c 	bl	80006d2 <CLCD_WriteString>
	setaddress();
 800309a:	f000 f86f 	bl	800317c <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800309e:	4833      	ldr	r0, [pc, #204]	; (800316c <startadd+0x100>)
 80030a0:	f000 f98e 	bl	80033c0 <TM_MFRC522_Check>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f9      	bne.n	800309e <startadd+0x32>
			{
				if (CheckListUID(CardID) == 0)
 80030aa:	4830      	ldr	r0, [pc, #192]	; (800316c <startadd+0x100>)
 80030ac:	f7ff fdc8 	bl	8002c40 <CheckListUID>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <startadd+0x6a>
				{
					CardID[5] = 0x11;
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <startadd+0x100>)
 80030b8:	2211      	movs	r2, #17
 80030ba:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 80030bc:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <startadd+0x104>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2206      	movs	r2, #6
 80030c2:	492a      	ldr	r1, [pc, #168]	; (800316c <startadd+0x100>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd f875 	bl	80001b4 <Flash_Write_Array>
					AddressUID += 8;
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <startadd+0x104>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3308      	adds	r3, #8
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <startadd+0x104>)
 80030d2:	6013      	str	r3, [r2, #0]
					break;
 80030d4:	e025      	b.n	8003122 <startadd+0xb6>
				}
				else
				{
					CLCD_Clear(&LCD1);
 80030d6:	4822      	ldr	r0, [pc, #136]	; (8003160 <startadd+0xf4>)
 80030d8:	f7fd fb12 	bl	8000700 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 80030dc:	2200      	movs	r2, #0
 80030de:	2100      	movs	r1, #0
 80030e0:	481f      	ldr	r0, [pc, #124]	; (8003160 <startadd+0xf4>)
 80030e2:	f7fd fa9b 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD AVAILABLE");
 80030e6:	4923      	ldr	r1, [pc, #140]	; (8003174 <startadd+0x108>)
 80030e8:	481d      	ldr	r0, [pc, #116]	; (8003160 <startadd+0xf4>)
 80030ea:	f7fd faf2 	bl	80006d2 <CLCD_WriteString>
					HAL_Delay(1000);
 80030ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030f2:	f000 fd57 	bl	8003ba4 <HAL_Delay>
					CLCD_Clear(&LCD1);
 80030f6:	481a      	ldr	r0, [pc, #104]	; (8003160 <startadd+0xf4>)
 80030f8:	f7fd fb02 	bl	8000700 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 80030fc:	2200      	movs	r2, #0
 80030fe:	2100      	movs	r1, #0
 8003100:	4817      	ldr	r0, [pc, #92]	; (8003160 <startadd+0xf4>)
 8003102:	f7fd fa8b 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "SCAN CARD");
 8003106:	4917      	ldr	r1, [pc, #92]	; (8003164 <startadd+0xf8>)
 8003108:	4815      	ldr	r0, [pc, #84]	; (8003160 <startadd+0xf4>)
 800310a:	f7fd fae2 	bl	80006d2 <CLCD_WriteString>
					CLCD_SetCursor(&LCD1, 0, 1);
 800310e:	2201      	movs	r2, #1
 8003110:	2100      	movs	r1, #0
 8003112:	4813      	ldr	r0, [pc, #76]	; (8003160 <startadd+0xf4>)
 8003114:	f7fd fa82 	bl	800061c <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "ADMIN CARD");
 8003118:	4913      	ldr	r1, [pc, #76]	; (8003168 <startadd+0xfc>)
 800311a:	4811      	ldr	r0, [pc, #68]	; (8003160 <startadd+0xf4>)
 800311c:	f7fd fad9 	bl	80006d2 <CLCD_WriteString>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8003120:	e7bd      	b.n	800309e <startadd+0x32>
				}
			}
		}
	CLCD_Clear(&LCD1);
 8003122:	480f      	ldr	r0, [pc, #60]	; (8003160 <startadd+0xf4>)
 8003124:	f7fd faec 	bl	8000700 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	480c      	ldr	r0, [pc, #48]	; (8003160 <startadd+0xf4>)
 800312e:	f7fd fa75 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "ADD SUCCESSFUL");
 8003132:	4911      	ldr	r1, [pc, #68]	; (8003178 <startadd+0x10c>)
 8003134:	480a      	ldr	r0, [pc, #40]	; (8003160 <startadd+0xf4>)
 8003136:	f7fd facc 	bl	80006d2 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 800313a:	2201      	movs	r2, #1
 800313c:	2100      	movs	r1, #0
 800313e:	4808      	ldr	r0, [pc, #32]	; (8003160 <startadd+0xf4>)
 8003140:	f7fd fa6c 	bl	800061c <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "ADMIN CARD");
 8003144:	4908      	ldr	r1, [pc, #32]	; (8003168 <startadd+0xfc>)
 8003146:	4806      	ldr	r0, [pc, #24]	; (8003160 <startadd+0xf4>)
 8003148:	f7fd fac3 	bl	80006d2 <CLCD_WriteString>
	HAL_Delay(1000);
 800314c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003150:	f000 fd28 	bl	8003ba4 <HAL_Delay>
	CLCD_Clear(&LCD1);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <startadd+0xf4>)
 8003156:	f7fd fad3 	bl	8000700 <CLCD_Clear>
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000140 	.word	0x20000140
 8003164:	08006874 	.word	0x08006874
 8003168:	080068d4 	.word	0x080068d4
 800316c:	20000130 	.word	0x20000130
 8003170:	20000004 	.word	0x20000004
 8003174:	080068b4 	.word	0x080068b4
 8003178:	0800690c 	.word	0x0800690c

0800317c <setaddress>:
void setaddress(void){
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <setaddress+0x30>)
 8003184:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003186:	e002      	b.n	800318e <setaddress+0x12>
	{
		pt = pt + 8;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3308      	adds	r3, #8
 800318c:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3305      	adds	r3, #5
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f831 	bl	80001fa <Flash_Read_Byte>
 8003198:	4603      	mov	r3, r0
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d1f4      	bne.n	8003188 <setaddress+0xc>
	}
	AddressUID = pt;
 800319e:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <setaddress+0x34>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	0800a000 	.word	0x0800a000
 80031b0:	20000004 	.word	0x20000004

080031b4 <password_keypad>:
void password_keypad(void){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 80031ba:	4845      	ldr	r0, [pc, #276]	; (80032d0 <password_keypad+0x11c>)
 80031bc:	f7fd faa0 	bl	8000700 <CLCD_Clear>
	  CLCD_SetCursor(&LCD1, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	4842      	ldr	r0, [pc, #264]	; (80032d0 <password_keypad+0x11c>)
 80031c6:	f7fd fa29 	bl	800061c <CLCD_SetCursor>
	  CLCD_WriteString(&LCD1, "PASSWORD :");
 80031ca:	4942      	ldr	r1, [pc, #264]	; (80032d4 <password_keypad+0x120>)
 80031cc:	4840      	ldr	r0, [pc, #256]	; (80032d0 <password_keypad+0x11c>)
 80031ce:	f7fd fa80 	bl	80006d2 <CLCD_WriteString>
	  exitmenu = 120;
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <password_keypad+0x124>)
 80031d4:	2278      	movs	r2, #120	; 0x78
 80031d6:	701a      	strb	r2, [r3, #0]

	  uint8_t pass[16] = {-1};
 80031d8:	23ff      	movs	r3, #255	; 0xff
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
	  uint8_t k = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	75fb      	strb	r3, [r7, #23]

	  HAL_Delay(1000);
 80031ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031f0:	f000 fcd8 	bl	8003ba4 <HAL_Delay>
//	  while(checkMENU() != 0){}
		CLCD_SetCursor(&LCD1, k, 1);
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4619      	mov	r1, r3
 80031fa:	4835      	ldr	r0, [pc, #212]	; (80032d0 <password_keypad+0x11c>)
 80031fc:	f7fd fa0e 	bl	800061c <CLCD_SetCursor>
		CLCD_WriteChar(&LCD1, 95);
 8003200:	215f      	movs	r1, #95	; 0x5f
 8003202:	4833      	ldr	r0, [pc, #204]	; (80032d0 <password_keypad+0x11c>)
 8003204:	f7fd fa34 	bl	8000670 <CLCD_WriteChar>
	  while (exitmenu) {
 8003208:	e058      	b.n	80032bc <password_keypad+0x108>
	    // Read key from keypad
	    char key = KEYPAD_Read();
 800320a:	f7fd f883 	bl	8000314 <KEYPAD_Read>
 800320e:	4603      	mov	r3, r0
 8003210:	757b      	strb	r3, [r7, #21]

	    if (key != '#' && key != '*' && key != KEYPAD_NOT_PRESSED) {
 8003212:	7d7b      	ldrb	r3, [r7, #21]
 8003214:	2b23      	cmp	r3, #35	; 0x23
 8003216:	d051      	beq.n	80032bc <password_keypad+0x108>
 8003218:	7d7b      	ldrb	r3, [r7, #21]
 800321a:	2b2a      	cmp	r3, #42	; 0x2a
 800321c:	d04e      	beq.n	80032bc <password_keypad+0x108>
 800321e:	7d7b      	ldrb	r3, [r7, #21]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d04b      	beq.n	80032bc <password_keypad+0x108>
	      CLCD_SetCursor(&LCD1, k, 1);
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2201      	movs	r2, #1
 8003228:	4619      	mov	r1, r3
 800322a:	4829      	ldr	r0, [pc, #164]	; (80032d0 <password_keypad+0x11c>)
 800322c:	f7fd f9f6 	bl	800061c <CLCD_SetCursor>
	      CLCD_WriteChar(&LCD1, '*');
 8003230:	212a      	movs	r1, #42	; 0x2a
 8003232:	4827      	ldr	r0, [pc, #156]	; (80032d0 <password_keypad+0x11c>)
 8003234:	f7fd fa1c 	bl	8000670 <CLCD_WriteChar>

	      pass[k] = key ;
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	3318      	adds	r3, #24
 800323c:	443b      	add	r3, r7
 800323e:	7d7a      	ldrb	r2, [r7, #21]
 8003240:	f803 2c14 	strb.w	r2, [r3, #-20]
	      k++;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	3301      	adds	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]

	      if (k == 6) {
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b06      	cmp	r3, #6
 800324e:	d125      	bne.n	800329c <password_keypad+0xe8>
	        for (uint8_t i = 0; i < 6; i++) {
 8003250:	2300      	movs	r3, #0
 8003252:	75bb      	strb	r3, [r7, #22]
 8003254:	e00c      	b.n	8003270 <password_keypad+0xbc>
	          if (pass[i] != PassWord[i]) {
 8003256:	7dbb      	ldrb	r3, [r7, #22]
 8003258:	3318      	adds	r3, #24
 800325a:	443b      	add	r3, r7
 800325c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003260:	7dbb      	ldrb	r3, [r7, #22]
 8003262:	491e      	ldr	r1, [pc, #120]	; (80032dc <password_keypad+0x128>)
 8003264:	5ccb      	ldrb	r3, [r1, r3]
 8003266:	429a      	cmp	r2, r3
 8003268:	d12d      	bne.n	80032c6 <password_keypad+0x112>
	        for (uint8_t i = 0; i < 6; i++) {
 800326a:	7dbb      	ldrb	r3, [r7, #22]
 800326c:	3301      	adds	r3, #1
 800326e:	75bb      	strb	r3, [r7, #22]
 8003270:	7dbb      	ldrb	r3, [r7, #22]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d9ef      	bls.n	8003256 <password_keypad+0xa2>
	        }


//	        resetflash();
//	        startadd();
			CLCD_Clear(&LCD1);
 8003276:	4816      	ldr	r0, [pc, #88]	; (80032d0 <password_keypad+0x11c>)
 8003278:	f7fd fa42 	bl	8000700 <CLCD_Clear>
			CLCD_SetCursor(&LCD1, 0, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2100      	movs	r1, #0
 8003280:	4813      	ldr	r0, [pc, #76]	; (80032d0 <password_keypad+0x11c>)
 8003282:	f7fd f9cb 	bl	800061c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, "    WELCOME");
 8003286:	4916      	ldr	r1, [pc, #88]	; (80032e0 <password_keypad+0x12c>)
 8003288:	4811      	ldr	r0, [pc, #68]	; (80032d0 <password_keypad+0x11c>)
 800328a:	f7fd fa22 	bl	80006d2 <CLCD_WriteString>
			HAL_Delay(5000);
 800328e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003292:	f000 fc87 	bl	8003ba4 <HAL_Delay>
	        exitmenu = 0;
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <password_keypad+0x124>)
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
	      }

	      CLCD_SetCursor(&LCD1, k, 1);
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2201      	movs	r2, #1
 80032a0:	4619      	mov	r1, r3
 80032a2:	480b      	ldr	r0, [pc, #44]	; (80032d0 <password_keypad+0x11c>)
 80032a4:	f7fd f9ba 	bl	800061c <CLCD_SetCursor>
	      CLCD_WriteChar(&LCD1, 95);
 80032a8:	215f      	movs	r1, #95	; 0x5f
 80032aa:	4809      	ldr	r0, [pc, #36]	; (80032d0 <password_keypad+0x11c>)
 80032ac:	f7fd f9e0 	bl	8000670 <CLCD_WriteChar>
	      while(KEYPAD_Read() != KEYPAD_NOT_PRESSED );
 80032b0:	bf00      	nop
 80032b2:	f7fd f82f 	bl	8000314 <KEYPAD_Read>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1fa      	bne.n	80032b2 <password_keypad+0xfe>
	  while (exitmenu) {
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <password_keypad+0x124>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1a2      	bne.n	800320a <password_keypad+0x56>
 80032c4:	e000      	b.n	80032c8 <password_keypad+0x114>
	            return;
 80032c6:	bf00      	nop
	    }
	  }
}
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000140 	.word	0x20000140
 80032d4:	0800691c 	.word	0x0800691c
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000008 	.word	0x20000008
 80032e0:	0800646c 	.word	0x0800646c

080032e4 <resetflash>:
//	}
//
//}

void resetflash()
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <resetflash+0x34>)
 80032ec:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80032ee:	e002      	b.n	80032f6 <resetflash+0x12>
		Flash_Erase(pt);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fc ff2b 	bl	800014c <Flash_Erase>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fc ff97 	bl	800022a <Flash_Read_8Byte>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	bf08      	it	eq
 8003306:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800330a:	d1f1      	bne.n	80032f0 <resetflash+0xc>
	}
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	0800a000 	.word	0x0800a000

0800331c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003320:	b672      	cpsid	i
}
 8003322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003324:	e7fe      	b.n	8003324 <Error_Handler+0x8>
	...

08003328 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003336:	bf00      	nop
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <TM_SPI_Send+0x4c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d1f8      	bne.n	8003338 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003346:	f107 0208 	add.w	r2, r7, #8
 800334a:	f107 010c 	add.w	r1, r7, #12
 800334e:	230a      	movs	r3, #10
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2301      	movs	r3, #1
 8003354:	4807      	ldr	r0, [pc, #28]	; (8003374 <TM_SPI_Send+0x4c>)
 8003356:	f002 f9f7 	bl	8005748 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 800335a:	bf00      	nop
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <TM_SPI_Send+0x4c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d0f8      	beq.n	800335c <TM_SPI_Send+0x34>
	return data_re[0];
 800336a:	7a3b      	ldrb	r3, [r7, #8]

}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000090 	.word	0x20000090

08003378 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 800337c:	f000 f8d5 	bl	800352a <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003380:	218d      	movs	r1, #141	; 0x8d
 8003382:	202a      	movs	r0, #42	; 0x2a
 8003384:	f000 f836 	bl	80033f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003388:	213e      	movs	r1, #62	; 0x3e
 800338a:	202b      	movs	r0, #43	; 0x2b
 800338c:	f000 f832 	bl	80033f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003390:	211e      	movs	r1, #30
 8003392:	202d      	movs	r0, #45	; 0x2d
 8003394:	f000 f82e 	bl	80033f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003398:	2100      	movs	r1, #0
 800339a:	202c      	movs	r0, #44	; 0x2c
 800339c:	f000 f82a 	bl	80033f4 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80033a0:	2170      	movs	r1, #112	; 0x70
 80033a2:	2026      	movs	r0, #38	; 0x26
 80033a4:	f000 f826 	bl	80033f4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80033a8:	2140      	movs	r1, #64	; 0x40
 80033aa:	2015      	movs	r0, #21
 80033ac:	f000 f822 	bl	80033f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80033b0:	213d      	movs	r1, #61	; 0x3d
 80033b2:	2011      	movs	r0, #17
 80033b4:	f000 f81e 	bl	80033f4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80033b8:	f000 f8a2 	bl	8003500 <TM_MFRC522_AntennaOn>
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	2026      	movs	r0, #38	; 0x26
 80033cc:	f000 f8b5 	bl	800353a <TM_MFRC522_Request>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f9a1 	bl	8003722 <TM_MFRC522_Anticoll>
 80033e0:	4603      	mov	r3, r0
 80033e2:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 80033e4:	f000 fa23 	bl	800382e <TM_MFRC522_Halt>
	return status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	460a      	mov	r2, r1
 80033fe:	71fb      	strb	r3, [r7, #7]
 8003400:	4613      	mov	r3, r2
 8003402:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003404:	2200      	movs	r2, #0
 8003406:	2110      	movs	r1, #16
 8003408:	480c      	ldr	r0, [pc, #48]	; (800343c <TM_MFRC522_WriteRegister+0x48>)
 800340a:	f001 f898 	bl	800453e <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003418:	b2db      	uxtb	r3, r3
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff84 	bl	8003328 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff80 	bl	8003328 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003428:	2201      	movs	r2, #1
 800342a:	2110      	movs	r1, #16
 800342c:	4803      	ldr	r0, [pc, #12]	; (800343c <TM_MFRC522_WriteRegister+0x48>)
 800342e:	f001 f886 	bl	800453e <HAL_GPIO_WritePin>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40010800 	.word	0x40010800

08003440 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 800344a:	2200      	movs	r2, #0
 800344c:	2110      	movs	r1, #16
 800344e:	480f      	ldr	r0, [pc, #60]	; (800348c <TM_MFRC522_ReadRegister+0x4c>)
 8003450:	f001 f875 	bl	800453e <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	b25b      	sxtb	r3, r3
 800345a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800345e:	b25b      	sxtb	r3, r3
 8003460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003464:	b25b      	sxtb	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff5d 	bl	8003328 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 800346e:	2000      	movs	r0, #0
 8003470:	f7ff ff5a 	bl	8003328 <TM_SPI_Send>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003478:	2201      	movs	r2, #1
 800347a:	2110      	movs	r1, #16
 800347c:	4803      	ldr	r0, [pc, #12]	; (800348c <TM_MFRC522_ReadRegister+0x4c>)
 800347e:	f001 f85e 	bl	800453e <HAL_GPIO_WritePin>

	return val;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40010800 	.word	0x40010800

08003490 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	460a      	mov	r2, r1
 800349a:	71fb      	strb	r3, [r7, #7]
 800349c:	4613      	mov	r3, r2
 800349e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ffcc 	bl	8003440 <TM_MFRC522_ReadRegister>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	79bb      	ldrb	r3, [r7, #6]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff9c 	bl	80033f4 <TM_MFRC522_WriteRegister>
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	460a      	mov	r2, r1
 80034ce:	71fb      	strb	r3, [r7, #7]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ffb2 	bl	8003440 <TM_MFRC522_ReadRegister>
 80034dc:	4603      	mov	r3, r0
 80034de:	b25a      	sxtb	r2, r3
 80034e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	4013      	ands	r3, r2
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ff7e 	bl	80033f4 <TM_MFRC522_WriteRegister>
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003506:	2014      	movs	r0, #20
 8003508:	f7ff ff9a 	bl	8003440 <TM_MFRC522_ReadRegister>
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800351a:	2103      	movs	r1, #3
 800351c:	2014      	movs	r0, #20
 800351e:	f7ff ffb7 	bl	8003490 <TM_MFRC522_SetBitMask>
	}
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 800352a:	b580      	push	{r7, lr}
 800352c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800352e:	210f      	movs	r1, #15
 8003530:	2001      	movs	r0, #1
 8003532:	f7ff ff5f 	bl	80033f4 <TM_MFRC522_WriteRegister>
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}

0800353a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af02      	add	r7, sp, #8
 8003540:	4603      	mov	r3, r0
 8003542:	6039      	str	r1, [r7, #0]
 8003544:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003546:	2107      	movs	r1, #7
 8003548:	200d      	movs	r0, #13
 800354a:	f7ff ff53 	bl	80033f4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	79fa      	ldrb	r2, [r7, #7]
 8003552:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2201      	movs	r2, #1
 800355e:	6839      	ldr	r1, [r7, #0]
 8003560:	200c      	movs	r0, #12
 8003562:	f000 f80f 	bl	8003584 <TM_MFRC522_ToCard>
 8003566:	4603      	mov	r3, r0
 8003568:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <TM_MFRC522_Request+0x3c>
 8003570:	89bb      	ldrh	r3, [r7, #12]
 8003572:	2b10      	cmp	r3, #16
 8003574:	d001      	beq.n	800357a <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003576:	2302      	movs	r3, #2
 8003578:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	4603      	mov	r3, r0
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	4613      	mov	r3, r2
 8003594:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003596:	2302      	movs	r3, #2
 8003598:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800359a:	2300      	movs	r3, #0
 800359c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800359e:	2300      	movs	r3, #0
 80035a0:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d006      	beq.n	80035b6 <TM_MFRC522_ToCard+0x32>
 80035a8:	2b0e      	cmp	r3, #14
 80035aa:	d109      	bne.n	80035c0 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80035ac:	2312      	movs	r3, #18
 80035ae:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80035b0:	2310      	movs	r3, #16
 80035b2:	757b      	strb	r3, [r7, #21]
			break;
 80035b4:	e005      	b.n	80035c2 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80035b6:	2377      	movs	r3, #119	; 0x77
 80035b8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80035ba:	2330      	movs	r3, #48	; 0x30
 80035bc:	757b      	strb	r3, [r7, #21]
			break;
 80035be:	e000      	b.n	80035c2 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80035c0:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80035c2:	7dbb      	ldrb	r3, [r7, #22]
 80035c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	4619      	mov	r1, r3
 80035cc:	2002      	movs	r0, #2
 80035ce:	f7ff ff11 	bl	80033f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	2004      	movs	r0, #4
 80035d6:	f7ff ff75 	bl	80034c4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	200a      	movs	r0, #10
 80035de:	f7ff ff57 	bl	8003490 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80035e2:	2100      	movs	r1, #0
 80035e4:	2001      	movs	r0, #1
 80035e6:	f7ff ff05 	bl	80033f4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80035ea:	2300      	movs	r3, #0
 80035ec:	827b      	strh	r3, [r7, #18]
 80035ee:	e00a      	b.n	8003606 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80035f0:	8a7b      	ldrh	r3, [r7, #18]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4413      	add	r3, r2
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	2009      	movs	r0, #9
 80035fc:	f7ff fefa 	bl	80033f4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003600:	8a7b      	ldrh	r3, [r7, #18]
 8003602:	3301      	adds	r3, #1
 8003604:	827b      	strh	r3, [r7, #18]
 8003606:	7bbb      	ldrb	r3, [r7, #14]
 8003608:	b29b      	uxth	r3, r3
 800360a:	8a7a      	ldrh	r2, [r7, #18]
 800360c:	429a      	cmp	r2, r3
 800360e:	d3ef      	bcc.n	80035f0 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	4619      	mov	r1, r3
 8003614:	2001      	movs	r0, #1
 8003616:	f7ff feed 	bl	80033f4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d103      	bne.n	8003628 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	200d      	movs	r0, #13
 8003624:	f7ff ff34 	bl	8003490 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003628:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800362c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800362e:	2004      	movs	r0, #4
 8003630:	f7ff ff06 	bl	8003440 <TM_MFRC522_ReadRegister>
 8003634:	4603      	mov	r3, r0
 8003636:	753b      	strb	r3, [r7, #20]
		i--;
 8003638:	8a7b      	ldrh	r3, [r7, #18]
 800363a:	3b01      	subs	r3, #1
 800363c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800363e:	8a7b      	ldrh	r3, [r7, #18]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <TM_MFRC522_ToCard+0xd6>
 8003644:	7d3b      	ldrb	r3, [r7, #20]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <TM_MFRC522_ToCard+0xd6>
 800364e:	7d3a      	ldrb	r2, [r7, #20]
 8003650:	7d7b      	ldrb	r3, [r7, #21]
 8003652:	4013      	ands	r3, r2
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0e9      	beq.n	800362e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	200d      	movs	r0, #13
 800365e:	f7ff ff31 	bl	80034c4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003662:	8a7b      	ldrh	r3, [r7, #18]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d057      	beq.n	8003718 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003668:	2006      	movs	r0, #6
 800366a:	f7ff fee9 	bl	8003440 <TM_MFRC522_ReadRegister>
 800366e:	4603      	mov	r3, r0
 8003670:	f003 031b 	and.w	r3, r3, #27
 8003674:	2b00      	cmp	r3, #0
 8003676:	d14d      	bne.n	8003714 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800367c:	7d3a      	ldrb	r2, [r7, #20]
 800367e:	7dbb      	ldrb	r3, [r7, #22]
 8003680:	4013      	ands	r3, r2
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d140      	bne.n	8003718 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003696:	200a      	movs	r0, #10
 8003698:	f7ff fed2 	bl	8003440 <TM_MFRC522_ReadRegister>
 800369c:	4603      	mov	r3, r0
 800369e:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80036a0:	200c      	movs	r0, #12
 80036a2:	f7ff fecd 	bl	8003440 <TM_MFRC522_ReadRegister>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 80036ae:	7c7b      	ldrb	r3, [r7, #17]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80036b4:	7d3b      	ldrb	r3, [r7, #20]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	b29a      	uxth	r2, r3
 80036be:	7c7b      	ldrb	r3, [r7, #17]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e005      	b.n	80036d8 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80036cc:	7d3b      	ldrb	r3, [r7, #20]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80036d8:	7d3b      	ldrb	r3, [r7, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80036de:	2301      	movs	r3, #1
 80036e0:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80036e2:	7d3b      	ldrb	r3, [r7, #20]
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d901      	bls.n	80036ec <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80036e8:	2310      	movs	r3, #16
 80036ea:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	827b      	strh	r3, [r7, #18]
 80036f0:	e00a      	b.n	8003708 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80036f2:	8a7b      	ldrh	r3, [r7, #18]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	18d4      	adds	r4, r2, r3
 80036f8:	2009      	movs	r0, #9
 80036fa:	f7ff fea1 	bl	8003440 <TM_MFRC522_ReadRegister>
 80036fe:	4603      	mov	r3, r0
 8003700:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003702:	8a7b      	ldrh	r3, [r7, #18]
 8003704:	3301      	adds	r3, #1
 8003706:	827b      	strh	r3, [r7, #18]
 8003708:	7d3b      	ldrb	r3, [r7, #20]
 800370a:	b29b      	uxth	r3, r3
 800370c:	8a7a      	ldrh	r2, [r7, #18]
 800370e:	429a      	cmp	r2, r3
 8003710:	d3ef      	bcc.n	80036f2 <TM_MFRC522_ToCard+0x16e>
 8003712:	e001      	b.n	8003718 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003714:	2302      	movs	r3, #2
 8003716:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
}
 800371a:	4618      	mov	r0, r3
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd90      	pop	{r4, r7, pc}

08003722 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af02      	add	r7, sp, #8
 8003728:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800372e:	2100      	movs	r1, #0
 8003730:	200d      	movs	r0, #13
 8003732:	f7ff fe5f 	bl	80033f4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2293      	movs	r2, #147	; 0x93
 800373a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3301      	adds	r3, #1
 8003740:	2220      	movs	r2, #32
 8003742:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003744:	f107 030a 	add.w	r3, r7, #10
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	200c      	movs	r0, #12
 8003752:	f7ff ff17 	bl	8003584 <TM_MFRC522_ToCard>
 8003756:	4603      	mov	r3, r0
 8003758:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d118      	bne.n	8003792 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003760:	2300      	movs	r3, #0
 8003762:	73bb      	strb	r3, [r7, #14]
 8003764:	e009      	b.n	800377a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003766:	7bbb      	ldrb	r3, [r7, #14]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	7b7b      	ldrb	r3, [r7, #13]
 8003770:	4053      	eors	r3, r2
 8003772:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003774:	7bbb      	ldrb	r3, [r7, #14]
 8003776:	3301      	adds	r3, #1
 8003778:	73bb      	strb	r3, [r7, #14]
 800377a:	7bbb      	ldrb	r3, [r7, #14]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d9f2      	bls.n	8003766 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003780:	7bbb      	ldrb	r3, [r7, #14]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	7b7a      	ldrb	r2, [r7, #13]
 800378a:	429a      	cmp	r2, r3
 800378c:	d001      	beq.n	8003792 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800378e:	2302      	movs	r3, #2
 8003790:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	460b      	mov	r3, r1
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80037aa:	2104      	movs	r1, #4
 80037ac:	2005      	movs	r0, #5
 80037ae:	f7ff fe89 	bl	80034c4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80037b2:	2180      	movs	r1, #128	; 0x80
 80037b4:	200a      	movs	r0, #10
 80037b6:	f7ff fe6b 	bl	8003490 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
 80037be:	e00a      	b.n	80037d6 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	2009      	movs	r0, #9
 80037cc:	f7ff fe12 	bl	80033f4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	3301      	adds	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
 80037d6:	7dfa      	ldrb	r2, [r7, #23]
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3f0      	bcc.n	80037c0 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80037de:	2103      	movs	r1, #3
 80037e0:	2001      	movs	r0, #1
 80037e2:	f7ff fe07 	bl	80033f4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80037e6:	23ff      	movs	r3, #255	; 0xff
 80037e8:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80037ea:	2005      	movs	r0, #5
 80037ec:	f7ff fe28 	bl	8003440 <TM_MFRC522_ReadRegister>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75bb      	strb	r3, [r7, #22]
		i--;
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <TM_MFRC522_CalculateCRC+0x6e>
 8003800:	7dbb      	ldrb	r3, [r7, #22]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ef      	beq.n	80037ea <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800380a:	2022      	movs	r0, #34	; 0x22
 800380c:	f7ff fe18 	bl	8003440 <TM_MFRC522_ReadRegister>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1c5c      	adds	r4, r3, #1
 800381c:	2021      	movs	r0, #33	; 0x21
 800381e:	f7ff fe0f 	bl	8003440 <TM_MFRC522_ReadRegister>
 8003822:	4603      	mov	r3, r0
 8003824:	7023      	strb	r3, [r4, #0]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}

0800382e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003834:	2350      	movs	r3, #80	; 0x50
 8003836:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800383c:	463b      	mov	r3, r7
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	463b      	mov	r3, r7
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ffa9 	bl	800379c <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800384a:	463a      	mov	r2, r7
 800384c:	4639      	mov	r1, r7
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	2204      	movs	r2, #4
 8003856:	200c      	movs	r0, #12
 8003858:	f7ff fe94 	bl	8003584 <TM_MFRC522_ToCard>



}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_MspInit+0x5c>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <HAL_MspInit+0x5c>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6193      	str	r3, [r2, #24]
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_MspInit+0x5c>)
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_MspInit+0x5c>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <HAL_MspInit+0x5c>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388c:	61d3      	str	r3, [r2, #28]
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_MspInit+0x5c>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_MspInit+0x60>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_MspInit+0x60>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40010000 	.word	0x40010000

080038c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_I2C_MspInit+0x74>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d124      	bne.n	8003932 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_I2C_MspInit+0x78>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_I2C_MspInit+0x78>)
 80038ee:	f043 0308 	orr.w	r3, r3, #8
 80038f2:	6193      	str	r3, [r2, #24]
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_I2C_MspInit+0x78>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003900:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003906:	2312      	movs	r3, #18
 8003908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390e:	f107 0310 	add.w	r3, r7, #16
 8003912:	4619      	mov	r1, r3
 8003914:	480b      	ldr	r0, [pc, #44]	; (8003944 <HAL_I2C_MspInit+0x7c>)
 8003916:	f000 fc77 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_I2C_MspInit+0x78>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4a08      	ldr	r2, [pc, #32]	; (8003940 <HAL_I2C_MspInit+0x78>)
 8003920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003924:	61d3      	str	r3, [r2, #28]
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_I2C_MspInit+0x78>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003932:	bf00      	nop
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40005800 	.word	0x40005800
 8003940:	40021000 	.word	0x40021000
 8003944:	40010c00 	.word	0x40010c00

08003948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_SPI_MspInit+0x88>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d12f      	bne.n	80039c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_SPI_MspInit+0x8c>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_SPI_MspInit+0x8c>)
 800396e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003972:	6193      	str	r3, [r2, #24]
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_SPI_MspInit+0x8c>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_SPI_MspInit+0x8c>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <HAL_SPI_MspInit+0x8c>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_SPI_MspInit+0x8c>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003998:	23a0      	movs	r3, #160	; 0xa0
 800399a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f107 0310 	add.w	r3, r7, #16
 80039a8:	4619      	mov	r1, r3
 80039aa:	480b      	ldr	r0, [pc, #44]	; (80039d8 <HAL_SPI_MspInit+0x90>)
 80039ac:	f000 fc2c 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039b0:	2340      	movs	r3, #64	; 0x40
 80039b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039bc:	f107 0310 	add.w	r3, r7, #16
 80039c0:	4619      	mov	r1, r3
 80039c2:	4805      	ldr	r0, [pc, #20]	; (80039d8 <HAL_SPI_MspInit+0x90>)
 80039c4:	f000 fc20 	bl	8004208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039c8:	bf00      	nop
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40013000 	.word	0x40013000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40010800 	.word	0x40010800

080039dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d113      	bne.n	8003a16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_TIM_Base_MspInit+0x44>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <HAL_TIM_Base_MspInit+0x44>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	61d3      	str	r3, [r2, #28]
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_TIM_Base_MspInit+0x44>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	201c      	movs	r0, #28
 8003a0c:	f000 f9c5 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a10:	201c      	movs	r0, #28
 8003a12:	f000 f9de 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <NMI_Handler+0x4>

08003a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x4>

08003a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler+0x4>

08003a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a6a:	f000 f87f 	bl	8003b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <TIM2_IRQHandler+0x10>)
 8003a7a:	f002 f94f 	bl	8005d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200000e8 	.word	0x200000e8

08003a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a94:	480c      	ldr	r0, [pc, #48]	; (8003ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a96:	490d      	ldr	r1, [pc, #52]	; (8003acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a9c:	e002      	b.n	8003aa4 <LoopCopyDataInit>

08003a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aa2:	3304      	adds	r3, #4

08003aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa8:	d3f9      	bcc.n	8003a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003aac:	4c0a      	ldr	r4, [pc, #40]	; (8003ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab0:	e001      	b.n	8003ab6 <LoopFillZerobss>

08003ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab4:	3204      	adds	r2, #4

08003ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab8:	d3fb      	bcc.n	8003ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003aba:	f7ff ffe5 	bl	8003a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003abe:	f002 fc8d 	bl	80063dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ac2:	f7fc fe51 	bl	8000768 <main>
  bx lr
 8003ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8003ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003acc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003ad0:	08006968 	.word	0x08006968
  ldr r2, =_sbss
 8003ad4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003ad8:	20000188 	.word	0x20000188

08003adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003adc:	e7fe      	b.n	8003adc <ADC1_2_IRQHandler>
	...

08003ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_Init+0x28>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HAL_Init+0x28>)
 8003aea:	f043 0310 	orr.w	r3, r3, #16
 8003aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af0:	2003      	movs	r0, #3
 8003af2:	f000 f947 	bl	8003d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003af6:	200f      	movs	r0, #15
 8003af8:	f000 f808 	bl	8003b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003afc:	f7ff feb2 	bl	8003864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40022000 	.word	0x40022000

08003b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_InitTick+0x54>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_InitTick+0x58>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f95f 	bl	8003dee <HAL_SYSTICK_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00e      	b.n	8003b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d80a      	bhi.n	8003b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b40:	2200      	movs	r2, #0
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f000 f927 	bl	8003d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b4c:	4a06      	ldr	r2, [pc, #24]	; (8003b68 <HAL_InitTick+0x5c>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000010 	.word	0x20000010
 8003b64:	20000018 	.word	0x20000018
 8003b68:	20000014 	.word	0x20000014

08003b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_IncTick+0x1c>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_IncTick+0x20>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <HAL_IncTick+0x20>)
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	20000018 	.word	0x20000018
 8003b8c:	20000160 	.word	0x20000160

08003b90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return uwTick;
 8003b94:	4b02      	ldr	r3, [pc, #8]	; (8003ba0 <HAL_GetTick+0x10>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	20000160 	.word	0x20000160

08003ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bac:	f7ff fff0 	bl	8003b90 <HAL_GetTick>
 8003bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d005      	beq.n	8003bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_Delay+0x44>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bca:	bf00      	nop
 8003bcc:	f7ff ffe0 	bl	8003b90 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d8f7      	bhi.n	8003bcc <HAL_Delay+0x28>
  {
  }
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000018 	.word	0x20000018

08003bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	60d3      	str	r3, [r2, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db0b      	blt.n	8003c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4906      	ldr	r1, [pc, #24]	; (8003c84 <__NVIC_EnableIRQ+0x34>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2001      	movs	r0, #1
 8003c72:	fa00 f202 	lsl.w	r2, r0, r2
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db0a      	blt.n	8003cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	490c      	ldr	r1, [pc, #48]	; (8003cd4 <__NVIC_SetPriority+0x4c>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb0:	e00a      	b.n	8003cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4908      	ldr	r1, [pc, #32]	; (8003cd8 <__NVIC_SetPriority+0x50>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	761a      	strb	r2, [r3, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e100 	.word	0xe000e100
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1c3 0307 	rsb	r3, r3, #7
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf28      	it	cs
 8003cfa:	2304      	movcs	r3, #4
 8003cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d902      	bls.n	8003d0c <NVIC_EncodePriority+0x30>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3b03      	subs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <NVIC_EncodePriority+0x32>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	401a      	ands	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	4313      	orrs	r3, r2
         );
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	; 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d50:	d301      	bcc.n	8003d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00f      	b.n	8003d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <SysTick_Config+0x40>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5e:	210f      	movs	r1, #15
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	f7ff ff90 	bl	8003c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <SysTick_Config+0x40>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <SysTick_Config+0x40>)
 8003d70:	2207      	movs	r2, #7
 8003d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000e010 	.word	0xe000e010

08003d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff2d 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dac:	f7ff ff42 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f7ff ff90 	bl	8003cdc <NVIC_EncodePriority>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff5f 	bl	8003c88 <__NVIC_SetPriority>
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff35 	bl	8003c50 <__NVIC_EnableIRQ>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffa2 	bl	8003d40 <SysTick_Config>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e22:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <HAL_FLASH_Program+0xd8>)
 8003e24:	7e1b      	ldrb	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_FLASH_Program+0x26>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e054      	b.n	8003ed8 <HAL_FLASH_Program+0xd0>
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <HAL_FLASH_Program+0xd8>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e38:	f000 f8a8 	bl	8003f8c <FLASH_WaitForLastOperation>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d144      	bne.n	8003ed0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d102      	bne.n	8003e52 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	757b      	strb	r3, [r7, #21]
 8003e50:	e007      	b.n	8003e62 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d102      	bne.n	8003e5e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	757b      	strb	r3, [r7, #21]
 8003e5c:	e001      	b.n	8003e62 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003e5e:	2304      	movs	r3, #4
 8003e60:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	75bb      	strb	r3, [r7, #22]
 8003e66:	e02d      	b.n	8003ec4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e68:	7dbb      	ldrb	r3, [r7, #22]
 8003e6a:	005a      	lsls	r2, r3, #1
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	eb02 0c03 	add.w	ip, r2, r3
 8003e72:	7dbb      	ldrb	r3, [r7, #22]
 8003e74:	0119      	lsls	r1, r3, #4
 8003e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e7a:	f1c1 0620 	rsb	r6, r1, #32
 8003e7e:	f1a1 0020 	sub.w	r0, r1, #32
 8003e82:	fa22 f401 	lsr.w	r4, r2, r1
 8003e86:	fa03 f606 	lsl.w	r6, r3, r6
 8003e8a:	4334      	orrs	r4, r6
 8003e8c:	fa23 f000 	lsr.w	r0, r3, r0
 8003e90:	4304      	orrs	r4, r0
 8003e92:	fa23 f501 	lsr.w	r5, r3, r1
 8003e96:	b2a3      	uxth	r3, r4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4660      	mov	r0, ip
 8003e9c:	f000 f85a 	bl	8003f54 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003ea0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ea4:	f000 f872 	bl	8003f8c <FLASH_WaitForLastOperation>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_FLASH_Program+0xdc>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <HAL_FLASH_Program+0xdc>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003ebe:	7dbb      	ldrb	r3, [r7, #22]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	75bb      	strb	r3, [r7, #22]
 8003ec4:	7dba      	ldrb	r2, [r7, #22]
 8003ec6:	7d7b      	ldrb	r3, [r7, #21]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d3cd      	bcc.n	8003e68 <HAL_FLASH_Program+0x60>
 8003ecc:	e000      	b.n	8003ed0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003ece:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_FLASH_Program+0xd8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	761a      	strb	r2, [r3, #24]

  return status;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee0:	20000168 	.word	0x20000168
 8003ee4:	40022000 	.word	0x40022000

08003ee8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <HAL_FLASH_Unlock+0x40>)
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_FLASH_Unlock+0x40>)
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <HAL_FLASH_Unlock+0x44>)
 8003f02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_FLASH_Unlock+0x40>)
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_FLASH_Unlock+0x48>)
 8003f08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f0a:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <HAL_FLASH_Unlock+0x40>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	45670123 	.word	0x45670123
 8003f30:	cdef89ab 	.word	0xcdef89ab

08003f34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_FLASH_Lock+0x1c>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <HAL_FLASH_Lock+0x1c>)
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40022000 	.word	0x40022000

08003f54 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <FLASH_Program_HalfWord+0x30>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <FLASH_Program_HalfWord+0x34>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4a07      	ldr	r2, [pc, #28]	; (8003f88 <FLASH_Program_HalfWord+0x34>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	801a      	strh	r2, [r3, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000168 	.word	0x20000168
 8003f88:	40022000 	.word	0x40022000

08003f8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff fdfc 	bl	8003b90 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f9a:	e010      	b.n	8003fbe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d00c      	beq.n	8003fbe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <FLASH_WaitForLastOperation+0x2e>
 8003faa:	f7ff fdf1 	bl	8003b90 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d201      	bcs.n	8003fbe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e025      	b.n	800400a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003fbe:	4b15      	ldr	r3, [pc, #84]	; (8004014 <FLASH_WaitForLastOperation+0x88>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e8      	bne.n	8003f9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <FLASH_WaitForLastOperation+0x88>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <FLASH_WaitForLastOperation+0x88>)
 8003fd8:	2220      	movs	r2, #32
 8003fda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <FLASH_WaitForLastOperation+0x88>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <FLASH_WaitForLastOperation+0x88>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <FLASH_WaitForLastOperation+0x88>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004000:	f000 f80a 	bl	8004018 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40022000 	.word	0x40022000

08004018 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <FLASH_SetErrorCode+0x9c>)
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <FLASH_SetErrorCode+0x9c>)
 8004038:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f043 0310 	orr.w	r3, r3, #16
 8004040:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004042:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <FLASH_SetErrorCode+0x9c>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <FLASH_SetErrorCode+0x9c>)
 8004058:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <FLASH_SetErrorCode+0x9c>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <FLASH_SetErrorCode+0x9c>)
 8004078:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f240 1201 	movw	r2, #257	; 0x101
 800408c:	4293      	cmp	r3, r2
 800408e:	d106      	bne.n	800409e <FLASH_SetErrorCode+0x86>
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a06      	ldr	r2, [pc, #24]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	61d3      	str	r3, [r2, #28]
}  
 800409c:	e002      	b.n	80040a4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800409e:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <FLASH_SetErrorCode+0x98>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60d3      	str	r3, [r2, #12]
}  
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40022000 	.word	0x40022000
 80040b4:	20000168 	.word	0x20000168

080040b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040ca:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <HAL_FLASHEx_Erase+0xd0>)
 80040cc:	7e1b      	ldrb	r3, [r3, #24]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_FLASHEx_Erase+0x1e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e053      	b.n	800417e <HAL_FLASHEx_Erase+0xc6>
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <HAL_FLASHEx_Erase+0xd0>)
 80040d8:	2201      	movs	r2, #1
 80040da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d116      	bne.n	8004112 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80040e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040e8:	f7ff ff50 	bl	8003f8c <FLASH_WaitForLastOperation>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d141      	bne.n	8004176 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80040f2:	2001      	movs	r0, #1
 80040f4:	f000 f84c 	bl	8004190 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040fc:	f7ff ff46 	bl	8003f8c <FLASH_WaitForLastOperation>
 8004100:	4603      	mov	r3, r0
 8004102:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004104:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_FLASHEx_Erase+0xd4>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <HAL_FLASHEx_Erase+0xd4>)
 800410a:	f023 0304 	bic.w	r3, r3, #4
 800410e:	6113      	str	r3, [r2, #16]
 8004110:	e031      	b.n	8004176 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004112:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004116:	f7ff ff39 	bl	8003f8c <FLASH_WaitForLastOperation>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d12a      	bne.n	8004176 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f04f 32ff 	mov.w	r2, #4294967295
 8004126:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	e019      	b.n	8004164 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004130:	68b8      	ldr	r0, [r7, #8]
 8004132:	f000 f849 	bl	80041c8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004136:	f24c 3050 	movw	r0, #50000	; 0xc350
 800413a:	f7ff ff27 	bl	8003f8c <FLASH_WaitForLastOperation>
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_FLASHEx_Erase+0xd4>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a11      	ldr	r2, [pc, #68]	; (800418c <HAL_FLASHEx_Erase+0xd4>)
 8004148:	f023 0302 	bic.w	r3, r3, #2
 800414c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	601a      	str	r2, [r3, #0]
            break;
 800415a:	e00c      	b.n	8004176 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004162:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	029a      	lsls	r2, r3, #10
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4413      	add	r3, r2
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d3dc      	bcc.n	8004130 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004176:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_FLASHEx_Erase+0xd0>)
 8004178:	2200      	movs	r2, #0
 800417a:	761a      	strb	r2, [r3, #24]

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000168 	.word	0x20000168
 800418c:	40022000 	.word	0x40022000

08004190 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <FLASH_MassErase+0x30>)
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <FLASH_MassErase+0x34>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <FLASH_MassErase+0x34>)
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <FLASH_MassErase+0x34>)
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <FLASH_MassErase+0x34>)
 80041b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	20000168 	.word	0x20000168
 80041c4:	40022000 	.word	0x40022000

080041c8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <FLASH_PageErase+0x38>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <FLASH_PageErase+0x3c>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <FLASH_PageErase+0x3c>)
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <FLASH_PageErase+0x3c>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <FLASH_PageErase+0x3c>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <FLASH_PageErase+0x3c>)
 80041ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000168 	.word	0x20000168
 8004204:	40022000 	.word	0x40022000

08004208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004208:	b480      	push	{r7}
 800420a:	b08b      	sub	sp, #44	; 0x2c
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004216:	2300      	movs	r3, #0
 8004218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800421a:	e169      	b.n	80044f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800421c:	2201      	movs	r2, #1
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	429a      	cmp	r2, r3
 8004236:	f040 8158 	bne.w	80044ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4a9a      	ldr	r2, [pc, #616]	; (80044a8 <HAL_GPIO_Init+0x2a0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d05e      	beq.n	8004302 <HAL_GPIO_Init+0xfa>
 8004244:	4a98      	ldr	r2, [pc, #608]	; (80044a8 <HAL_GPIO_Init+0x2a0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d875      	bhi.n	8004336 <HAL_GPIO_Init+0x12e>
 800424a:	4a98      	ldr	r2, [pc, #608]	; (80044ac <HAL_GPIO_Init+0x2a4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d058      	beq.n	8004302 <HAL_GPIO_Init+0xfa>
 8004250:	4a96      	ldr	r2, [pc, #600]	; (80044ac <HAL_GPIO_Init+0x2a4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d86f      	bhi.n	8004336 <HAL_GPIO_Init+0x12e>
 8004256:	4a96      	ldr	r2, [pc, #600]	; (80044b0 <HAL_GPIO_Init+0x2a8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d052      	beq.n	8004302 <HAL_GPIO_Init+0xfa>
 800425c:	4a94      	ldr	r2, [pc, #592]	; (80044b0 <HAL_GPIO_Init+0x2a8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d869      	bhi.n	8004336 <HAL_GPIO_Init+0x12e>
 8004262:	4a94      	ldr	r2, [pc, #592]	; (80044b4 <HAL_GPIO_Init+0x2ac>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d04c      	beq.n	8004302 <HAL_GPIO_Init+0xfa>
 8004268:	4a92      	ldr	r2, [pc, #584]	; (80044b4 <HAL_GPIO_Init+0x2ac>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d863      	bhi.n	8004336 <HAL_GPIO_Init+0x12e>
 800426e:	4a92      	ldr	r2, [pc, #584]	; (80044b8 <HAL_GPIO_Init+0x2b0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d046      	beq.n	8004302 <HAL_GPIO_Init+0xfa>
 8004274:	4a90      	ldr	r2, [pc, #576]	; (80044b8 <HAL_GPIO_Init+0x2b0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d85d      	bhi.n	8004336 <HAL_GPIO_Init+0x12e>
 800427a:	2b12      	cmp	r3, #18
 800427c:	d82a      	bhi.n	80042d4 <HAL_GPIO_Init+0xcc>
 800427e:	2b12      	cmp	r3, #18
 8004280:	d859      	bhi.n	8004336 <HAL_GPIO_Init+0x12e>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <HAL_GPIO_Init+0x80>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	08004303 	.word	0x08004303
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042ef 	.word	0x080042ef
 8004294:	08004331 	.word	0x08004331
 8004298:	08004337 	.word	0x08004337
 800429c:	08004337 	.word	0x08004337
 80042a0:	08004337 	.word	0x08004337
 80042a4:	08004337 	.word	0x08004337
 80042a8:	08004337 	.word	0x08004337
 80042ac:	08004337 	.word	0x08004337
 80042b0:	08004337 	.word	0x08004337
 80042b4:	08004337 	.word	0x08004337
 80042b8:	08004337 	.word	0x08004337
 80042bc:	08004337 	.word	0x08004337
 80042c0:	08004337 	.word	0x08004337
 80042c4:	08004337 	.word	0x08004337
 80042c8:	08004337 	.word	0x08004337
 80042cc:	080042e5 	.word	0x080042e5
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	4a79      	ldr	r2, [pc, #484]	; (80044bc <HAL_GPIO_Init+0x2b4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80042da:	e02c      	b.n	8004336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	623b      	str	r3, [r7, #32]
          break;
 80042e2:	e029      	b.n	8004338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	3304      	adds	r3, #4
 80042ea:	623b      	str	r3, [r7, #32]
          break;
 80042ec:	e024      	b.n	8004338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	3308      	adds	r3, #8
 80042f4:	623b      	str	r3, [r7, #32]
          break;
 80042f6:	e01f      	b.n	8004338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	330c      	adds	r3, #12
 80042fe:	623b      	str	r3, [r7, #32]
          break;
 8004300:	e01a      	b.n	8004338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800430a:	2304      	movs	r3, #4
 800430c:	623b      	str	r3, [r7, #32]
          break;
 800430e:	e013      	b.n	8004338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d105      	bne.n	8004324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004318:	2308      	movs	r3, #8
 800431a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	611a      	str	r2, [r3, #16]
          break;
 8004322:	e009      	b.n	8004338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004324:	2308      	movs	r3, #8
 8004326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	615a      	str	r2, [r3, #20]
          break;
 800432e:	e003      	b.n	8004338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004330:	2300      	movs	r3, #0
 8004332:	623b      	str	r3, [r7, #32]
          break;
 8004334:	e000      	b.n	8004338 <HAL_GPIO_Init+0x130>
          break;
 8004336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2bff      	cmp	r3, #255	; 0xff
 800433c:	d801      	bhi.n	8004342 <HAL_GPIO_Init+0x13a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	e001      	b.n	8004346 <HAL_GPIO_Init+0x13e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2bff      	cmp	r3, #255	; 0xff
 800434c:	d802      	bhi.n	8004354 <HAL_GPIO_Init+0x14c>
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	e002      	b.n	800435a <HAL_GPIO_Init+0x152>
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	3b08      	subs	r3, #8
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	210f      	movs	r1, #15
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	fa01 f303 	lsl.w	r3, r1, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	401a      	ands	r2, r3
 800436c:	6a39      	ldr	r1, [r7, #32]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80b1 	beq.w	80044ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004388:	4b4d      	ldr	r3, [pc, #308]	; (80044c0 <HAL_GPIO_Init+0x2b8>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	4a4c      	ldr	r2, [pc, #304]	; (80044c0 <HAL_GPIO_Init+0x2b8>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6193      	str	r3, [r2, #24]
 8004394:	4b4a      	ldr	r3, [pc, #296]	; (80044c0 <HAL_GPIO_Init+0x2b8>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80043a0:	4a48      	ldr	r2, [pc, #288]	; (80044c4 <HAL_GPIO_Init+0x2bc>)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	089b      	lsrs	r3, r3, #2
 80043a6:	3302      	adds	r3, #2
 80043a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	220f      	movs	r2, #15
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a40      	ldr	r2, [pc, #256]	; (80044c8 <HAL_GPIO_Init+0x2c0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <HAL_GPIO_Init+0x1ec>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a3f      	ldr	r2, [pc, #252]	; (80044cc <HAL_GPIO_Init+0x2c4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00d      	beq.n	80043f0 <HAL_GPIO_Init+0x1e8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a3e      	ldr	r2, [pc, #248]	; (80044d0 <HAL_GPIO_Init+0x2c8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <HAL_GPIO_Init+0x1e4>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a3d      	ldr	r2, [pc, #244]	; (80044d4 <HAL_GPIO_Init+0x2cc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <HAL_GPIO_Init+0x1e0>
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <HAL_GPIO_Init+0x1ee>
 80043e8:	2304      	movs	r3, #4
 80043ea:	e004      	b.n	80043f6 <HAL_GPIO_Init+0x1ee>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e002      	b.n	80043f6 <HAL_GPIO_Init+0x1ee>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_GPIO_Init+0x1ee>
 80043f4:	2300      	movs	r3, #0
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	f002 0203 	and.w	r2, r2, #3
 80043fc:	0092      	lsls	r2, r2, #2
 80043fe:	4093      	lsls	r3, r2
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004406:	492f      	ldr	r1, [pc, #188]	; (80044c4 <HAL_GPIO_Init+0x2bc>)
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	3302      	adds	r3, #2
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d006      	beq.n	800442e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	492c      	ldr	r1, [pc, #176]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	e006      	b.n	800443c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800442e:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	43db      	mvns	r3, r3
 8004436:	4928      	ldr	r1, [pc, #160]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004438:	4013      	ands	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d006      	beq.n	8004456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4922      	ldr	r1, [pc, #136]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
 8004454:	e006      	b.n	8004464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	43db      	mvns	r3, r3
 800445e:	491e      	ldr	r1, [pc, #120]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004460:	4013      	ands	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4918      	ldr	r1, [pc, #96]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	608b      	str	r3, [r1, #8]
 800447c:	e006      	b.n	800448c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	43db      	mvns	r3, r3
 8004486:	4914      	ldr	r1, [pc, #80]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 8004488:	4013      	ands	r3, r2
 800448a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d021      	beq.n	80044dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	490e      	ldr	r1, [pc, #56]	; (80044d8 <HAL_GPIO_Init+0x2d0>)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
 80044a4:	e021      	b.n	80044ea <HAL_GPIO_Init+0x2e2>
 80044a6:	bf00      	nop
 80044a8:	10320000 	.word	0x10320000
 80044ac:	10310000 	.word	0x10310000
 80044b0:	10220000 	.word	0x10220000
 80044b4:	10210000 	.word	0x10210000
 80044b8:	10120000 	.word	0x10120000
 80044bc:	10110000 	.word	0x10110000
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010800 	.word	0x40010800
 80044cc:	40010c00 	.word	0x40010c00
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40011400 	.word	0x40011400
 80044d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_GPIO_Init+0x304>)
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	4909      	ldr	r1, [pc, #36]	; (800450c <HAL_GPIO_Init+0x304>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	3301      	adds	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f47f ae8e 	bne.w	800421c <HAL_GPIO_Init+0x14>
  }
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	372c      	adds	r7, #44	; 0x2c
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e001      	b.n	8004532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
 800454a:	4613      	mov	r3, r2
 800454c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800454e:	787b      	ldrb	r3, [r7, #1]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800455a:	e003      	b.n	8004564 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	041a      	lsls	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	611a      	str	r2, [r3, #16]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004580:	887a      	ldrh	r2, [r7, #2]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4013      	ands	r3, r2
 8004586:	041a      	lsls	r2, r3, #16
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43d9      	mvns	r1, r3
 800458c:	887b      	ldrh	r3, [r7, #2]
 800458e:	400b      	ands	r3, r1
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	611a      	str	r2, [r3, #16]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e12b      	b.n	800480a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff f97e 	bl	80038c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004602:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004604:	f000 ffea 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 8004608:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4a81      	ldr	r2, [pc, #516]	; (8004814 <HAL_I2C_Init+0x274>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d807      	bhi.n	8004624 <HAL_I2C_Init+0x84>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a80      	ldr	r2, [pc, #512]	; (8004818 <HAL_I2C_Init+0x278>)
 8004618:	4293      	cmp	r3, r2
 800461a:	bf94      	ite	ls
 800461c:	2301      	movls	r3, #1
 800461e:	2300      	movhi	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e006      	b.n	8004632 <HAL_I2C_Init+0x92>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a7d      	ldr	r2, [pc, #500]	; (800481c <HAL_I2C_Init+0x27c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	bf94      	ite	ls
 800462c:	2301      	movls	r3, #1
 800462e:	2300      	movhi	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0e7      	b.n	800480a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a78      	ldr	r2, [pc, #480]	; (8004820 <HAL_I2C_Init+0x280>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	0c9b      	lsrs	r3, r3, #18
 8004644:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a6a      	ldr	r2, [pc, #424]	; (8004814 <HAL_I2C_Init+0x274>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d802      	bhi.n	8004674 <HAL_I2C_Init+0xd4>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3301      	adds	r3, #1
 8004672:	e009      	b.n	8004688 <HAL_I2C_Init+0xe8>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	4a69      	ldr	r2, [pc, #420]	; (8004824 <HAL_I2C_Init+0x284>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	099b      	lsrs	r3, r3, #6
 8004686:	3301      	adds	r3, #1
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	430b      	orrs	r3, r1
 800468e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800469a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	495c      	ldr	r1, [pc, #368]	; (8004814 <HAL_I2C_Init+0x274>)
 80046a4:	428b      	cmp	r3, r1
 80046a6:	d819      	bhi.n	80046dc <HAL_I2C_Init+0x13c>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1e59      	subs	r1, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046b6:	1c59      	adds	r1, r3, #1
 80046b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046bc:	400b      	ands	r3, r1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_I2C_Init+0x138>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1e59      	subs	r1, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d6:	e051      	b.n	800477c <HAL_I2C_Init+0x1dc>
 80046d8:	2304      	movs	r3, #4
 80046da:	e04f      	b.n	800477c <HAL_I2C_Init+0x1dc>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d111      	bne.n	8004708 <HAL_I2C_Init+0x168>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e58      	subs	r0, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	440b      	add	r3, r1
 80046f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e012      	b.n	800472e <HAL_I2C_Init+0x18e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1e58      	subs	r0, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	0099      	lsls	r1, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	fbb0 f3f3 	udiv	r3, r0, r3
 800471e:	3301      	adds	r3, #1
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_Init+0x196>
 8004732:	2301      	movs	r3, #1
 8004734:	e022      	b.n	800477c <HAL_I2C_Init+0x1dc>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10e      	bne.n	800475c <HAL_I2C_Init+0x1bc>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1e58      	subs	r0, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	440b      	add	r3, r1
 800474c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004750:	3301      	adds	r3, #1
 8004752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475a:	e00f      	b.n	800477c <HAL_I2C_Init+0x1dc>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1e58      	subs	r0, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	0099      	lsls	r1, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004772:	3301      	adds	r3, #1
 8004774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	6809      	ldr	r1, [r1, #0]
 8004780:	4313      	orrs	r3, r2
 8004782:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6911      	ldr	r1, [r2, #16]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68d2      	ldr	r2, [r2, #12]
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	430b      	orrs	r3, r1
 80047be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	000186a0 	.word	0x000186a0
 8004818:	001e847f 	.word	0x001e847f
 800481c:	003d08ff 	.word	0x003d08ff
 8004820:	431bde83 	.word	0x431bde83
 8004824:	10624dd3 	.word	0x10624dd3

08004828 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	461a      	mov	r2, r3
 8004834:	460b      	mov	r3, r1
 8004836:	817b      	strh	r3, [r7, #10]
 8004838:	4613      	mov	r3, r2
 800483a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800483c:	f7ff f9a8 	bl	8003b90 <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b20      	cmp	r3, #32
 800484c:	f040 80e0 	bne.w	8004a10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2319      	movs	r3, #25
 8004856:	2201      	movs	r2, #1
 8004858:	4970      	ldr	r1, [pc, #448]	; (8004a1c <HAL_I2C_Master_Transmit+0x1f4>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f964 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
 8004868:	e0d3      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_I2C_Master_Transmit+0x50>
 8004874:	2302      	movs	r3, #2
 8004876:	e0cc      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x1ea>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d007      	beq.n	800489e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2221      	movs	r2, #33	; 0x21
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2210      	movs	r2, #16
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	893a      	ldrh	r2, [r7, #8]
 80048ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a50      	ldr	r2, [pc, #320]	; (8004a20 <HAL_I2C_Master_Transmit+0x1f8>)
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048e0:	8979      	ldrh	r1, [r7, #10]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f89c 	bl	8004a24 <I2C_MasterRequestWrite>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e08d      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800490c:	e066      	b.n	80049dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	6a39      	ldr	r1, [r7, #32]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f9de 	bl	8004cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b04      	cmp	r3, #4
 8004924:	d107      	bne.n	8004936 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e06b      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d11b      	bne.n	80049b0 <HAL_I2C_Master_Transmit+0x188>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	d017      	beq.n	80049b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	6a39      	ldr	r1, [r7, #32]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f9ce 	bl	8004d56 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d107      	bne.n	80049d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e01a      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d194      	bne.n	800490e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	00100002 	.word	0x00100002
 8004a20:	ffff0000 	.word	0xffff0000

08004a24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	460b      	mov	r3, r1
 8004a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d006      	beq.n	8004a4e <I2C_MasterRequestWrite+0x2a>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d003      	beq.n	8004a4e <I2C_MasterRequestWrite+0x2a>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a4c:	d108      	bne.n	8004a60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e00b      	b.n	8004a78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	2b12      	cmp	r3, #18
 8004a66:	d107      	bne.n	8004a78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f84f 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9e:	d103      	bne.n	8004aa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e035      	b.n	8004b18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab4:	d108      	bne.n	8004ac8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ab6:	897b      	ldrh	r3, [r7, #10]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ac4:	611a      	str	r2, [r3, #16]
 8004ac6:	e01b      	b.n	8004b00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ac8:	897b      	ldrh	r3, [r7, #10]
 8004aca:	11db      	asrs	r3, r3, #7
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 0306 	and.w	r3, r3, #6
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f063 030f 	orn	r3, r3, #15
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	490e      	ldr	r1, [pc, #56]	; (8004b20 <I2C_MasterRequestWrite+0xfc>)
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f875 	bl	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e010      	b.n	8004b18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4907      	ldr	r1, [pc, #28]	; (8004b24 <I2C_MasterRequestWrite+0x100>)
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f865 	bl	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	00010008 	.word	0x00010008
 8004b24:	00010002 	.word	0x00010002

08004b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b38:	e025      	b.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d021      	beq.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b42:	f7ff f825 	bl	8003b90 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d116      	bne.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e023      	b.n	8004bce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10d      	bne.n	8004bac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	43da      	mvns	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	e00c      	b.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d0b6      	beq.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004be4:	e051      	b.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d123      	bne.n	8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0204 	orr.w	r2, r3, #4
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e046      	b.n	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d021      	beq.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fe ffa3 	bl	8003b90 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e020      	b.n	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10c      	bne.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf14      	ite	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e00b      	b.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d18d      	bne.n	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce0:	e02d      	b.n	8004d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f878 	bl	8004dd8 <I2C_IsAcknowledgeFailed>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e02d      	b.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d021      	beq.n	8004d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfa:	f7fe ff49 	bl	8003b90 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d302      	bcc.n	8004d10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d116      	bne.n	8004d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e007      	b.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d1ca      	bne.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d62:	e02d      	b.n	8004dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f837 	bl	8004dd8 <I2C_IsAcknowledgeFailed>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e02d      	b.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d021      	beq.n	8004dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7c:	f7fe ff08 	bl	8003b90 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d302      	bcc.n	8004d92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d116      	bne.n	8004dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f043 0220 	orr.w	r2, r3, #32
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e007      	b.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d1ca      	bne.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d11b      	bne.n	8004e28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004df8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	f043 0204 	orr.w	r2, r3, #4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e272      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8087 	beq.w	8004f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e54:	4b92      	ldr	r3, [pc, #584]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d00c      	beq.n	8004e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e60:	4b8f      	ldr	r3, [pc, #572]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d112      	bne.n	8004e92 <HAL_RCC_OscConfig+0x5e>
 8004e6c:	4b8c      	ldr	r3, [pc, #560]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d10b      	bne.n	8004e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7a:	4b89      	ldr	r3, [pc, #548]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d06c      	beq.n	8004f60 <HAL_RCC_OscConfig+0x12c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d168      	bne.n	8004f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e24c      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x76>
 8004e9c:	4b80      	ldr	r3, [pc, #512]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a7f      	ldr	r2, [pc, #508]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e02e      	b.n	8004f08 <HAL_RCC_OscConfig+0xd4>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x98>
 8004eb2:	4b7b      	ldr	r3, [pc, #492]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7a      	ldr	r2, [pc, #488]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	4b78      	ldr	r3, [pc, #480]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a77      	ldr	r2, [pc, #476]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xd4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xbc>
 8004ed6:	4b72      	ldr	r3, [pc, #456]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a71      	ldr	r2, [pc, #452]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6e      	ldr	r2, [pc, #440]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xd4>
 8004ef0:	4b6b      	ldr	r3, [pc, #428]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6a      	ldr	r2, [pc, #424]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fe fe3e 	bl	8003b90 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fe fe3a 	bl	8003b90 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e200      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b5d      	ldr	r3, [pc, #372]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xe4>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fe fe2a 	bl	8003b90 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fe fe26 	bl	8003b90 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e1ec      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x10c>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d063      	beq.n	8005036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f6e:	4b4c      	ldr	r3, [pc, #304]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f7a:	4b49      	ldr	r3, [pc, #292]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d11c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x18c>
 8004f86:	4b46      	ldr	r3, [pc, #280]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	4b43      	ldr	r3, [pc, #268]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_RCC_OscConfig+0x176>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e1c0      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4939      	ldr	r1, [pc, #228]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	e03a      	b.n	8005036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCC_OscConfig+0x270>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fce:	f7fe fddf 	bl	8003b90 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd6:	f7fe fddb 	bl	8003b90 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e1a1      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe8:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff4:	4b2a      	ldr	r3, [pc, #168]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4927      	ldr	r1, [pc, #156]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
 8005008:	e015      	b.n	8005036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_RCC_OscConfig+0x270>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fe fdbe 	bl	8003b90 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005018:	f7fe fdba 	bl	8003b90 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e180      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03a      	beq.n	80050b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d019      	beq.n	800507e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_RCC_OscConfig+0x274>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005050:	f7fe fd9e 	bl	8003b90 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005058:	f7fe fd9a 	bl	8003b90 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e160      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005076:	2001      	movs	r0, #1
 8005078:	f000 fac4 	bl	8005604 <RCC_Delay>
 800507c:	e01c      	b.n	80050b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <HAL_RCC_OscConfig+0x274>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005084:	f7fe fd84 	bl	8003b90 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508a:	e00f      	b.n	80050ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508c:	f7fe fd80 	bl	8003b90 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d908      	bls.n	80050ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e146      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
 80050a4:	42420000 	.word	0x42420000
 80050a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ac:	4b92      	ldr	r3, [pc, #584]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e9      	bne.n	800508c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80a6 	beq.w	8005212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ca:	4b8b      	ldr	r3, [pc, #556]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	4b88      	ldr	r3, [pc, #544]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4a87      	ldr	r2, [pc, #540]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	61d3      	str	r3, [r2, #28]
 80050e2:	4b85      	ldr	r3, [pc, #532]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f2:	4b82      	ldr	r3, [pc, #520]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d118      	bne.n	8005130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fe:	4b7f      	ldr	r3, [pc, #508]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a7e      	ldr	r2, [pc, #504]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510a:	f7fe fd41 	bl	8003b90 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005112:	f7fe fd3d 	bl	8003b90 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b64      	cmp	r3, #100	; 0x64
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e103      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	4b75      	ldr	r3, [pc, #468]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d106      	bne.n	8005146 <HAL_RCC_OscConfig+0x312>
 8005138:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6213      	str	r3, [r2, #32]
 8005144:	e02d      	b.n	80051a2 <HAL_RCC_OscConfig+0x36e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x334>
 800514e:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	4a69      	ldr	r2, [pc, #420]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	6213      	str	r3, [r2, #32]
 800515a:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	4a66      	ldr	r2, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005160:	f023 0304 	bic.w	r3, r3, #4
 8005164:	6213      	str	r3, [r2, #32]
 8005166:	e01c      	b.n	80051a2 <HAL_RCC_OscConfig+0x36e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b05      	cmp	r3, #5
 800516e:	d10c      	bne.n	800518a <HAL_RCC_OscConfig+0x356>
 8005170:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	4a60      	ldr	r2, [pc, #384]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005176:	f043 0304 	orr.w	r3, r3, #4
 800517a:	6213      	str	r3, [r2, #32]
 800517c:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4a5d      	ldr	r2, [pc, #372]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6213      	str	r3, [r2, #32]
 8005188:	e00b      	b.n	80051a2 <HAL_RCC_OscConfig+0x36e>
 800518a:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	4a5a      	ldr	r2, [pc, #360]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6213      	str	r3, [r2, #32]
 8005196:	4b58      	ldr	r3, [pc, #352]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4a57      	ldr	r2, [pc, #348]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d015      	beq.n	80051d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051aa:	f7fe fcf1 	bl	8003b90 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fe fced 	bl	8003b90 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e0b1      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c8:	4b4b      	ldr	r3, [pc, #300]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ee      	beq.n	80051b2 <HAL_RCC_OscConfig+0x37e>
 80051d4:	e014      	b.n	8005200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d6:	f7fe fcdb 	bl	8003b90 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fe fcd7 	bl	8003b90 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e09b      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f4:	4b40      	ldr	r3, [pc, #256]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ee      	bne.n	80051de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d105      	bne.n	8005212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005206:	4b3c      	ldr	r3, [pc, #240]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8087 	beq.w	800532a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800521c:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	d061      	beq.n	80052ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d146      	bne.n	80052be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005230:	4b33      	ldr	r3, [pc, #204]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7fe fcab 	bl	8003b90 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523e:	f7fe fca7 	bl	8003b90 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e06d      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d108      	bne.n	8005278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	4921      	ldr	r1, [pc, #132]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005278:	4b1f      	ldr	r3, [pc, #124]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a19      	ldr	r1, [r3, #32]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	430b      	orrs	r3, r1
 800528a:	491b      	ldr	r1, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005296:	f7fe fc7b 	bl	8003b90 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529e:	f7fe fc77 	bl	8003b90 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e03d      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x46a>
 80052bc:	e035      	b.n	800532a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7fe fc64 	bl	8003b90 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fe fc60 	bl	8003b90 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e026      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x498>
 80052ea:	e01e      	b.n	800532a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e019      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40007000 	.word	0x40007000
 8005300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_OscConfig+0x500>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	429a      	cmp	r2, r3
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d001      	beq.n	800532a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000

08005338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0d0      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d910      	bls.n	800537c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b67      	ldr	r3, [pc, #412]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 0207 	bic.w	r2, r3, #7
 8005362:	4965      	ldr	r1, [pc, #404]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b63      	ldr	r3, [pc, #396]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0b8      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005394:	4b59      	ldr	r3, [pc, #356]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a58      	ldr	r2, [pc, #352]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800539e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ac:	4b53      	ldr	r3, [pc, #332]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a52      	ldr	r2, [pc, #328]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b8:	4b50      	ldr	r3, [pc, #320]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	494d      	ldr	r1, [pc, #308]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d040      	beq.n	8005458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	4b47      	ldr	r3, [pc, #284]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d115      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e07f      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e073      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	4b3d      	ldr	r3, [pc, #244]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e06b      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005416:	4b39      	ldr	r3, [pc, #228]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f023 0203 	bic.w	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4936      	ldr	r1, [pc, #216]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005428:	f7fe fbb2 	bl	8003b90 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	e00a      	b.n	8005446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005430:	f7fe fbae 	bl	8003b90 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	; 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e053      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	4b2d      	ldr	r3, [pc, #180]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 020c 	and.w	r2, r3, #12
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	429a      	cmp	r2, r3
 8005456:	d1eb      	bne.n	8005430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005458:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d210      	bcs.n	8005488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 0207 	bic.w	r2, r3, #7
 800546e:	4922      	ldr	r1, [pc, #136]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	4b20      	ldr	r3, [pc, #128]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e032      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005494:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4916      	ldr	r1, [pc, #88]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054b2:	4b12      	ldr	r3, [pc, #72]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	490e      	ldr	r1, [pc, #56]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054c6:	f000 f821 	bl	800550c <HAL_RCC_GetSysClockFreq>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	490a      	ldr	r1, [pc, #40]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	5ccb      	ldrb	r3, [r1, r3]
 80054da:	fa22 f303 	lsr.w	r3, r2, r3
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <HAL_RCC_ClockConfig+0x1cc>)
 80054e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054e2:	4b09      	ldr	r3, [pc, #36]	; (8005508 <HAL_RCC_ClockConfig+0x1d0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fb10 	bl	8003b0c <HAL_InitTick>

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40022000 	.word	0x40022000
 80054fc:	40021000 	.word	0x40021000
 8005500:	08006948 	.word	0x08006948
 8005504:	20000010 	.word	0x20000010
 8005508:	20000014 	.word	0x20000014

0800550c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800550c:	b490      	push	{r4, r7}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005512:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005514:	1d3c      	adds	r4, r7, #4
 8005516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800551c:	f240 2301 	movw	r3, #513	; 0x201
 8005520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	2300      	movs	r3, #0
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005536:	4b21      	ldr	r3, [pc, #132]	; (80055bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b04      	cmp	r3, #4
 8005544:	d002      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x40>
 8005546:	2b08      	cmp	r3, #8
 8005548:	d003      	beq.n	8005552 <HAL_RCC_GetSysClockFreq+0x46>
 800554a:	e02b      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800554c:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800554e:	623b      	str	r3, [r7, #32]
      break;
 8005550:	e02b      	b.n	80055aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	0c9b      	lsrs	r3, r3, #18
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	3328      	adds	r3, #40	; 0x28
 800555c:	443b      	add	r3, r7
 800555e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005562:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d012      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0c5b      	lsrs	r3, r3, #17
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	3328      	adds	r3, #40	; 0x28
 800557a:	443b      	add	r3, r7
 800557c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4a0e      	ldr	r2, [pc, #56]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005586:	fb03 f202 	mul.w	r2, r3, r2
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
 8005592:	e004      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4a0b      	ldr	r2, [pc, #44]	; (80055c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	623b      	str	r3, [r7, #32]
      break;
 80055a2:	e002      	b.n	80055aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80055a6:	623b      	str	r3, [r7, #32]
      break;
 80055a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055aa:	6a3b      	ldr	r3, [r7, #32]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3728      	adds	r7, #40	; 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc90      	pop	{r4, r7}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	08006928 	.word	0x08006928
 80055bc:	40021000 	.word	0x40021000
 80055c0:	007a1200 	.word	0x007a1200
 80055c4:	003d0900 	.word	0x003d0900

080055c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055cc:	4b02      	ldr	r3, [pc, #8]	; (80055d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	20000010 	.word	0x20000010

080055dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055e0:	f7ff fff2 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4903      	ldr	r1, [pc, #12]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000
 8005600:	08006958 	.word	0x08006958

08005604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <RCC_Delay+0x34>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <RCC_Delay+0x38>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	0a5b      	lsrs	r3, r3, #9
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005620:	bf00      	nop
  }
  while (Delay --);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1e5a      	subs	r2, r3, #1
 8005626:	60fa      	str	r2, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f9      	bne.n	8005620 <RCC_Delay+0x1c>
}
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	20000010 	.word	0x20000010
 800563c:	10624dd3 	.word	0x10624dd3

08005640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e076      	b.n	8005740 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d108      	bne.n	800566c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005662:	d009      	beq.n	8005678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	61da      	str	r2, [r3, #28]
 800566a:	e005      	b.n	8005678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fe f958 	bl	8003948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	ea42 0103 	orr.w	r1, r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	0c1a      	lsrs	r2, r3, #16
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f002 0204 	and.w	r2, r2, #4
 800571e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08c      	sub	sp, #48	; 0x30
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005756:	2301      	movs	r3, #1
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_SPI_TransmitReceive+0x26>
 800576a:	2302      	movs	r3, #2
 800576c:	e18a      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x33c>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005776:	f7fe fa0b 	bl	8003b90 <HAL_GetTick>
 800577a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005794:	2b01      	cmp	r3, #1
 8005796:	d00f      	beq.n	80057b8 <HAL_SPI_TransmitReceive+0x70>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579e:	d107      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x68>
 80057a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d003      	beq.n	80057b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057b6:	e15b      	b.n	8005a70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_SPI_TransmitReceive+0x82>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_SPI_TransmitReceive+0x82>
 80057c4:	887b      	ldrh	r3, [r7, #2]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d103      	bne.n	80057d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057d0:	e14e      	b.n	8005a70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d003      	beq.n	80057e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2205      	movs	r2, #5
 80057e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	887a      	ldrh	r2, [r7, #2]
 80057f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	887a      	ldrh	r2, [r7, #2]
 8005808:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	887a      	ldrh	r2, [r7, #2]
 800580e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d007      	beq.n	800583a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d178      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x10a>
 800584c:	8b7b      	ldrh	r3, [r7, #26]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d166      	bne.n	8005920 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	881a      	ldrh	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005876:	e053      	b.n	8005920 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b02      	cmp	r3, #2
 8005884:	d11b      	bne.n	80058be <HAL_SPI_TransmitReceive+0x176>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d016      	beq.n	80058be <HAL_SPI_TransmitReceive+0x176>
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d113      	bne.n	80058be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	881a      	ldrh	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d119      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x1b8>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d014      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	b292      	uxth	r2, r2
 80058e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058fc:	2301      	movs	r3, #1
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005900:	f7fe f946 	bl	8003b90 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590c:	429a      	cmp	r2, r3
 800590e:	d807      	bhi.n	8005920 <HAL_SPI_TransmitReceive+0x1d8>
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d003      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800591e:	e0a7      	b.n	8005a70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1a6      	bne.n	8005878 <HAL_SPI_TransmitReceive+0x130>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1a1      	bne.n	8005878 <HAL_SPI_TransmitReceive+0x130>
 8005934:	e07c      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_SPI_TransmitReceive+0x1fc>
 800593e:	8b7b      	ldrh	r3, [r7, #26]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d16b      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596a:	e057      	b.n	8005a1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d11c      	bne.n	80059b4 <HAL_SPI_TransmitReceive+0x26c>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d017      	beq.n	80059b4 <HAL_SPI_TransmitReceive+0x26c>
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d114      	bne.n	80059b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d119      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x2ae>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d014      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059f2:	2301      	movs	r3, #1
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059f6:	f7fe f8cb 	bl	8003b90 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d803      	bhi.n	8005a0e <HAL_SPI_TransmitReceive+0x2c6>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d102      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x2cc>
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a1a:	e029      	b.n	8005a70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1a2      	bne.n	800596c <HAL_SPI_TransmitReceive+0x224>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d19d      	bne.n	800596c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f8b1 	bl	8005b9c <SPI_EndRxTxTransaction>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a4c:	e010      	b.n	8005a70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	e000      	b.n	8005a70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3730      	adds	r7, #48	; 0x30
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a9c:	f7fe f878 	bl	8003b90 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005aac:	f7fe f870 	bl	8003b90 <HAL_GetTick>
 8005ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ab2:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	015b      	lsls	r3, r3, #5
 8005ab8:	0d1b      	lsrs	r3, r3, #20
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ac2:	e054      	b.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d050      	beq.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005acc:	f7fe f860 	bl	8003b90 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d902      	bls.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d13d      	bne.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005afa:	d111      	bne.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b04:	d004      	beq.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0e:	d107      	bne.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b28:	d10f      	bne.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e017      	b.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4013      	ands	r3, r2
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d19b      	bne.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000010 	.word	0x20000010

08005b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2180      	movs	r1, #128	; 0x80
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff ff6a 	bl	8005a8c <SPI_WaitFlagStateUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e000      	b.n	8005bd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e041      	b.n	8005c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fd feec 	bl	80039dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f000 fa70 	bl	80060fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e03a      	b.n	8005d06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <HAL_TIM_Base_Start_IT+0x98>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x58>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d009      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x58>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <HAL_TIM_Base_Start_IT+0x9c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x58>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d111      	bne.n	8005cf4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d010      	beq.n	8005d04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf2:	e007      	b.n	8005d04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800

08005d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d122      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d11b      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0202 	mvn.w	r2, #2
 8005d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9b1 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9a4 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f9b3 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d122      	bne.n	8005dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d11b      	bne.n	8005dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0204 	mvn.w	r2, #4
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f987 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005db8:	e005      	b.n	8005dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f97a 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f989 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d122      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d11b      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0208 	mvn.w	r2, #8
 8005df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2204      	movs	r2, #4
 8005df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f95d 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f950 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f95f 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0210 	mvn.w	r2, #16
 8005e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f933 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f926 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f935 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d10e      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d107      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0201 	mvn.w	r2, #1
 8005e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fa fc44 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d10e      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa77 	bl	80063ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d107      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8f9 	bl	80060ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0220 	mvn.w	r2, #32
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fa42 	bl	80063a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_ConfigClockSource+0x18>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0b3      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x180>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7c:	d03e      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0xd0>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	f200 8087 	bhi.w	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8a:	f000 8085 	beq.w	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	d87f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005f94:	2b70      	cmp	r3, #112	; 0x70
 8005f96:	d01a      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0xa2>
 8005f98:	2b70      	cmp	r3, #112	; 0x70
 8005f9a:	d87b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005f9c:	2b60      	cmp	r3, #96	; 0x60
 8005f9e:	d050      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x116>
 8005fa0:	2b60      	cmp	r3, #96	; 0x60
 8005fa2:	d877      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005fa4:	2b50      	cmp	r3, #80	; 0x50
 8005fa6:	d03c      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xf6>
 8005fa8:	2b50      	cmp	r3, #80	; 0x50
 8005faa:	d873      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d058      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x136>
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d86f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005fb4:	2b30      	cmp	r3, #48	; 0x30
 8005fb6:	d064      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x156>
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d86b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d060      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x156>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d867      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05c      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x156>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d05a      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fcc:	e062      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6899      	ldr	r1, [r3, #8]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f000 f966 	bl	80062ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	609a      	str	r2, [r3, #8]
      break;
 8005ffa:	e04e      	b.n	800609a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f000 f94f 	bl	80062ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800601e:	609a      	str	r2, [r3, #8]
      break;
 8006020:	e03b      	b.n	800609a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	461a      	mov	r2, r3
 8006030:	f000 f8c6 	bl	80061c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2150      	movs	r1, #80	; 0x50
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f91d 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8006040:	e02b      	b.n	800609a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	461a      	mov	r2, r3
 8006050:	f000 f8e4 	bl	800621c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2160      	movs	r1, #96	; 0x60
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f90d 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8006060:	e01b      	b.n	800609a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	461a      	mov	r2, r3
 8006070:	f000 f8a6 	bl	80061c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2140      	movs	r1, #64	; 0x40
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f8fd 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8006080:	e00b      	b.n	800609a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f000 f8f4 	bl	800627a <TIM_ITRx_SetConfig>
        break;
 8006092:	e002      	b.n	800609a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006098:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a29      	ldr	r2, [pc, #164]	; (80061b4 <TIM_Base_SetConfig+0xb8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x30>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x30>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <TIM_Base_SetConfig+0xbc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x30>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a25      	ldr	r2, [pc, #148]	; (80061bc <TIM_Base_SetConfig+0xc0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1c      	ldr	r2, [pc, #112]	; (80061b4 <TIM_Base_SetConfig+0xb8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00b      	beq.n	800615e <TIM_Base_SetConfig+0x62>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d007      	beq.n	800615e <TIM_Base_SetConfig+0x62>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a19      	ldr	r2, [pc, #100]	; (80061b8 <TIM_Base_SetConfig+0xbc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_Base_SetConfig+0x62>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a18      	ldr	r2, [pc, #96]	; (80061bc <TIM_Base_SetConfig+0xc0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d108      	bne.n	8006170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <TIM_Base_SetConfig+0xb8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d103      	bne.n	80061a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	615a      	str	r2, [r3, #20]
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800

080061c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 030a 	bic.w	r3, r3, #10
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr

0800621c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f023 0210 	bic.w	r2, r3, #16
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	031b      	lsls	r3, r3, #12
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr

0800627a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	f043 0307 	orr.w	r3, r3, #7
 800629c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	609a      	str	r2, [r3, #8]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b087      	sub	sp, #28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	609a      	str	r2, [r3, #8]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr

080062ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006300:	2302      	movs	r3, #2
 8006302:	e046      	b.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a16      	ldr	r2, [pc, #88]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00e      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006350:	d009      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a10      	ldr	r2, [pc, #64]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10c      	bne.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4313      	orrs	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800

080063a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr

080063cc <memset>:
 80063cc:	4603      	mov	r3, r0
 80063ce:	4402      	add	r2, r0
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d100      	bne.n	80063d6 <memset+0xa>
 80063d4:	4770      	bx	lr
 80063d6:	f803 1b01 	strb.w	r1, [r3], #1
 80063da:	e7f9      	b.n	80063d0 <memset+0x4>

080063dc <__libc_init_array>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	2600      	movs	r6, #0
 80063e0:	4d0c      	ldr	r5, [pc, #48]	; (8006414 <__libc_init_array+0x38>)
 80063e2:	4c0d      	ldr	r4, [pc, #52]	; (8006418 <__libc_init_array+0x3c>)
 80063e4:	1b64      	subs	r4, r4, r5
 80063e6:	10a4      	asrs	r4, r4, #2
 80063e8:	42a6      	cmp	r6, r4
 80063ea:	d109      	bne.n	8006400 <__libc_init_array+0x24>
 80063ec:	f000 f81a 	bl	8006424 <_init>
 80063f0:	2600      	movs	r6, #0
 80063f2:	4d0a      	ldr	r5, [pc, #40]	; (800641c <__libc_init_array+0x40>)
 80063f4:	4c0a      	ldr	r4, [pc, #40]	; (8006420 <__libc_init_array+0x44>)
 80063f6:	1b64      	subs	r4, r4, r5
 80063f8:	10a4      	asrs	r4, r4, #2
 80063fa:	42a6      	cmp	r6, r4
 80063fc:	d105      	bne.n	800640a <__libc_init_array+0x2e>
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	f855 3b04 	ldr.w	r3, [r5], #4
 8006404:	4798      	blx	r3
 8006406:	3601      	adds	r6, #1
 8006408:	e7ee      	b.n	80063e8 <__libc_init_array+0xc>
 800640a:	f855 3b04 	ldr.w	r3, [r5], #4
 800640e:	4798      	blx	r3
 8006410:	3601      	adds	r6, #1
 8006412:	e7f2      	b.n	80063fa <__libc_init_array+0x1e>
 8006414:	08006960 	.word	0x08006960
 8006418:	08006960 	.word	0x08006960
 800641c:	08006960 	.word	0x08006960
 8006420:	08006964 	.word	0x08006964

08006424 <_init>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	bf00      	nop
 8006428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642a:	bc08      	pop	{r3}
 800642c:	469e      	mov	lr, r3
 800642e:	4770      	bx	lr

08006430 <_fini>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr
